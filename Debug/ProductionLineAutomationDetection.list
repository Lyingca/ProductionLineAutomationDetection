
ProductionLineAutomationDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004408  08004408  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004408  08004408  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004408  08004408  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08004420  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004420  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cca0  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002191  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155b5  00000000  00000000  0002ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d916  00000000  00000000  00045535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083592  00000000  00000000  00052e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d63dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000d6430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004368 	.word	0x08004368

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004368 	.word	0x08004368

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_GPIO_Init+0x40>)
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_GPIO_Init+0x40>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_GPIO_Init+0x40>)
 8000400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_GPIO_Init+0x40>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_GPIO_Init+0x40>)
 8000410:	2104      	movs	r1, #4
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_GPIO_Init+0x40>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041a:	2204      	movs	r2, #4
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <LIN_Check_Sum>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum(uint8_t *buf, uint8_t lens)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	000a      	movs	r2, r1
 800043a:	1cfb      	adds	r3, r7, #3
 800043c:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 800043e:	230b      	movs	r3, #11
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 8000446:	230c      	movs	r3, #12
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 800044e:	230f      	movs	r3, #15
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	e011      	b.n	800047c <LIN_Check_Sum+0x4c>
    {
        chm1 += *(buf+i);
 8000458:	200f      	movs	r0, #15
 800045a:	183b      	adds	r3, r7, r0
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	18d3      	adds	r3, r2, r3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b299      	uxth	r1, r3
 8000466:	220c      	movs	r2, #12
 8000468:	18bb      	adds	r3, r7, r2
 800046a:	18ba      	adds	r2, r7, r2
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	188a      	adds	r2, r1, r2
 8000470:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 8000472:	183b      	adds	r3, r7, r0
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	183b      	adds	r3, r7, r0
 8000478:	3201      	adds	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	230f      	movs	r3, #15
 800047e:	18fa      	adds	r2, r7, r3
 8000480:	1cfb      	adds	r3, r7, #3
 8000482:	7812      	ldrb	r2, [r2, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	429a      	cmp	r2, r3
 8000488:	d3e6      	bcc.n	8000458 <LIN_Check_Sum+0x28>
    }
    ckm = chm1 / 256;
 800048a:	210c      	movs	r1, #12
 800048c:	187b      	adds	r3, r7, r1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29a      	uxth	r2, r3
 8000494:	200b      	movs	r0, #11
 8000496:	183b      	adds	r3, r7, r0
 8000498:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b2d9      	uxtb	r1, r3
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	183a      	adds	r2, r7, r0
 80004a4:	7812      	ldrb	r2, [r2, #0]
 80004a6:	188a      	adds	r2, r1, r2
 80004a8:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	0001      	movs	r1, r0
 80004ae:	183a      	adds	r2, r7, r0
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	701a      	strb	r2, [r3, #0]
    return ckm;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	781b      	ldrb	r3, [r3, #0]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LIN_Check_Sum_En>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum_En(uint8_t *buf, uint8_t lens)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 80004d0:	230b      	movs	r3, #11
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 80004d8:	230c      	movs	r3, #12
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e011      	b.n	800050e <LIN_Check_Sum_En+0x4c>
    {
        chm1 += *(buf+i);
 80004ea:	200f      	movs	r0, #15
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	220c      	movs	r2, #12
 80004fa:	18bb      	adds	r3, r7, r2
 80004fc:	18ba      	adds	r2, r7, r2
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	188a      	adds	r2, r1, r2
 8000502:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 8000504:	183b      	adds	r3, r7, r0
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	183b      	adds	r3, r7, r0
 800050a:	3201      	adds	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	230f      	movs	r3, #15
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3e6      	bcc.n	80004ea <LIN_Check_Sum_En+0x28>
    }
    ckm = chm1 / 256;
 800051c:	210c      	movs	r1, #12
 800051e:	187b      	adds	r3, r7, r1
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29a      	uxth	r2, r3
 8000526:	200b      	movs	r0, #11
 8000528:	183b      	adds	r3, r7, r0
 800052a:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	183b      	adds	r3, r7, r0
 8000534:	183a      	adds	r2, r7, r0
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	188a      	adds	r2, r1, r2
 800053a:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 800053c:	183b      	adds	r3, r7, r0
 800053e:	0001      	movs	r1, r0
 8000540:	183a      	adds	r2, r7, r0
 8000542:	7812      	ldrb	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
    return ckm;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	781b      	ldrb	r3, [r3, #0]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}

08000554 <LIN_Tx_PID_Data>:
			       CK_Mode: 校验类型增强型LIN_CK_ENHANCED=1：基本LIN_CK_STANDARD=0
             Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID_Data(UART_HandleTypeDef *huart, uint8_t *buf, uint8_t lens, LIN_CK_Mode CK_Mode)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	0019      	movs	r1, r3
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
    if(CK_Mode == LIN_CK_STANDARD)
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10b      	bne.n	800058a <LIN_Tx_PID_Data+0x36>
    {
    	//arr[i] = *(arr + i)
		//计算标准型校验码，不计算PID
		*(buf + lens) = LIN_Check_Sum(buf, LIN_CHECK_STD_NUM);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	18d4      	adds	r4, r2, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2108      	movs	r1, #8
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff ff56 	bl	8000430 <LIN_Check_Sum>
 8000584:	0003      	movs	r3, r0
 8000586:	7023      	strb	r3, [r4, #0]
 8000588:	e00a      	b.n	80005a0 <LIN_Tx_PID_Data+0x4c>
    }
    else
    {
    	//计算增强型校验码,连PID一起校验
		*(buf + lens) = LIN_Check_Sum_En(buf, LIN_CHECK_EN_NUM);
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	18d4      	adds	r4, r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	2109      	movs	r1, #9
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff ff93 	bl	80004c2 <LIN_Check_Sum_En>
 800059c:	0003      	movs	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
    }

    //发送同步间隔段
	HAL_LIN_SendBreak(huart);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 fbb3 	bl	8002d0e <HAL_LIN_SendBreak>
	//发送同步段
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005a8:	2301      	movs	r3, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <LIN_Tx_PID_Data+0x78>)
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	2201      	movs	r2, #1
 80005b2:	f001 ff7f 	bl	80024b4 <HAL_UART_Transmit>
	//发送PID,数据内容和校验
	HAL_UART_Transmit(huart,buf,LIN_TX_MAXSIZE,HAL_MAX_DELAY);
 80005b6:	2301      	movs	r3, #1
 80005b8:	425b      	negs	r3, r3
 80005ba:	68b9      	ldr	r1, [r7, #8]
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	220a      	movs	r2, #10
 80005c0:	f001 ff78 	bl	80024b4 <HAL_UART_Transmit>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20000000 	.word	0x20000000

080005d0 <LIN_Tx_PID>:
** 功能描述: LIN发送报文头，PID，读取从机状态信息
** 参    数: PID, Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID(UART_HandleTypeDef *huart, uint8_t PID)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	000a      	movs	r2, r1
 80005da:	1cfb      	adds	r3, r7, #3
 80005dc:	701a      	strb	r2, [r3, #0]
	//发送间隔帧
	HAL_LIN_SendBreak(huart);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fb94 	bl	8002d0e <HAL_LIN_SendBreak>
	//发送同步帧
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <LIN_Tx_PID+0x3c>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	f001 ff60 	bl	80024b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart,&PID,1,HAL_MAX_DELAY);
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	1cf9      	adds	r1, r7, #3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	f001 ff59 	bl	80024b4 <HAL_UART_Transmit>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000000 	.word	0x20000000

08000610 <RS232_To_LIN>:

/**
 * RS232 to LIN
 */
void RS232_To_LIN(uint8_t* pRS232Buff)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	LIN_Send_Flag = DISABLE;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <RS232_To_LIN+0xbc>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0;
 800061e:	210f      	movs	r1, #15
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	EXV_Test_Step = (pRS232RxBuff[0] << 8) | pRS232RxBuff[1];
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <RS232_To_LIN+0xc0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <RS232_To_LIN+0xc0>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <RS232_To_LIN+0xc4>)
 800063c:	801a      	strh	r2, [r3, #0]
	pLINTxBuff[index++] = LIN_PID_52_0x34;
 800063e:	0008      	movs	r0, r1
 8000640:	183b      	adds	r3, r7, r0
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	183a      	adds	r2, r7, r0
 8000646:	1c59      	adds	r1, r3, #1
 8000648:	7011      	strb	r1, [r2, #0]
 800064a:	001a      	movs	r2, r3
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <RS232_To_LIN+0xc8>)
 800064e:	21b4      	movs	r1, #180	; 0xb4
 8000650:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = pRS232RxBuff[1];
 8000652:	183b      	adds	r3, r7, r0
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	183a      	adds	r2, r7, r0
 8000658:	1c59      	adds	r1, r3, #1
 800065a:	7011      	strb	r1, [r2, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <RS232_To_LIN+0xc0>)
 8000660:	7859      	ldrb	r1, [r3, #1]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <RS232_To_LIN+0xc8>)
 8000664:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = pRS232RxBuff[0];
 8000666:	183b      	adds	r3, r7, r0
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	183a      	adds	r2, r7, r0
 800066c:	1c59      	adds	r1, r3, #1
 800066e:	7011      	strb	r1, [r2, #0]
 8000670:	001a      	movs	r2, r3
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <RS232_To_LIN+0xc0>)
 8000674:	7819      	ldrb	r1, [r3, #0]
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <RS232_To_LIN+0xc8>)
 8000678:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = EXV_MOVE_CMD;
 800067a:	183b      	adds	r3, r7, r0
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	183a      	adds	r2, r7, r0
 8000680:	1c59      	adds	r1, r3, #1
 8000682:	7011      	strb	r1, [r2, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <RS232_To_LIN+0xc8>)
 8000688:	21ff      	movs	r1, #255	; 0xff
 800068a:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = EXV_INIT_NO_REQ;
 800068c:	183b      	adds	r3, r7, r0
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	183a      	adds	r2, r7, r0
 8000692:	1c59      	adds	r1, r3, #1
 8000694:	7011      	strb	r1, [r2, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <RS232_To_LIN+0xc8>)
 800069a:	21fc      	movs	r1, #252	; 0xfc
 800069c:	5499      	strb	r1, [r3, r2]
	//剩余的字节数有0xFF填充
	while(index < LIN_TX_MAXSIZE - 1)
 800069e:	e009      	b.n	80006b4 <RS232_To_LIN+0xa4>
	{
		pLINTxBuff[index++] = 0xFF;
 80006a0:	220f      	movs	r2, #15
 80006a2:	18bb      	adds	r3, r7, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	18ba      	adds	r2, r7, r2
 80006a8:	1c59      	adds	r1, r3, #1
 80006aa:	7011      	strb	r1, [r2, #0]
 80006ac:	001a      	movs	r2, r3
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <RS232_To_LIN+0xc8>)
 80006b0:	21ff      	movs	r1, #255	; 0xff
 80006b2:	5499      	strb	r1, [r3, r2]
	while(index < LIN_TX_MAXSIZE - 1)
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b08      	cmp	r3, #8
 80006bc:	d9f0      	bls.n	80006a0 <RS232_To_LIN+0x90>
	}
	LIN_Send_Flag = ENABLE;
 80006be:	4b03      	ldr	r3, [pc, #12]	; (80006cc <RS232_To_LIN+0xbc>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b004      	add	sp, #16
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000045 	.word	0x20000045
 80006d0:	20000048 	.word	0x20000048
 80006d4:	20000042 	.word	0x20000042
 80006d8:	20000038 	.word	0x20000038

080006dc <Send_LIN_Data>:

/**
 * 发送LIN数据，包括读取帧和写帧
 */
void Send_LIN_Data()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	if(LIN_Send_Flag)
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Send_LIN_Data+0x44>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00b      	beq.n	8000700 <Send_LIN_Data+0x24>
	{
		LIN_Tx_PID_Data(&huart1,pLINTxBuff,LIN_TX_MAXSIZE - 1,LIN_CK_ENHANCED);
 80006e8:	490e      	ldr	r1, [pc, #56]	; (8000724 <Send_LIN_Data+0x48>)
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <Send_LIN_Data+0x4c>)
 80006ec:	2301      	movs	r3, #1
 80006ee:	2209      	movs	r2, #9
 80006f0:	f7ff ff30 	bl	8000554 <LIN_Tx_PID_Data>
		LIN_Send_Flag = DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <Send_LIN_Data+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		LIN_Read_Flag = ENABLE;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <Send_LIN_Data+0x50>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
	}
	if(LIN_Read_Flag)
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <Send_LIN_Data+0x50>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <Send_LIN_Data+0x3c>
	{
		LIN_Tx_PID(&huart1, LIN_PID_53_0x35);
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <Send_LIN_Data+0x4c>)
 800070a:	21f5      	movs	r1, #245	; 0xf5
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ff5f 	bl	80005d0 <LIN_Tx_PID>
		HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f000 fc7c 	bl	8001010 <HAL_Delay>
	}
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000045 	.word	0x20000045
 8000724:	20000038 	.word	0x20000038
 8000728:	2000004c 	.word	0x2000004c
 800072c:	20000044 	.word	0x20000044

08000730 <Send_Resp_Data>:

/**
 * 设置响应给RS232上位机的数据
 */
void Send_Resp_Data(uint8_t* pBuff,uint16_t data)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	000a      	movs	r2, r1
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	801a      	strh	r2, [r3, #0]
	*pBuff = data >> 8;
 800073e:	1cbb      	adds	r3, r7, #2
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	701a      	strb	r2, [r3, #0]
	*(pBuff + 1) = data;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	1cba      	adds	r2, r7, #2
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,pBuff,sizeof(data),HAL_MAX_DELAY);
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <Send_Resp_Data+0x58>)
 8000760:	2202      	movs	r2, #2
 8000762:	f001 fea7 	bl	80024b4 <HAL_UART_Transmit>
	//读取标志位置为不发送读取数据帧
	LIN_Read_Flag = DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <Send_Resp_Data+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	//重置重试的次数为3
	retries = 3;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <Send_Resp_Data+0x60>)
 800076e:	2203      	movs	r2, #3
 8000770:	701a      	strb	r2, [r3, #0]
	//发送响应数据后表示本次测试结束，清空发送数据缓存
	memset(pLINTxBuff,0,LIN_TX_MAXSIZE);
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <Send_Resp_Data+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	2100      	movs	r1, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f003 fded 	bl	8004358 <memset>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000e0 	.word	0x200000e0
 800078c:	20000044 	.word	0x20000044
 8000790:	20000001 	.word	0x20000001
 8000794:	20000038 	.word	0x20000038

08000798 <LIN_Data_Process>:

/**
 * 数据处理函数
 */
void LIN_Data_Process()
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
	//响应数组
	uint8_t RS232_Resp_Result[2] = {0};
 800079e:	003b      	movs	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	801a      	strh	r2, [r3, #0]
	//电机转动步长
	uint16_t EXV_Run_Step = 0;
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	2200      	movs	r2, #0
 80007a8:	801a      	strh	r2, [r3, #0]
	//通过校验位-校验数据
	uint8_t ckm = 0;
 80007aa:	1d7b      	adds	r3, r7, #5
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	//pLINRxBuff + 1表示从接收的第二个数据开始，因为接收数组第一个是同步段（0x55）
	ckm = LIN_Check_Sum_En(pLINRxBuff + 1,LIN_CHECK_EN_NUM);
 80007b0:	4b62      	ldr	r3, [pc, #392]	; (800093c <LIN_Data_Process+0x1a4>)
 80007b2:	1d7c      	adds	r4, r7, #5
 80007b4:	2109      	movs	r1, #9
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fe83 	bl	80004c2 <LIN_Check_Sum_En>
 80007bc:	0003      	movs	r3, r0
 80007be:	7023      	strb	r3, [r4, #0]
	//如果校验不通过，丢弃这帧数据
	if(ckm != pLINRxBuff[LIN_RX_MAXSIZE - 1])
 80007c0:	4b5f      	ldr	r3, [pc, #380]	; (8000940 <LIN_Data_Process+0x1a8>)
 80007c2:	7a9b      	ldrb	r3, [r3, #10]
 80007c4:	1d7a      	adds	r2, r7, #5
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d000      	beq.n	80007ce <LIN_Data_Process+0x36>
 80007cc:	e0b2      	b.n	8000934 <LIN_Data_Process+0x19c>
	{
		return;
	}
	//解析数据具有优先级：LIN通信故障->电机故障->电压异常->温度异常->电机停止标志->判断步长
	//校验LIN通信故障反馈
	if((pLINRxBuff[2] & EXV_F_RESP_COMP) == EXV_F_RESP_ERROR)
 80007ce:	4b5c      	ldr	r3, [pc, #368]	; (8000940 <LIN_Data_Process+0x1a8>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	001a      	movs	r2, r3
 80007d4:	2301      	movs	r3, #1
 80007d6:	4013      	ands	r3, r2
 80007d8:	d006      	beq.n	80007e8 <LIN_Data_Process+0x50>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_LIN_COMM_ERROR);
 80007da:	4a5a      	ldr	r2, [pc, #360]	; (8000944 <LIN_Data_Process+0x1ac>)
 80007dc:	003b      	movs	r3, r7
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ffa5 	bl	8000730 <Send_Resp_Data>
 80007e6:	e09e      	b.n	8000926 <LIN_Data_Process+0x18e>
	}
	//校验故障状态
	else if((pLINRxBuff[3] & EXV_ST_FAULT_COMP) > 0)
 80007e8:	4b55      	ldr	r3, [pc, #340]	; (8000940 <LIN_Data_Process+0x1a8>)
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	001a      	movs	r2, r3
 80007ee:	230f      	movs	r3, #15
 80007f0:	4013      	ands	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dd31      	ble.n	800085a <LIN_Data_Process+0xc2>
	{
		uint8_t fault_index = pLINRxBuff[3] & EXV_ST_FAULT_COMP;
 80007f6:	4b52      	ldr	r3, [pc, #328]	; (8000940 <LIN_Data_Process+0x1a8>)
 80007f8:	78da      	ldrb	r2, [r3, #3]
 80007fa:	1cfb      	adds	r3, r7, #3
 80007fc:	210f      	movs	r1, #15
 80007fe:	400a      	ands	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
		switch(fault_index)
 8000802:	1cfb      	adds	r3, r7, #3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d020      	beq.n	800084c <LIN_Data_Process+0xb4>
 800080a:	dd00      	ble.n	800080e <LIN_Data_Process+0x76>
 800080c:	e08b      	b.n	8000926 <LIN_Data_Process+0x18e>
 800080e:	2b03      	cmp	r3, #3
 8000810:	d014      	beq.n	800083c <LIN_Data_Process+0xa4>
 8000812:	dd00      	ble.n	8000816 <LIN_Data_Process+0x7e>
 8000814:	e087      	b.n	8000926 <LIN_Data_Process+0x18e>
 8000816:	2b01      	cmp	r3, #1
 8000818:	d002      	beq.n	8000820 <LIN_Data_Process+0x88>
 800081a:	2b02      	cmp	r3, #2
 800081c:	d007      	beq.n	800082e <LIN_Data_Process+0x96>
 800081e:	e082      	b.n	8000926 <LIN_Data_Process+0x18e>
		{
		case EXV_ST_FAULT_SHORTED:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_SHORT);
 8000820:	4a49      	ldr	r2, [pc, #292]	; (8000948 <LIN_Data_Process+0x1b0>)
 8000822:	003b      	movs	r3, r7
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff ff82 	bl	8000730 <Send_Resp_Data>
			break;
 800082c:	e07b      	b.n	8000926 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_OPENLOAD:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_LOADOPEN);
 800082e:	4a47      	ldr	r2, [pc, #284]	; (800094c <LIN_Data_Process+0x1b4>)
 8000830:	003b      	movs	r3, r7
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff ff7b 	bl	8000730 <Send_Resp_Data>
			break;
 800083a:	e074      	b.n	8000926 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_OVERTEMP:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_SHUTDOWN);
 800083c:	23e2      	movs	r3, #226	; 0xe2
 800083e:	009a      	lsls	r2, r3, #2
 8000840:	003b      	movs	r3, r7
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff73 	bl	8000730 <Send_Resp_Data>
			break;
 800084a:	e06c      	b.n	8000926 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_ACTUATORFAULT:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ACTUATOR_FAULT);
 800084c:	4a40      	ldr	r2, [pc, #256]	; (8000950 <LIN_Data_Process+0x1b8>)
 800084e:	003b      	movs	r3, r7
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ff6c 	bl	8000730 <Send_Resp_Data>
			break;
 8000858:	e065      	b.n	8000926 <LIN_Data_Process+0x18e>
		}
	}
	//校验电压状态
	else if((pLINRxBuff[3] & EXV_ST_VOLTAGE_COMP) > 0)
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <LIN_Data_Process+0x1a8>)
 800085c:	78db      	ldrb	r3, [r3, #3]
 800085e:	001a      	movs	r2, r3
 8000860:	2330      	movs	r3, #48	; 0x30
 8000862:	4013      	ands	r3, r2
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd1a      	ble.n	800089e <LIN_Data_Process+0x106>
	{
		uint8_t voltage_index = pLINRxBuff[3] & EXV_ST_VOLTAGE_COMP;
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <LIN_Data_Process+0x1a8>)
 800086a:	78da      	ldrb	r2, [r3, #3]
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2130      	movs	r1, #48	; 0x30
 8000870:	400a      	ands	r2, r1
 8000872:	701a      	strb	r2, [r3, #0]
		switch(voltage_index)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b10      	cmp	r3, #16
 800087a:	d002      	beq.n	8000882 <LIN_Data_Process+0xea>
 800087c:	2b20      	cmp	r3, #32
 800087e:	d007      	beq.n	8000890 <LIN_Data_Process+0xf8>
 8000880:	e051      	b.n	8000926 <LIN_Data_Process+0x18e>
		{
		case EXV_ST_VOLTAGE_OVER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVER_VOLTAGE);
 8000882:	4a34      	ldr	r2, [pc, #208]	; (8000954 <LIN_Data_Process+0x1bc>)
 8000884:	003b      	movs	r3, r7
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff51 	bl	8000730 <Send_Resp_Data>
			break;
 800088e:	e04a      	b.n	8000926 <LIN_Data_Process+0x18e>
		case EXV_ST_VOLTAGE_UNDER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_UNDER_VOLTAGE);
 8000890:	4a31      	ldr	r2, [pc, #196]	; (8000958 <LIN_Data_Process+0x1c0>)
 8000892:	003b      	movs	r3, r7
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ff4a 	bl	8000730 <Send_Resp_Data>
			break;
 800089c:	e043      	b.n	8000926 <LIN_Data_Process+0x18e>
		}
	}
	//校验温度状态
	else if((pLINRxBuff[3] & EXV_OVERTEMP_COMP) == EXV_OVERTEMP_OVER)
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <LIN_Data_Process+0x1a8>)
 80008a0:	78db      	ldrb	r3, [r3, #3]
 80008a2:	001a      	movs	r2, r3
 80008a4:	23c0      	movs	r3, #192	; 0xc0
 80008a6:	4013      	ands	r3, r2
 80008a8:	2b40      	cmp	r3, #64	; 0x40
 80008aa:	d107      	bne.n	80008bc <LIN_Data_Process+0x124>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVERTEMP);
 80008ac:	23e3      	movs	r3, #227	; 0xe3
 80008ae:	009a      	lsls	r2, r3, #2
 80008b0:	003b      	movs	r3, r7
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff ff3b 	bl	8000730 <Send_Resp_Data>
 80008ba:	e034      	b.n	8000926 <LIN_Data_Process+0x18e>
	}
	//电机停止转动
	else if((pLINRxBuff[2] & EXV_ST_RUN_COMP) == EXV_ST_RUN_NOT_MOVE)
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <LIN_Data_Process+0x1a8>)
 80008be:	789b      	ldrb	r3, [r3, #2]
 80008c0:	001a      	movs	r2, r3
 80008c2:	2310      	movs	r3, #16
 80008c4:	4013      	ands	r3, r2
 80008c6:	d12e      	bne.n	8000926 <LIN_Data_Process+0x18e>
	{
		//计算电机转动步长，步长低字节在前高字节在后
		EXV_Run_Step = (pLINRxBuff[5] << 8) | pLINRxBuff[4];
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <LIN_Data_Process+0x1a8>)
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <LIN_Data_Process+0x1a8>)
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21a      	sxth	r2, r3
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	801a      	strh	r2, [r3, #0]
		if(EXV_Run_Step == EXV_Test_Step)
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <LIN_Data_Process+0x1c4>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	1dba      	adds	r2, r7, #6
 80008e4:	8812      	ldrh	r2, [r2, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d107      	bne.n	80008fa <LIN_Data_Process+0x162>
		{
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OK);
 80008ea:	23e1      	movs	r3, #225	; 0xe1
 80008ec:	009a      	lsls	r2, r3, #2
 80008ee:	003b      	movs	r3, r7
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff1c 	bl	8000730 <Send_Resp_Data>
 80008f8:	e015      	b.n	8000926 <LIN_Data_Process+0x18e>
		}
		//重试3次发送电机运动使能
		else
		{
			LIN_Send_Flag = ENABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <LIN_Data_Process+0x1c8>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
			retries--;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <LIN_Data_Process+0x1cc>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <LIN_Data_Process+0x1cc>)
 800090a:	701a      	strb	r2, [r3, #0]
			//当3次电机运动使能后，电机转动步长与测试步长不一致，发送错误信息
			if(retries <= 0)
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <LIN_Data_Process+0x1cc>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d108      	bne.n	8000926 <LIN_Data_Process+0x18e>
			{
				Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ERROR);
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <LIN_Data_Process+0x1d0>)
 8000916:	003b      	movs	r3, r7
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff ff08 	bl	8000730 <Send_Resp_Data>
				//发送标志置为不发送写数据帧
				LIN_Send_Flag = DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <LIN_Data_Process+0x1c8>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//这帧数据解析完成，清空接收缓存数据
	memset(pLINRxBuff,0,LIN_RX_MAXSIZE);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <LIN_Data_Process+0x1a8>)
 8000928:	220b      	movs	r2, #11
 800092a:	2100      	movs	r1, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f003 fd13 	bl	8004358 <memset>
 8000932:	e000      	b.n	8000936 <LIN_Data_Process+0x19e>
		return;
 8000934:	46c0      	nop			; (mov r8, r8)
}
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	2000002d 	.word	0x2000002d
 8000940:	2000002c 	.word	0x2000002c
 8000944:	00000385 	.word	0x00000385
 8000948:	00000386 	.word	0x00000386
 800094c:	00000387 	.word	0x00000387
 8000950:	00000389 	.word	0x00000389
 8000954:	0000038a 	.word	0x0000038a
 8000958:	0000038b 	.word	0x0000038b
 800095c:	20000042 	.word	0x20000042
 8000960:	20000045 	.word	0x20000045
 8000964:	20000001 	.word	0x20000001
 8000968:	0000038d 	.word	0x0000038d

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f000 fac8 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f816 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff fd38 	bl	80003ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800097c:	f000 f942 	bl	8000c04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000980:	f000 f98e 	bl	8000ca0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //开启中断接收
  Util_Receive_IT(&huart1);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <main+0x30>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f854 	bl	8000a34 <Util_Receive_IT>
  Util_Receive_IT(&huart2);
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <main+0x34>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f850 	bl	8000a34 <Util_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //循环发送数据
	  Send_LIN_Data();
 8000994:	f7ff fea2 	bl	80006dc <Send_LIN_Data>
 8000998:	e7fc      	b.n	8000994 <main+0x28>
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	2000004c 	.word	0x2000004c
 80009a0:	200000e0 	.word	0x200000e0

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b093      	sub	sp, #76	; 0x4c
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	2414      	movs	r4, #20
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2334      	movs	r3, #52	; 0x34
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fccf 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	0018      	movs	r0, r3
 80009be:	2310      	movs	r3, #16
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f003 fcc8 	bl	8004358 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe67 	bl	80016a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2202      	movs	r2, #2
 80009d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2240      	movs	r2, #64	; 0x40
 80009ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fe9f 	bl	8001738 <HAL_RCC_OscConfig>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009fe:	f000 f89d 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 f99a 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a28:	f000 f888 	bl	8000b3c <Error_Handler>
  }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b013      	add	sp, #76	; 0x4c
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <Util_Receive_IT>:
/* USER CODE BEGIN 4 */
/**
 * 重写接收中断函数
 */
void Util_Receive_IT(UART_HandleTypeDef *huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <Util_Receive_IT+0x4c>)
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d10a      	bne.n	8000a5a <Util_Receive_IT+0x26>
	{
		if(HAL_UART_Receive_IT(huart, pLINRxBuff, LIN_RX_MAXSIZE) != HAL_OK)
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <Util_Receive_IT+0x50>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	220b      	movs	r2, #11
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fdce 	bl	80025ec <HAL_UART_Receive_IT>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d010      	beq.n	8000a76 <Util_Receive_IT+0x42>
		{
			Error_Handler();
 8000a54:	f000 f872 	bl	8000b3c <Error_Handler>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 8000a58:	e00d      	b.n	8000a76 <Util_Receive_IT+0x42>
	else if(huart == &huart2)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <Util_Receive_IT+0x54>)
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d109      	bne.n	8000a76 <Util_Receive_IT+0x42>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
 8000a62:	490a      	ldr	r1, [pc, #40]	; (8000a8c <Util_Receive_IT+0x58>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2202      	movs	r2, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fdbf 	bl	80025ec <HAL_UART_Receive_IT>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <Util_Receive_IT+0x42>
			Error_Handler();
 8000a72:	f000 f863 	bl	8000b3c <Error_Handler>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2000004c 	.word	0x2000004c
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	200000e0 	.word	0x200000e0
 8000a8c:	20000048 	.word	0x20000048

08000a90 <HAL_UART_RxCpltCallback>:
 * @brief Rx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	//LIN协议
	if(huart == &huart1)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_RxCpltCallback+0x50>)
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d102      	bne.n	8000aa6 <HAL_UART_RxCpltCallback+0x16>
	{
		LIN_Data_Process();
 8000aa0:	f7ff fe7a 	bl	8000798 <LIN_Data_Process>
 8000aa4:	e014      	b.n	8000ad0 <HAL_UART_RxCpltCallback+0x40>
	}
	//RS232协议
	else if(huart == &huart2)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_UART_RxCpltCallback+0x54>)
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d110      	bne.n	8000ad0 <HAL_UART_RxCpltCallback+0x40>
	{
		HAL_UART_Transmit(&huart2, pRS232RxBuff, RS232_MAXSIZE, HAL_MAX_DELAY);
 8000aae:	2301      	movs	r3, #1
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <HAL_UART_RxCpltCallback+0x58>)
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <HAL_UART_RxCpltCallback+0x54>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	f001 fcfc 	bl	80024b4 <HAL_UART_Transmit>
		RS232_To_LIN(pRS232RxBuff);
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_UART_RxCpltCallback+0x58>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fda6 	bl	8000610 <RS232_To_LIN>
		memset(pRS232RxBuff,0,RS232_MAXSIZE);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_UART_RxCpltCallback+0x58>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f003 fc44 	bl	8004358 <memset>
	}
	Util_Receive_IT(huart);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff ffae 	bl	8000a34 <Util_Receive_IT>
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	200000e0 	.word	0x200000e0
 8000ae8:	20000048 	.word	0x20000048

08000aec <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	//解决串口溢出，导致不断进入串口中断函数，使MCU过载的问题
	if(HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 f931 	bl	8002d5e <HAL_UART_GetError>
 8000afc:	0003      	movs	r3, r0
 8000afe:	2208      	movs	r2, #8
 8000b00:	4013      	ands	r3, r2
 8000b02:	d017      	beq.n	8000b34 <HAL_UART_ErrorCallback+0x48>
	{
		//清除ORE标志位
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2108      	movs	r1, #8
 8000b10:	430a      	orrs	r2, r1
 8000b12:	619a      	str	r2, [r3, #24]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2110      	movs	r1, #16
 8000b20:	430a      	orrs	r2, r1
 8000b22:	619a      	str	r2, [r3, #24]
		Util_Receive_IT(huart);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff84 	bl	8000a34 <Util_Receive_IT>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2290      	movs	r2, #144	; 0x90
 8000b30:	2100      	movs	r1, #0
 8000b32:	5099      	str	r1, [r3, r2]
	}
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0549      	lsls	r1, r1, #21
 8000b70:	430a      	orrs	r2, r1
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	055b      	lsls	r3, r3, #21
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b82:	23c0      	movs	r3, #192	; 0xc0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fa66 	bl	8001058 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 fa0c 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <USART1_IRQHandler+0x14>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fd64 	bl	800269c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	2000004c 	.word	0x2000004c

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <USART2_IRQHandler+0x14>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fd58 	bl	800269c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	200000e0 	.word	0x200000e0

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <MX_USART1_UART_Init+0x98>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c10:	2296      	movs	r2, #150	; 0x96
 8000c12:	01d2      	lsls	r2, r2, #7
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 fbb5 	bl	80023c0 <HAL_LIN_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c5a:	f7ff ff6f 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f003 fa74 	bl	8004150 <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c6c:	f7ff ff66 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 faab 	bl	80041d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f7ff ff5d 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f003 fa29 	bl	80040dc <HAL_UARTEx_DisableFifoMode>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c8e:	f7ff ff55 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000004c 	.word	0x2000004c
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <MX_USART2_UART_Init+0x98>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cac:	22e1      	movs	r2, #225	; 0xe1
 8000cae:	0252      	lsls	r2, r2, #9
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fb12 	bl	8002314 <HAL_UART_Init>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f7ff ff22 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f003 fa27 	bl	8004150 <HAL_UARTEx_SetTxFifoThreshold>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f7ff ff19 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f003 fa5e 	bl	80041d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f7ff ff10 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f003 f9dc 	bl	80040dc <HAL_UARTEx_DisableFifoMode>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f7ff ff08 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000e0 	.word	0x200000e0
 8000d38:	40004400 	.word	0x40004400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b093      	sub	sp, #76	; 0x4c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2334      	movs	r3, #52	; 0x34
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f003 fb02 	bl	8004358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	2418      	movs	r4, #24
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f003 fafa 	bl	8004358 <memset>
  if(uartHandle->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_UART_MspInit+0x164>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d146      	bne.n	8000dfc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 f995 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff fed9 	bl	8000b3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	01c9      	lsls	r1, r1, #7
 8000d94:	430a      	orrs	r2, r1
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	01db      	lsls	r3, r3, #7
 8000da0:	4013      	ands	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000dac:	2104      	movs	r1, #4
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	2204      	movs	r2, #4
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dbe:	2134      	movs	r1, #52	; 0x34
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2201      	movs	r2, #1
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f000 faf7 	bl	80013d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	201b      	movs	r0, #27
 8000df0:	f000 f9f4 	bl	80011dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df4:	201b      	movs	r0, #27
 8000df6:	f000 fa06 	bl	8001206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dfa:	e04c      	b.n	8000e96 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d147      	bne.n	8000e96 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e06:	2118      	movs	r1, #24
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 f948 	bl	80020ac <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000e20:	f7ff fe8c 	bl	8000b3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	0289      	lsls	r1, r1, #10
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e58:	2134      	movs	r1, #52	; 0x34
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2201      	movs	r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 faa9 	bl	80013d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201c      	movs	r0, #28
 8000e8c:	f000 f9a6 	bl	80011dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e90:	201c      	movs	r0, #28
 8000e92:	f000 f9b8 	bl	8001206 <HAL_NVIC_EnableIRQ>
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b013      	add	sp, #76	; 0x4c
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	50000800 	.word	0x50000800
 8000eac:	40004400 	.word	0x40004400

08000eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb4:	f7ff fea0 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ede:	f003 fa17 	bl	8004310 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ee2:	f7ff fd43 	bl	800096c <main>

08000ee6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   r0, =_estack
 8000ee8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ef4:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8000ef8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000efc:	20000178 	.word	0x20000178

08000f00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x3c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Init+0x3c>)
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0049      	lsls	r1, r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f810 	bl	8000f44 <HAL_InitTick>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe0a 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_InitTick+0x88>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d02b      	beq.n	8000fb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_InitTick+0x8c>)
 8000f5e:	681c      	ldr	r4, [r3, #0]
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_InitTick+0x88>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	0019      	movs	r1, r3
 8000f66:	23fa      	movs	r3, #250	; 0xfa
 8000f68:	0098      	lsls	r0, r3, #2
 8000f6a:	f7ff f8c9 	bl	8000100 <__udivsi3>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	0019      	movs	r1, r3
 8000f72:	0020      	movs	r0, r4
 8000f74:	f7ff f8c4 	bl	8000100 <__udivsi3>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 f953 	bl	8001226 <HAL_SYSTICK_Config>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d112      	bne.n	8000faa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d80a      	bhi.n	8000fa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f922 	bl	80011dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_InitTick+0x90>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00d      	b.n	8000fbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e008      	b.n	8000fbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e003      	b.n	8000fbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000174 	.word	0x20000174

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20000174 	.word	0x20000174

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff fff0 	bl	8000ffc <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	189b      	adds	r3, r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	f7ff ffe0 	bl	8000ffc <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	2000000c 	.word	0x2000000c

08001058 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001066:	4013      	ands	r3, r2
 8001068:	0019      	movs	r1, r3
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40010000 	.word	0x40010000
 8001080:	fffff9ff 	.word	0xfffff9ff

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b7f      	cmp	r3, #127	; 0x7f
 8001096:	d809      	bhi.n	80010ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	001a      	movs	r2, r3
 800109e:	231f      	movs	r3, #31
 80010a0:	401a      	ands	r2, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_EnableIRQ+0x30>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	4091      	lsls	r1, r2
 80010a8:	000a      	movs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b7f      	cmp	r3, #127	; 0x7f
 80010cc:	d828      	bhi.n	8001120 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <__NVIC_SetPriority+0xd4>)
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	589b      	ldr	r3, [r3, r2]
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	0011      	movs	r1, r2
 80010e4:	2203      	movs	r2, #3
 80010e6:	400a      	ands	r2, r1
 80010e8:	00d2      	lsls	r2, r2, #3
 80010ea:	21ff      	movs	r1, #255	; 0xff
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	22ff      	movs	r2, #255	; 0xff
 80010fc:	401a      	ands	r2, r3
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	2303      	movs	r3, #3
 8001106:	4003      	ands	r3, r0
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110c:	481f      	ldr	r0, [pc, #124]	; (800118c <__NVIC_SetPriority+0xd4>)
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b25b      	sxtb	r3, r3
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	430a      	orrs	r2, r1
 8001118:	33c0      	adds	r3, #192	; 0xc0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800111e:	e031      	b.n	8001184 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <__NVIC_SetPriority+0xd8>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0019      	movs	r1, r3
 8001128:	230f      	movs	r3, #15
 800112a:	400b      	ands	r3, r1
 800112c:	3b08      	subs	r3, #8
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3306      	adds	r3, #6
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3304      	adds	r3, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1dfa      	adds	r2, r7, #7
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	0011      	movs	r1, r2
 8001140:	2203      	movs	r2, #3
 8001142:	400a      	ands	r2, r1
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	401a      	ands	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	2303      	movs	r3, #3
 8001162:	4003      	ands	r3, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <__NVIC_SetPriority+0xd8>)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	001c      	movs	r4, r3
 8001170:	230f      	movs	r3, #15
 8001172:	4023      	ands	r3, r4
 8001174:	3b08      	subs	r3, #8
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	430a      	orrs	r2, r1
 800117a:	3306      	adds	r3, #6
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	18c3      	adds	r3, r0, r3
 8001180:	3304      	adds	r3, #4
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b003      	add	sp, #12
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	045b      	lsls	r3, r3, #17
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d301      	bcc.n	80011ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a8:	2301      	movs	r3, #1
 80011aa:	e010      	b.n	80011ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <SysTick_Config+0x44>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	3a01      	subs	r2, #1
 80011b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b4:	2301      	movs	r3, #1
 80011b6:	425b      	negs	r3, r3
 80011b8:	2103      	movs	r1, #3
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff7c 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x44>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x44>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	210f      	movs	r1, #15
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b004      	add	sp, #16
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	0002      	movs	r2, r0
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ff33 	bl	8001084 <__NVIC_EnableIRQ>
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ffaf 	bl	8001194 <SysTick_Config>
 8001236:	0003      	movs	r3, r0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e050      	b.n	80012f4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2225      	movs	r2, #37	; 0x25
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d008      	beq.n	8001270 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e041      	b.n	80012f4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	210e      	movs	r1, #14
 800127c:	438a      	bics	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	491c      	ldr	r1, [pc, #112]	; (80012fc <HAL_DMA_Abort+0xbc>)
 800128c:	400a      	ands	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_DMA_Abort+0xc0>)
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	221c      	movs	r2, #28
 80012aa:	4013      	ands	r3, r2
 80012ac:	2201      	movs	r2, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_DMA_Abort+0xc0>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	490a      	ldr	r1, [pc, #40]	; (80012fc <HAL_DMA_Abort+0xbc>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80012e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2225      	movs	r2, #37	; 0x25
 80012e6:	2101      	movs	r1, #1
 80012e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2224      	movs	r2, #36	; 0x24
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	fffffeff 	.word	0xfffffeff
 8001300:	40020000 	.word	0x40020000

08001304 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130c:	210f      	movs	r1, #15
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2225      	movs	r2, #37	; 0x25
 8001318:	5c9b      	ldrb	r3, [r3, r2]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d006      	beq.n	800132e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2204      	movs	r2, #4
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e049      	b.n	80013c2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	210e      	movs	r1, #14
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	438a      	bics	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	491d      	ldr	r1, [pc, #116]	; (80013d0 <HAL_DMA_Abort_IT+0xcc>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_DMA_Abort_IT+0xd0>)
 8001360:	6859      	ldr	r1, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	221c      	movs	r2, #28
 8001368:	4013      	ands	r3, r2
 800136a:	2201      	movs	r2, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_DMA_Abort_IT+0xd0>)
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800137c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00c      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001390:	490f      	ldr	r1, [pc, #60]	; (80013d0 <HAL_DMA_Abort_IT+0xcc>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800139e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2225      	movs	r2, #37	; 0x25
 80013a4:	2101      	movs	r1, #1
 80013a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	0010      	movs	r0, r2
 80013c0:	4798      	blx	r3
    }
  }
  return status;
 80013c2:	230f      	movs	r3, #15
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b004      	add	sp, #16
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	fffffeff 	.word	0xfffffeff
 80013d4:	40020000 	.word	0x40020000

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e147      	b.n	8001678 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4091      	lsls	r1, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <HAL_GPIO_Init+0x28>
 80013fe:	e138      	b.n	8001672 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	4013      	ands	r3, r2
 8001408:	2b01      	cmp	r3, #1
 800140a:	d005      	beq.n	8001418 <HAL_GPIO_Init+0x40>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	409a      	lsls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	2201      	movs	r2, #1
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b03      	cmp	r3, #3
 8001484:	d017      	beq.n	80014b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d123      	bne.n	800150a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	58d3      	ldr	r3, [r2, r3]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2207      	movs	r2, #7
 80014d4:	4013      	ands	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2107      	movs	r1, #7
 80014ee:	400b      	ands	r3, r1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	029b      	lsls	r3, r3, #10
 8001546:	4013      	ands	r3, r2
 8001548:	d100      	bne.n	800154c <HAL_GPIO_Init+0x174>
 800154a:	e092      	b.n	8001672 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3318      	adds	r3, #24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	589b      	ldr	r3, [r3, r2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	220f      	movs	r2, #15
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	23a0      	movs	r3, #160	; 0xa0
 8001574:	05db      	lsls	r3, r3, #23
 8001576:	429a      	cmp	r2, r3
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x1ca>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x2bc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x1c6>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a44      	ldr	r2, [pc, #272]	; (8001698 <HAL_GPIO_Init+0x2c0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x1c2>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a43      	ldr	r2, [pc, #268]	; (800169c <HAL_GPIO_Init+0x2c4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x1be>
 8001592:	2303      	movs	r3, #3
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x1cc>
 8001596:	2305      	movs	r3, #5
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x1cc>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x1cc>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x1cc>
 80015a2:	2300      	movs	r3, #0
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	2103      	movs	r1, #3
 80015a8:	400a      	ands	r2, r1
 80015aa:	00d2      	lsls	r2, r2, #3
 80015ac:	4093      	lsls	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015b4:	4936      	ldr	r1, [pc, #216]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3318      	adds	r3, #24
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	035b      	lsls	r3, r3, #13
 80015da:	4013      	ands	r3, r2
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	039b      	lsls	r3, r3, #14
 8001604:	4013      	ands	r3, r2
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001616:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 8001618:	2384      	movs	r3, #132	; 0x84
 800161a:	58d3      	ldr	r3, [r2, r3]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43da      	mvns	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 800163e:	2284      	movs	r2, #132	; 0x84
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	58d3      	ldr	r3, [r2, r3]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	4013      	ands	r3, r2
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166a:	4909      	ldr	r1, [pc, #36]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	40da      	lsrs	r2, r3
 8001680:	1e13      	subs	r3, r2, #0
 8001682:	d000      	beq.n	8001686 <HAL_GPIO_Init+0x2ae>
 8001684:	e6b0      	b.n	80013e8 <HAL_GPIO_Init+0x10>
  }
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b006      	add	sp, #24
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021800 	.word	0x40021800
 8001694:	50000400 	.word	0x50000400
 8001698:	50000800 	.word	0x50000800
 800169c:	50000c00 	.word	0x50000c00

080016a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d11f      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	0013      	movs	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	189b      	adds	r3, r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4912      	ldr	r1, [pc, #72]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7fe fd14 	bl	8000100 <__udivsi3>
 80016d8:	0003      	movs	r3, r0
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016de:	e008      	b.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e001      	b.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e009      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	401a      	ands	r2, r3
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	429a      	cmp	r2, r3
 8001702:	d0ed      	beq.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40007000 	.word	0x40007000
 8001714:	fffff9ff 	.word	0xfffff9ff
 8001718:	20000004 	.word	0x20000004
 800171c:	000f4240 	.word	0x000f4240

08001720 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	23e0      	movs	r3, #224	; 0xe0
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4013      	ands	r3, r2
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e2f3      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x1e>
 8001754:	e07c      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4bc3      	ldr	r3, [pc, #780]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2238      	movs	r2, #56	; 0x38
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4bc0      	ldr	r3, [pc, #768]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b10      	cmp	r3, #16
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0x3e>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d002      	beq.n	800177c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4bb9      	ldr	r3, [pc, #740]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d062      	beq.n	800184e <HAL_RCC_OscConfig+0x116>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d15e      	bne.n	800184e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e2ce      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x78>
 80017a0:	4bb0      	ldr	r3, [pc, #704]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0249      	lsls	r1, r1, #9
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e020      	b.n	80017f2 <HAL_RCC_OscConfig+0xba>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	23a0      	movs	r3, #160	; 0xa0
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d10e      	bne.n	80017da <HAL_RCC_OscConfig+0xa2>
 80017bc:	4ba9      	ldr	r3, [pc, #676]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba8      	ldr	r3, [pc, #672]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	02c9      	lsls	r1, r1, #11
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4ba5      	ldr	r3, [pc, #660]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0249      	lsls	r1, r1, #9
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0xba>
 80017da:	4ba2      	ldr	r3, [pc, #648]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4ba1      	ldr	r3, [pc, #644]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	49a1      	ldr	r1, [pc, #644]	; (8001a68 <HAL_RCC_OscConfig+0x330>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	4b9f      	ldr	r3, [pc, #636]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b9e      	ldr	r3, [pc, #632]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	499f      	ldr	r1, [pc, #636]	; (8001a6c <HAL_RCC_OscConfig+0x334>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d014      	beq.n	8001824 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fbff 	bl	8000ffc <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fbfa 	bl	8000ffc <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e28d      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	029b      	lsls	r3, r3, #10
 800181e:	4013      	ands	r3, r2
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xcc>
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fbea 	bl	8000ffc <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff fbe5 	bl	8000ffc <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e278      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0xf6>
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d100      	bne.n	800185c <HAL_RCC_OscConfig+0x124>
 800185a:	e099      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	; 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d102      	bne.n	800187c <HAL_RCC_OscConfig+0x144>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d002      	beq.n	8001882 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d135      	bne.n	80018ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4013      	ands	r3, r2
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x162>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e24b      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018b6:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 80018bc:	4013      	ands	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0adb      	lsrs	r3, r3, #11
 80018d0:	2207      	movs	r2, #7
 80018d2:	4013      	ands	r3, r2
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x340>)
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 80018da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x348>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff fb2f 	bl	8000f44 <HAL_InitTick>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d051      	beq.n	800198e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e221      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0049      	lsls	r1, r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fb70 	bl	8000ffc <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fb6b 	bl	8000ffc <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1fe      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	021a      	lsls	r2, r3, #8
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	e01b      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800195e:	4949      	ldr	r1, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x34c>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fb4a 	bl	8000ffc <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fb45 	bl	8000ffc <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1d8      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4013      	ands	r3, r2
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x236>
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2208      	movs	r2, #8
 8001996:	4013      	ands	r3, r2
 8001998:	d047      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2238      	movs	r2, #56	; 0x38
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b18      	cmp	r3, #24
 80019a4:	d10a      	bne.n	80019bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d138      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e1ba      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb14 	bl	8000ffc <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fb0f 	bl	8000ffc <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1a2      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	2202      	movs	r2, #2
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0f1      	beq.n	80019da <HAL_RCC_OscConfig+0x2a2>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fafa 	bl	8000ffc <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff faf5 	bl	8000ffc <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e188      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2fe>
 8001a34:	e0c6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	231f      	movs	r3, #31
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	; 0x38
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d11e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d100      	bne.n	8001a56 <HAL_RCC_OscConfig+0x31e>
 8001a54:	e0b6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d000      	beq.n	8001a60 <HAL_RCC_OscConfig+0x328>
 8001a5e:	e0b1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e166      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	fffbffff 	.word	0xfffbffff
 8001a70:	ffff80ff 	.word	0xffff80ff
 8001a74:	ffffc7ff 	.word	0xffffc7ff
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20000008 	.word	0x20000008
 8001a84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a88:	4bac      	ldr	r3, [pc, #688]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x360>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x362>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d011      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4ba7      	ldr	r3, [pc, #668]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa2:	4ba6      	ldr	r3, [pc, #664]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0549      	lsls	r1, r1, #21
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aac:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	055b      	lsls	r3, r3, #21
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001aba:	231f      	movs	r3, #31
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac2:	4b9f      	ldr	r3, [pc, #636]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ace:	4b9c      	ldr	r3, [pc, #624]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b9b      	ldr	r3, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	0049      	lsls	r1, r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa8e 	bl	8000ffc <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fa89 	bl	8000ffc <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e11c      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af8:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <HAL_RCC_OscConfig+0x608>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3e2>
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b10:	4b8a      	ldr	r3, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x41c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x404>
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b28:	2104      	movs	r1, #4
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x41c>
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b40:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b48:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b4c:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	438a      	bics	r2, r1
 8001b52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa4e 	bl	8000ffc <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fa49 	bl	8000ffc <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a74      	ldr	r2, [pc, #464]	; (8001d44 <HAL_RCC_OscConfig+0x60c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0db      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x42e>
 8001b84:	e013      	b.n	8001bae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fa39 	bl	8000ffc <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fa34 	bl	8000ffc <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x60c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c6      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bae:	231f      	movs	r3, #31
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b60      	ldr	r3, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bbe:	4962      	ldr	r1, [pc, #392]	; (8001d48 <HAL_RCC_OscConfig+0x610>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x496>
 8001bcc:	e0b0      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d100      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4a4>
 8001bda:	e078      	b.n	8001cce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d153      	bne.n	8001c8c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001bea:	4958      	ldr	r1, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x614>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fa04 	bl	8000ffc <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f9ff 	bl	8000ffc <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e092      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	4013      	ands	r3, r2
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1a      	ldr	r2, [r3, #32]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0449      	lsls	r1, r1, #17
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	0549      	lsls	r1, r1, #21
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f9cb 	bl	8000ffc <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f9c6 	bl	8000ffc <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e059      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x534>
 8001c8a:	e051      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001c92:	492e      	ldr	r1, [pc, #184]	; (8001d4c <HAL_RCC_OscConfig+0x614>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9b0 	bl	8000ffc <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff f9ab 	bl	8000ffc <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e03e      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	049b      	lsls	r3, r3, #18
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cc6:	4923      	ldr	r1, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x61c>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	e030      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e02b      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_OscConfig+0x604>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11e      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2270      	movs	r2, #112	; 0x70
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d117      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	23fe      	movs	r3, #254	; 0xfe
 8001d00:	01db      	lsls	r3, r3, #7
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10e      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	23f8      	movs	r3, #248	; 0xf8
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0f5b      	lsrs	r3, r3, #29
 8001d22:	075a      	lsls	r2, r3, #29
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b008      	add	sp, #32
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	00001388 	.word	0x00001388
 8001d48:	efffffff 	.word	0xefffffff
 8001d4c:	feffffff 	.word	0xfeffffff
 8001d50:	1fc1808c 	.word	0x1fc1808c
 8001d54:	effefffc 	.word	0xeffefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e9      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2207      	movs	r2, #7
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d91e      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4393      	bics	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff f936 	bl	8000ffc <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7ff f931 	bl	8000ffc <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0ca      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d015      	beq.n	8001dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d006      	beq.n	8001dda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	21e0      	movs	r1, #224	; 0xe0
 8001dd4:	01c9      	lsls	r1, r1, #7
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d057      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d12b      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e097      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	049b      	lsls	r3, r3, #18
 8001e20:	4013      	ands	r3, r2
 8001e22:	d11f      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e08b      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d113      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e07f      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e074      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e06d      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e78:	f7ff f8c0 	bl	8000ffc <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7ff f8bb 	bl	8000ffc <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e054      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2238      	movs	r2, #56	; 0x38
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1ec      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2207      	movs	r2, #7
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d21e      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f898 	bl	8000ffc <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff f893 	bl	8000ffc <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e02c      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2207      	movs	r2, #7
 8001eec:	4013      	ands	r3, r2
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4013      	ands	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_RCC_ClockConfig+0x200>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	f000 f829 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f16:	0001      	movs	r1, r0
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	220f      	movs	r2, #15
 8001f20:	401a      	ands	r2, r3
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x204>)
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	58d3      	ldr	r3, [r2, r3]
 8001f28:	221f      	movs	r2, #31
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	40da      	lsrs	r2, r3
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x208>)
 8001f32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x20c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff f803 	bl	8000f44 <HAL_InitTick>
 8001f3e:	0003      	movs	r3, r0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b004      	add	sp, #16
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffff0ff 	.word	0xfffff0ff
 8001f58:	ffff8fff 	.word	0xffff8fff
 8001f5c:	08004380 	.word	0x08004380
 8001f60:	20000004 	.word	0x20000004
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2238      	movs	r2, #56	; 0x38
 8001f74:	4013      	ands	r3, r2
 8001f76:	d10f      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0adb      	lsrs	r3, r3, #11
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	2201      	movs	r2, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4835      	ldr	r0, [pc, #212]	; (8002064 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8e:	f7fe f8b7 	bl	8000100 <__udivsi3>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e05d      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2238      	movs	r2, #56	; 0x38
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2238      	movs	r2, #56	; 0x38
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d138      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	4013      	ands	r3, r2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	4824      	ldr	r0, [pc, #144]	; (8002068 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd8:	f7fe f892 	bl	8000100 <__udivsi3>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	4013      	ands	r3, r2
 8001fea:	434b      	muls	r3, r1
 8001fec:	617b      	str	r3, [r7, #20]
        break;
 8001fee:	e00d      	b.n	800200c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	481c      	ldr	r0, [pc, #112]	; (8002064 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff4:	f7fe f884 	bl	8000100 <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	227f      	movs	r2, #127	; 0x7f
 8002004:	4013      	ands	r3, r2
 8002006:	434b      	muls	r3, r1
 8002008:	617b      	str	r3, [r7, #20]
        break;
 800200a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0f5b      	lsrs	r3, r3, #29
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	f7fe f86f 	bl	8000100 <__udivsi3>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e015      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	; 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	2b20      	cmp	r3, #32
 8002032:	d103      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2238      	movs	r2, #56	; 0x38
 8002042:	4013      	ands	r3, r2
 8002044:	2b18      	cmp	r3, #24
 8002046:	d103      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002048:	23fa      	movs	r3, #250	; 0xfa
 800204a:	01db      	lsls	r3, r3, #7
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e001      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002054:	693b      	ldr	r3, [r7, #16]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40021000 	.word	0x40021000
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b02      	ldr	r3, [pc, #8]	; (800207c <HAL_RCC_GetHCLKFreq+0x10>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002084:	f7ff fff2 	bl	800206c <HAL_RCC_GetHCLKFreq>
 8002088:	0004      	movs	r4, r0
 800208a:	f7ff fb49 	bl	8001720 <LL_RCC_GetAPB1Prescaler>
 800208e:	0003      	movs	r3, r0
 8002090:	0b1a      	lsrs	r2, r3, #12
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	58d3      	ldr	r3, [r2, r3]
 8002098:	221f      	movs	r2, #31
 800209a:	4013      	ands	r3, r2
 800209c:	40dc      	lsrs	r4, r3
 800209e:	0023      	movs	r3, r4
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdb0      	pop	{r4, r5, r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	080043c0 	.word	0x080043c0

080020ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020b4:	2313      	movs	r3, #19
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020bc:	2312      	movs	r3, #18
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020d0:	e0a3      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2011      	movs	r0, #17
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	4013      	ands	r3, r2
 80020e4:	d110      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0549      	lsls	r1, r1, #21
 80020f0:	430a      	orrs	r2, r1
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	183b      	adds	r3, r7, r0
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002108:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002116:	f7fe ff71 	bl	8000ffc <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211e:	e00b      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe ff6c 	bl	8000ffc <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d904      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800212e:	2313      	movs	r3, #19
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2203      	movs	r2, #3
 8002134:	701a      	strb	r2, [r3, #0]
        break;
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002138:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0ed      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002144:	2313      	movs	r3, #19
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d154      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214e:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4013      	ands	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	429a      	cmp	r2, r3
 8002168:	d014      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	4a63      	ldr	r2, [pc, #396]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	430a      	orrs	r2, r1
 8002180:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002188:	495d      	ldr	r1, [pc, #372]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800218a:	400a      	ands	r2, r1
 800218c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d016      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ff2e 	bl	8000ffc <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a4:	e00c      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe ff29 	bl	8000ffc <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a54      	ldr	r2, [pc, #336]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d904      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021b6:	2313      	movs	r3, #19
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2203      	movs	r2, #3
 80021bc:	701a      	strb	r2, [r3, #0]
            break;
 80021be:	e004      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0ed      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021ca:	2313      	movs	r3, #19
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e8:	e00c      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ea:	2312      	movs	r3, #18
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2213      	movs	r2, #19
 80021f0:	18ba      	adds	r2, r7, r2
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e005      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f8:	2312      	movs	r3, #18
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2213      	movs	r2, #19
 80021fe:	18ba      	adds	r2, r7, r2
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002204:	2311      	movs	r3, #17
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002214:	493c      	ldr	r1, [pc, #240]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002216:	400a      	ands	r2, r1
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	2203      	movs	r2, #3
 800222a:	4393      	bics	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	220c      	movs	r2, #12
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2220      	movs	r2, #32
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002270:	430a      	orrs	r2, r1
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	4013      	ands	r3, r2
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	0899      	lsrs	r1, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800228e:	430a      	orrs	r2, r1
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	429a      	cmp	r2, r3
 800229c:	d106      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0249      	lsls	r1, r1, #9
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	d016      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0249      	lsls	r1, r1, #9
 80022e2:	430a      	orrs	r2, r1
 80022e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022e6:	2312      	movs	r3, #18
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	781b      	ldrb	r3, [r3, #0]
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b006      	add	sp, #24
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	fffffcff 	.word	0xfffffcff
 8002300:	fffeffff 	.word	0xfffeffff
 8002304:	00001388 	.word	0x00001388
 8002308:	efffffff 	.word	0xefffffff
 800230c:	ffffcfff 	.word	0xffffcfff
 8002310:	ffff3fff 	.word	0xffff3fff

08002314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e046      	b.n	80023b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2288      	movs	r2, #136	; 0x88
 800232a:	589b      	ldr	r3, [r3, r2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2284      	movs	r2, #132	; 0x84
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f7fe fcfe 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2288      	movs	r2, #136	; 0x88
 8002344:	2124      	movs	r1, #36	; 0x24
 8002346:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 fd0a 	bl	8002d74 <UART_SetConfig>
 8002360:	0003      	movs	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e024      	b.n	80023b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fea1 	bl	80030bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	490d      	ldr	r1, [pc, #52]	; (80023bc <HAL_UART_Init+0xa8>)
 8002386:	400a      	ands	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	212a      	movs	r1, #42	; 0x2a
 8002396:	438a      	bics	r2, r1
 8002398:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 ff39 	bl	8003224 <UART_CheckIdleState>
 80023b2:	0003      	movs	r3, r0
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffffb7ff 	.word	0xffffb7ff

080023c0 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e068      	b.n	80024a6 <HAL_LIN_Init+0xe6>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	429a      	cmp	r2, r3
 80023de:	d101      	bne.n	80023e4 <HAL_LIN_Init+0x24>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e060      	b.n	80024a6 <HAL_LIN_Init+0xe6>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_LIN_Init+0x30>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e05a      	b.n	80024a6 <HAL_LIN_Init+0xe6>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2288      	movs	r2, #136	; 0x88
 80023f4:	589b      	ldr	r3, [r3, r2]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_LIN_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2284      	movs	r2, #132	; 0x84
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f7fe fc99 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2288      	movs	r2, #136	; 0x88
 800240e:	2124      	movs	r1, #36	; 0x24
 8002410:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	438a      	bics	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fca5 	bl	8002d74 <UART_SetConfig>
 800242a:	0003      	movs	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_LIN_Init+0x74>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e038      	b.n	80024a6 <HAL_LIN_Init+0xe6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_LIN_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0018      	movs	r0, r3
 8002440:	f000 fe3c 	bl	80030bc <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4918      	ldr	r1, [pc, #96]	; (80024b0 <HAL_LIN_Init+0xf0>)
 8002450:	400a      	ands	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	212a      	movs	r1, #42	; 0x2a
 8002460:	438a      	bics	r2, r1
 8002462:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	01c9      	lsls	r1, r1, #7
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	4393      	bics	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fec0 	bl	8003224 <UART_CheckIdleState>
 80024a4:	0003      	movs	r3, r0
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	fffff7ff 	.word	0xfffff7ff

080024b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2288      	movs	r2, #136	; 0x88
 80024c8:	589b      	ldr	r3, [r3, r2]
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d000      	beq.n	80024d0 <HAL_UART_Transmit+0x1c>
 80024ce:	e088      	b.n	80025e2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_UART_Transmit+0x2a>
 80024d6:	1dbb      	adds	r3, r7, #6
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e080      	b.n	80025e4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	015b      	lsls	r3, r3, #5
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d109      	bne.n	8002502 <HAL_UART_Transmit+0x4e>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	d001      	beq.n	8002502 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e070      	b.n	80025e4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2290      	movs	r2, #144	; 0x90
 8002506:	2100      	movs	r1, #0
 8002508:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2288      	movs	r2, #136	; 0x88
 800250e:	2121      	movs	r1, #33	; 0x21
 8002510:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002512:	f7fe fd73 	bl	8000ffc <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1dba      	adds	r2, r7, #6
 800251e:	2154      	movs	r1, #84	; 0x54
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1dba      	adds	r2, r7, #6
 8002528:	2156      	movs	r1, #86	; 0x56
 800252a:	8812      	ldrh	r2, [r2, #0]
 800252c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	015b      	lsls	r3, r3, #5
 8002536:	429a      	cmp	r2, r3
 8002538:	d108      	bne.n	800254c <HAL_UART_Transmit+0x98>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e003      	b.n	8002554 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002554:	e02c      	b.n	80025b0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	0013      	movs	r3, r2
 8002560:	2200      	movs	r2, #0
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	f000 feac 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e039      	b.n	80025e4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	001a      	movs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	05d2      	lsls	r2, r2, #23
 8002582:	0dd2      	lsrs	r2, r2, #23
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3302      	adds	r3, #2
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	e007      	b.n	800259e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2256      	movs	r2, #86	; 0x56
 80025a2:	5a9b      	ldrh	r3, [r3, r2]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b299      	uxth	r1, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2256      	movs	r2, #86	; 0x56
 80025ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2256      	movs	r2, #86	; 0x56
 80025b4:	5a9b      	ldrh	r3, [r3, r2]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1cc      	bne.n	8002556 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	0013      	movs	r3, r2
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	f000 fe79 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e006      	b.n	80025e4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2288      	movs	r2, #136	; 0x88
 80025da:	2120      	movs	r1, #32
 80025dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b008      	add	sp, #32
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	228c      	movs	r2, #140	; 0x8c
 80025fe:	589b      	ldr	r3, [r3, r2]
 8002600:	2b20      	cmp	r3, #32
 8002602:	d145      	bne.n	8002690 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_Receive_IT+0x26>
 800260a:	1dbb      	adds	r3, r7, #6
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e03d      	b.n	8002692 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	015b      	lsls	r3, r3, #5
 800261e:	429a      	cmp	r2, r3
 8002620:	d109      	bne.n	8002636 <HAL_UART_Receive_IT+0x4a>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2201      	movs	r2, #1
 800262e:	4013      	ands	r3, r2
 8002630:	d001      	beq.n	8002636 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e02d      	b.n	8002692 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264a:	f3ef 8310 	mrs	r3, PRIMASK
 800264e:	613b      	str	r3, [r7, #16]
  return(result);
 8002650:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f383 8810 	msr	PRIMASK, r3
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	04c9      	lsls	r1, r1, #19
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800267e:	1dbb      	adds	r3, r7, #6
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fee2 	bl	8003450 <UART_Start_Receive_IT>
 800268c:	0003      	movs	r3, r0
 800268e:	e000      	b.n	8002692 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b008      	add	sp, #32
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b0aa      	sub	sp, #168	; 0xa8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	22a4      	movs	r2, #164	; 0xa4
 80026ac:	18b9      	adds	r1, r7, r2
 80026ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	20a0      	movs	r0, #160	; 0xa0
 80026b8:	1839      	adds	r1, r7, r0
 80026ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	249c      	movs	r4, #156	; 0x9c
 80026c4:	1939      	adds	r1, r7, r4
 80026c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026c8:	0011      	movs	r1, r2
 80026ca:	18bb      	adds	r3, r7, r2
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4aa2      	ldr	r2, [pc, #648]	; (8002958 <HAL_UART_IRQHandler+0x2bc>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	2298      	movs	r2, #152	; 0x98
 80026d4:	18bd      	adds	r5, r7, r2
 80026d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80026d8:	18bb      	adds	r3, r7, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11a      	bne.n	8002716 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2220      	movs	r2, #32
 80026e6:	4013      	ands	r3, r2
 80026e8:	d015      	beq.n	8002716 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	4013      	ands	r3, r2
 80026f2:	d105      	bne.n	8002700 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	4013      	ands	r3, r2
 80026fe:	d00a      	beq.n	8002716 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	2b00      	cmp	r3, #0
 8002706:	d100      	bne.n	800270a <HAL_UART_IRQHandler+0x6e>
 8002708:	e2dc      	b.n	8002cc4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	0010      	movs	r0, r2
 8002712:	4798      	blx	r3
      }
      return;
 8002714:	e2d6      	b.n	8002cc4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002716:	2398      	movs	r3, #152	; 0x98
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d100      	bne.n	8002722 <HAL_UART_IRQHandler+0x86>
 8002720:	e122      	b.n	8002968 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002722:	239c      	movs	r3, #156	; 0x9c
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a8c      	ldr	r2, [pc, #560]	; (800295c <HAL_UART_IRQHandler+0x2c0>)
 800272a:	4013      	ands	r3, r2
 800272c:	d106      	bne.n	800273c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800272e:	23a0      	movs	r3, #160	; 0xa0
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <HAL_UART_IRQHandler+0x2c4>)
 8002736:	4013      	ands	r3, r2
 8002738:	d100      	bne.n	800273c <HAL_UART_IRQHandler+0xa0>
 800273a:	e115      	b.n	8002968 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800273c:	23a4      	movs	r3, #164	; 0xa4
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	d012      	beq.n	800276e <HAL_UART_IRQHandler+0xd2>
 8002748:	23a0      	movs	r3, #160	; 0xa0
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2290      	movs	r2, #144	; 0x90
 8002762:	589b      	ldr	r3, [r3, r2]
 8002764:	2201      	movs	r2, #1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2190      	movs	r1, #144	; 0x90
 800276c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800276e:	23a4      	movs	r3, #164	; 0xa4
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2202      	movs	r2, #2
 8002776:	4013      	ands	r3, r2
 8002778:	d011      	beq.n	800279e <HAL_UART_IRQHandler+0x102>
 800277a:	239c      	movs	r3, #156	; 0x9c
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d00b      	beq.n	800279e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2290      	movs	r2, #144	; 0x90
 8002792:	589b      	ldr	r3, [r3, r2]
 8002794:	2204      	movs	r2, #4
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2190      	movs	r1, #144	; 0x90
 800279c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800279e:	23a4      	movs	r3, #164	; 0xa4
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2204      	movs	r2, #4
 80027a6:	4013      	ands	r3, r2
 80027a8:	d011      	beq.n	80027ce <HAL_UART_IRQHandler+0x132>
 80027aa:	239c      	movs	r3, #156	; 0x9c
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00b      	beq.n	80027ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2290      	movs	r2, #144	; 0x90
 80027c2:	589b      	ldr	r3, [r3, r2]
 80027c4:	2202      	movs	r2, #2
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2190      	movs	r1, #144	; 0x90
 80027cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027ce:	23a4      	movs	r3, #164	; 0xa4
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2208      	movs	r2, #8
 80027d6:	4013      	ands	r3, r2
 80027d8:	d017      	beq.n	800280a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027da:	23a0      	movs	r3, #160	; 0xa0
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	4013      	ands	r3, r2
 80027e4:	d105      	bne.n	80027f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027e6:	239c      	movs	r3, #156	; 0x9c
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5b      	ldr	r2, [pc, #364]	; (800295c <HAL_UART_IRQHandler+0x2c0>)
 80027ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2208      	movs	r2, #8
 80027f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2290      	movs	r2, #144	; 0x90
 80027fe:	589b      	ldr	r3, [r3, r2]
 8002800:	2208      	movs	r2, #8
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2190      	movs	r1, #144	; 0x90
 8002808:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800280a:	23a4      	movs	r3, #164	; 0xa4
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_UART_IRQHandler+0x1a4>
 8002818:	23a0      	movs	r3, #160	; 0xa0
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	04db      	lsls	r3, r3, #19
 8002822:	4013      	ands	r3, r2
 8002824:	d00c      	beq.n	8002840 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2290      	movs	r2, #144	; 0x90
 8002834:	589b      	ldr	r3, [r3, r2]
 8002836:	2220      	movs	r2, #32
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2190      	movs	r1, #144	; 0x90
 800283e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2290      	movs	r2, #144	; 0x90
 8002844:	589b      	ldr	r3, [r3, r2]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d100      	bne.n	800284c <HAL_UART_IRQHandler+0x1b0>
 800284a:	e23d      	b.n	8002cc8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800284c:	23a4      	movs	r3, #164	; 0xa4
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2220      	movs	r2, #32
 8002854:	4013      	ands	r3, r2
 8002856:	d015      	beq.n	8002884 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002858:	23a0      	movs	r3, #160	; 0xa0
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2220      	movs	r2, #32
 8002860:	4013      	ands	r3, r2
 8002862:	d106      	bne.n	8002872 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002864:	239c      	movs	r3, #156	; 0x9c
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	055b      	lsls	r3, r3, #21
 800286e:	4013      	ands	r3, r2
 8002870:	d008      	beq.n	8002884 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	0010      	movs	r0, r2
 8002882:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2290      	movs	r2, #144	; 0x90
 8002888:	589b      	ldr	r3, [r3, r2]
 800288a:	2194      	movs	r1, #148	; 0x94
 800288c:	187a      	adds	r2, r7, r1
 800288e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	4013      	ands	r3, r2
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d004      	beq.n	80028a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2228      	movs	r2, #40	; 0x28
 80028a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a6:	d04c      	beq.n	8002942 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fef4 	bl	8003698 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d13c      	bne.n	8002938 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80028c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	2090      	movs	r0, #144	; 0x90
 80028c8:	183a      	adds	r2, r7, r0
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d2:	f383 8810 	msr	PRIMASK, r3
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	438a      	bics	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	589b      	ldr	r3, [r3, r2]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	589b      	ldr	r3, [r3, r2]
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_UART_IRQHandler+0x2c8>)
 8002908:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	589b      	ldr	r3, [r3, r2]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe fcf7 	bl	8001304 <HAL_DMA_Abort_IT>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d01c      	beq.n	8002954 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	589b      	ldr	r3, [r3, r2]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	5852      	ldr	r2, [r2, r1]
 8002928:	0010      	movs	r0, r2
 800292a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	e012      	b.n	8002954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f7fe f8db 	bl	8000aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002936:	e00d      	b.n	8002954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f7fe f8d6 	bl	8000aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	e008      	b.n	8002954 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f7fe f8d1 	bl	8000aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2290      	movs	r2, #144	; 0x90
 800294e:	2100      	movs	r1, #0
 8002950:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002952:	e1b9      	b.n	8002cc8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	46c0      	nop			; (mov r8, r8)
    return;
 8002956:	e1b7      	b.n	8002cc8 <HAL_UART_IRQHandler+0x62c>
 8002958:	0000080f 	.word	0x0000080f
 800295c:	10000001 	.word	0x10000001
 8002960:	04000120 	.word	0x04000120
 8002964:	08003765 	.word	0x08003765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d000      	beq.n	8002972 <HAL_UART_IRQHandler+0x2d6>
 8002970:	e13e      	b.n	8002bf0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002972:	23a4      	movs	r3, #164	; 0xa4
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	4013      	ands	r3, r2
 800297c:	d100      	bne.n	8002980 <HAL_UART_IRQHandler+0x2e4>
 800297e:	e137      	b.n	8002bf0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002980:	23a0      	movs	r3, #160	; 0xa0
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2210      	movs	r2, #16
 8002988:	4013      	ands	r3, r2
 800298a:	d100      	bne.n	800298e <HAL_UART_IRQHandler+0x2f2>
 800298c:	e130      	b.n	8002bf0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	4013      	ands	r3, r2
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d000      	beq.n	80029a6 <HAL_UART_IRQHandler+0x30a>
 80029a4:	e0a4      	b.n	8002af0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	589b      	ldr	r3, [r3, r2]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	217e      	movs	r1, #126	; 0x7e
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_UART_IRQHandler+0x324>
 80029be:	e185      	b.n	8002ccc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	225c      	movs	r2, #92	; 0x5c
 80029c4:	5a9b      	ldrh	r3, [r3, r2]
 80029c6:	187a      	adds	r2, r7, r1
 80029c8:	8812      	ldrh	r2, [r2, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d300      	bcc.n	80029d0 <HAL_UART_IRQHandler+0x334>
 80029ce:	e17d      	b.n	8002ccc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	187a      	adds	r2, r7, r1
 80029d4:	215e      	movs	r1, #94	; 0x5e
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	589b      	ldr	r3, [r3, r2]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2220      	movs	r2, #32
 80029e6:	4013      	ands	r3, r2
 80029e8:	d170      	bne.n	8002acc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ea:	f3ef 8310 	mrs	r3, PRIMASK
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f4:	2301      	movs	r3, #1
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	f383 8810 	msr	PRIMASK, r3
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	49b4      	ldr	r1, [pc, #720]	; (8002cdc <HAL_UART_IRQHandler+0x640>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	677b      	str	r3, [r7, #116]	; 0x74
 8002a26:	2301      	movs	r3, #1
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	438a      	bics	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a56:	673b      	str	r3, [r7, #112]	; 0x70
 8002a58:	2301      	movs	r3, #1
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	438a      	bics	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a76:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	228c      	movs	r2, #140	; 0x8c
 8002a84:	2120      	movs	r1, #32
 8002a86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a98:	2301      	movs	r3, #1
 8002a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2110      	movs	r1, #16
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	589b      	ldr	r3, [r3, r2]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fe fbba 	bl	8001240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	225c      	movs	r2, #92	; 0x5c
 8002ad6:	5a9a      	ldrh	r2, [r3, r2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	215e      	movs	r1, #94	; 0x5e
 8002adc:	5a5b      	ldrh	r3, [r3, r1]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f905 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002aee:	e0ed      	b.n	8002ccc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	225c      	movs	r2, #92	; 0x5c
 8002af4:	5a99      	ldrh	r1, [r3, r2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	225e      	movs	r2, #94	; 0x5e
 8002afa:	5a9b      	ldrh	r3, [r3, r2]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	208e      	movs	r0, #142	; 0x8e
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	1a8a      	subs	r2, r1, r2
 8002b04:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	225e      	movs	r2, #94	; 0x5e
 8002b0a:	5a9b      	ldrh	r3, [r3, r2]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d100      	bne.n	8002b14 <HAL_UART_IRQHandler+0x478>
 8002b12:	e0dd      	b.n	8002cd0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002b14:	183b      	adds	r3, r7, r0
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <HAL_UART_IRQHandler+0x482>
 8002b1c:	e0d8      	b.n	8002cd0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b24:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b26:	2488      	movs	r4, #136	; 0x88
 8002b28:	193a      	adds	r2, r7, r4
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f383 8810 	msr	PRIMASK, r3
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4967      	ldr	r1, [pc, #412]	; (8002ce0 <HAL_UART_IRQHandler+0x644>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b5c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b5e:	2484      	movs	r4, #132	; 0x84
 8002b60:	193a      	adds	r2, r7, r4
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	2301      	movs	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	495a      	ldr	r1, [pc, #360]	; (8002ce4 <HAL_UART_IRQHandler+0x648>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f383 8810 	msr	PRIMASK, r3
}
 8002b8c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	228c      	movs	r2, #140	; 0x8c
 8002b92:	2120      	movs	r1, #32
 8002b94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	2480      	movs	r4, #128	; 0x80
 8002bac:	193a      	adds	r2, r7, r4
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	438a      	bics	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f885 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bee:	e06f      	b.n	8002cd0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bf0:	23a4      	movs	r3, #164	; 0xa4
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	035b      	lsls	r3, r3, #13
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d010      	beq.n	8002c20 <HAL_UART_IRQHandler+0x584>
 8002bfe:	239c      	movs	r3, #156	; 0x9c
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	03db      	lsls	r3, r3, #15
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0352      	lsls	r2, r2, #13
 8002c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f001 fa47 	bl	80040ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c1e:	e05a      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c20:	23a4      	movs	r3, #164	; 0xa4
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d016      	beq.n	8002c5a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	4013      	ands	r3, r2
 8002c36:	d106      	bne.n	8002c46 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c38:	239c      	movs	r3, #156	; 0x9c
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	4013      	ands	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d042      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	0010      	movs	r0, r2
 8002c56:	4798      	blx	r3
    }
    return;
 8002c58:	e03c      	b.n	8002cd4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c5a:	23a4      	movs	r3, #164	; 0xa4
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	4013      	ands	r3, r2
 8002c64:	d00a      	beq.n	8002c7c <HAL_UART_IRQHandler+0x5e0>
 8002c66:	23a0      	movs	r3, #160	; 0xa0
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fd8c 	bl	8003792 <UART_EndTransmit_IT>
    return;
 8002c7a:	e02c      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c7c:	23a4      	movs	r3, #164	; 0xa4
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x606>
 8002c8a:	23a0      	movs	r3, #160	; 0xa0
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	05db      	lsls	r3, r3, #23
 8002c94:	4013      	ands	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f001 fa16 	bl	80040cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ca0:	e019      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ca2:	23a4      	movs	r3, #164	; 0xa4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	045b      	lsls	r3, r3, #17
 8002cac:	4013      	ands	r3, r2
 8002cae:	d012      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
 8002cb0:	23a0      	movs	r3, #160	; 0xa0
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0d      	bge.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f001 f9fd 	bl	80040bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cc2:	e008      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	e006      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	e004      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	e002      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	e000      	b.n	8002cd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002cd4:	46c0      	nop			; (mov r8, r8)
  }
}
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b02a      	add	sp, #168	; 0xa8
 8002cda:	bdb0      	pop	{r4, r5, r7, pc}
 8002cdc:	fffffeff 	.word	0xfffffeff
 8002ce0:	fffffedf 	.word	0xfffffedf
 8002ce4:	effffffe 	.word	0xeffffffe

08002ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	000a      	movs	r2, r1
 8002d02:	1cbb      	adds	r3, r7, #2
 8002d04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2284      	movs	r2, #132	; 0x84
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_LIN_SendBreak+0x16>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e018      	b.n	8002d56 <HAL_LIN_SendBreak+0x48>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2284      	movs	r2, #132	; 0x84
 8002d28:	2101      	movs	r1, #1
 8002d2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2288      	movs	r2, #136	; 0x88
 8002d30:	2124      	movs	r1, #36	; 0x24
 8002d32:	5099      	str	r1, [r3, r2]

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2102      	movs	r1, #2
 8002d40:	430a      	orrs	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2288      	movs	r2, #136	; 0x88
 8002d48:	2120      	movs	r1, #32
 8002d4a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2284      	movs	r2, #132	; 0x84
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2290      	movs	r2, #144	; 0x90
 8002d6a:	589b      	ldr	r3, [r3, r2]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d7c:	231a      	movs	r3, #26
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4abc      	ldr	r2, [pc, #752]	; (8003094 <UART_SetConfig+0x320>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4ab7      	ldr	r2, [pc, #732]	; (8003098 <UART_SetConfig+0x324>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4aae      	ldr	r2, [pc, #696]	; (800309c <UART_SetConfig+0x328>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	220f      	movs	r2, #15
 8002df8:	4393      	bics	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4aa4      	ldr	r2, [pc, #656]	; (80030a0 <UART_SetConfig+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d127      	bne.n	8002e62 <UART_SetConfig+0xee>
 8002e12:	4ba4      	ldr	r3, [pc, #656]	; (80030a4 <UART_SetConfig+0x330>)
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d017      	beq.n	8002e4e <UART_SetConfig+0xda>
 8002e1e:	d81b      	bhi.n	8002e58 <UART_SetConfig+0xe4>
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d00a      	beq.n	8002e3a <UART_SetConfig+0xc6>
 8002e24:	d818      	bhi.n	8002e58 <UART_SetConfig+0xe4>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <UART_SetConfig+0xbc>
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d00a      	beq.n	8002e44 <UART_SetConfig+0xd0>
 8002e2e:	e013      	b.n	8002e58 <UART_SetConfig+0xe4>
 8002e30:	231b      	movs	r3, #27
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e058      	b.n	8002eec <UART_SetConfig+0x178>
 8002e3a:	231b      	movs	r3, #27
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e053      	b.n	8002eec <UART_SetConfig+0x178>
 8002e44:	231b      	movs	r3, #27
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2204      	movs	r2, #4
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e04e      	b.n	8002eec <UART_SetConfig+0x178>
 8002e4e:	231b      	movs	r3, #27
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2208      	movs	r2, #8
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e049      	b.n	8002eec <UART_SetConfig+0x178>
 8002e58:	231b      	movs	r3, #27
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e044      	b.n	8002eec <UART_SetConfig+0x178>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a90      	ldr	r2, [pc, #576]	; (80030a8 <UART_SetConfig+0x334>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d127      	bne.n	8002ebc <UART_SetConfig+0x148>
 8002e6c:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <UART_SetConfig+0x330>)
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	220c      	movs	r2, #12
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d017      	beq.n	8002ea8 <UART_SetConfig+0x134>
 8002e78:	d81b      	bhi.n	8002eb2 <UART_SetConfig+0x13e>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d00a      	beq.n	8002e94 <UART_SetConfig+0x120>
 8002e7e:	d818      	bhi.n	8002eb2 <UART_SetConfig+0x13e>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <UART_SetConfig+0x116>
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d00a      	beq.n	8002e9e <UART_SetConfig+0x12a>
 8002e88:	e013      	b.n	8002eb2 <UART_SetConfig+0x13e>
 8002e8a:	231b      	movs	r3, #27
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e02b      	b.n	8002eec <UART_SetConfig+0x178>
 8002e94:	231b      	movs	r3, #27
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2202      	movs	r2, #2
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e026      	b.n	8002eec <UART_SetConfig+0x178>
 8002e9e:	231b      	movs	r3, #27
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e021      	b.n	8002eec <UART_SetConfig+0x178>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2208      	movs	r2, #8
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e01c      	b.n	8002eec <UART_SetConfig+0x178>
 8002eb2:	231b      	movs	r3, #27
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e017      	b.n	8002eec <UART_SetConfig+0x178>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <UART_SetConfig+0x338>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d104      	bne.n	8002ed0 <UART_SetConfig+0x15c>
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e00d      	b.n	8002eec <UART_SetConfig+0x178>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a76      	ldr	r2, [pc, #472]	; (80030b0 <UART_SetConfig+0x33c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d104      	bne.n	8002ee4 <UART_SetConfig+0x170>
 8002eda:	231b      	movs	r3, #27
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e003      	b.n	8002eec <UART_SetConfig+0x178>
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2210      	movs	r2, #16
 8002eea:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d000      	beq.n	8002efa <UART_SetConfig+0x186>
 8002ef8:	e065      	b.n	8002fc6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002efa:	231b      	movs	r3, #27
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d015      	beq.n	8002f30 <UART_SetConfig+0x1bc>
 8002f04:	dc18      	bgt.n	8002f38 <UART_SetConfig+0x1c4>
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00d      	beq.n	8002f26 <UART_SetConfig+0x1b2>
 8002f0a:	dc15      	bgt.n	8002f38 <UART_SetConfig+0x1c4>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <UART_SetConfig+0x1a2>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d005      	beq.n	8002f20 <UART_SetConfig+0x1ac>
 8002f14:	e010      	b.n	8002f38 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f16:	f7ff f8b3 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	617b      	str	r3, [r7, #20]
        break;
 8002f1e:	e012      	b.n	8002f46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f20:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <UART_SetConfig+0x340>)
 8002f22:	617b      	str	r3, [r7, #20]
        break;
 8002f24:	e00f      	b.n	8002f46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f26:	f7ff f81f 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	617b      	str	r3, [r7, #20]
        break;
 8002f2e:	e00a      	b.n	8002f46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	617b      	str	r3, [r7, #20]
        break;
 8002f36:	e006      	b.n	8002f46 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f3c:	231a      	movs	r3, #26
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
        break;
 8002f44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d100      	bne.n	8002f4e <UART_SetConfig+0x1da>
 8002f4c:	e08d      	b.n	800306a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <UART_SetConfig+0x344>)
 8002f54:	0052      	lsls	r2, r2, #1
 8002f56:	5ad3      	ldrh	r3, [r2, r3]
 8002f58:	0019      	movs	r1, r3
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7fd f8d0 	bl	8000100 <__udivsi3>
 8002f60:	0003      	movs	r3, r0
 8002f62:	005a      	lsls	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	18d2      	adds	r2, r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0019      	movs	r1, r3
 8002f72:	0010      	movs	r0, r2
 8002f74:	f7fd f8c4 	bl	8000100 <__udivsi3>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d91c      	bls.n	8002fbc <UART_SetConfig+0x248>
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d217      	bcs.n	8002fbc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	200e      	movs	r0, #14
 8002f92:	183b      	adds	r3, r7, r0
 8002f94:	210f      	movs	r1, #15
 8002f96:	438a      	bics	r2, r1
 8002f98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b299      	uxth	r1, r3
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	183a      	adds	r2, r7, r0
 8002faa:	8812      	ldrh	r2, [r2, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	183a      	adds	r2, r7, r0
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e056      	b.n	800306a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	231a      	movs	r3, #26
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e051      	b.n	800306a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d015      	beq.n	8002ffc <UART_SetConfig+0x288>
 8002fd0:	dc18      	bgt.n	8003004 <UART_SetConfig+0x290>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00d      	beq.n	8002ff2 <UART_SetConfig+0x27e>
 8002fd6:	dc15      	bgt.n	8003004 <UART_SetConfig+0x290>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <UART_SetConfig+0x26e>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x278>
 8002fe0:	e010      	b.n	8003004 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7ff f84d 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	617b      	str	r3, [r7, #20]
        break;
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <UART_SetConfig+0x340>)
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	e00f      	b.n	8003012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe ffb9 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	617b      	str	r3, [r7, #20]
        break;
 8002ffa:	e00a      	b.n	8003012 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	617b      	str	r3, [r7, #20]
        break;
 8003002:	e006      	b.n	8003012 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003008:	231a      	movs	r3, #26
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d028      	beq.n	800306a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <UART_SetConfig+0x344>)
 800301e:	0052      	lsls	r2, r2, #1
 8003020:	5ad3      	ldrh	r3, [r2, r3]
 8003022:	0019      	movs	r1, r3
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f7fd f86b 	bl	8000100 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	001a      	movs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	18d2      	adds	r2, r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f7fd f85f 	bl	8000100 <__udivsi3>
 8003042:	0003      	movs	r3, r0
 8003044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d90a      	bls.n	8003062 <UART_SetConfig+0x2ee>
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	025b      	lsls	r3, r3, #9
 8003052:	429a      	cmp	r2, r3
 8003054:	d205      	bcs.n	8003062 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e003      	b.n	800306a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003062:	231a      	movs	r3, #26
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	226a      	movs	r2, #106	; 0x6a
 800306e:	2101      	movs	r1, #1
 8003070:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2268      	movs	r2, #104	; 0x68
 8003076:	2101      	movs	r1, #1
 8003078:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003086:	231a      	movs	r3, #26
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b008      	add	sp, #32
 8003092:	bd80      	pop	{r7, pc}
 8003094:	cfff69f3 	.word	0xcfff69f3
 8003098:	ffffcfff 	.word	0xffffcfff
 800309c:	11fff4ff 	.word	0x11fff4ff
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40004400 	.word	0x40004400
 80030ac:	40004800 	.word	0x40004800
 80030b0:	40004c00 	.word	0x40004c00
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	080043e0 	.word	0x080043e0

080030bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a4a      	ldr	r2, [pc, #296]	; (8003200 <UART_AdvFeatureConfig+0x144>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2202      	movs	r2, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	d00b      	beq.n	8003108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a43      	ldr	r2, [pc, #268]	; (8003204 <UART_AdvFeatureConfig+0x148>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d00b      	beq.n	800312a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <UART_AdvFeatureConfig+0x14c>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	2208      	movs	r2, #8
 8003130:	4013      	ands	r3, r2
 8003132:	d00b      	beq.n	800314c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <UART_AdvFeatureConfig+0x150>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2210      	movs	r2, #16
 8003152:	4013      	ands	r3, r2
 8003154:	d00b      	beq.n	800316e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <UART_AdvFeatureConfig+0x154>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	2220      	movs	r2, #32
 8003174:	4013      	ands	r3, r2
 8003176:	d00b      	beq.n	8003190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <UART_AdvFeatureConfig+0x158>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2240      	movs	r2, #64	; 0x40
 8003196:	4013      	ands	r3, r2
 8003198:	d01d      	beq.n	80031d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <UART_AdvFeatureConfig+0x15c>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	035b      	lsls	r3, r3, #13
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d10b      	bne.n	80031d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a15      	ldr	r2, [pc, #84]	; (800321c <UART_AdvFeatureConfig+0x160>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	4013      	ands	r3, r2
 80031de:	d00b      	beq.n	80031f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <UART_AdvFeatureConfig+0x164>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  }
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	fffdffff 	.word	0xfffdffff
 8003204:	fffeffff 	.word	0xfffeffff
 8003208:	fffbffff 	.word	0xfffbffff
 800320c:	ffff7fff 	.word	0xffff7fff
 8003210:	ffffefff 	.word	0xffffefff
 8003214:	ffffdfff 	.word	0xffffdfff
 8003218:	ffefffff 	.word	0xffefffff
 800321c:	ff9fffff 	.word	0xff9fffff
 8003220:	fff7ffff 	.word	0xfff7ffff

08003224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2290      	movs	r2, #144	; 0x90
 8003230:	2100      	movs	r1, #0
 8003232:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003234:	f7fd fee2 	bl	8000ffc <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2208      	movs	r2, #8
 8003244:	4013      	ands	r3, r2
 8003246:	2b08      	cmp	r3, #8
 8003248:	d10c      	bne.n	8003264 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	0391      	lsls	r1, r2, #14
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <UART_CheckIdleState+0x98>)
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	f000 f832 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e026      	b.n	80032b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2204      	movs	r2, #4
 800326c:	4013      	ands	r3, r2
 800326e:	2b04      	cmp	r3, #4
 8003270:	d10c      	bne.n	800328c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	03d1      	lsls	r1, r2, #15
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <UART_CheckIdleState+0x98>)
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	f000 f81e 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d001      	beq.n	800328c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e012      	b.n	80032b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2288      	movs	r2, #136	; 0x88
 8003290:	2120      	movs	r1, #32
 8003292:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	228c      	movs	r2, #140	; 0x8c
 8003298:	2120      	movs	r1, #32
 800329a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2284      	movs	r2, #132	; 0x84
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	01ffffff 	.word	0x01ffffff

080032c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b094      	sub	sp, #80	; 0x50
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d0:	e0a7      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	3301      	adds	r3, #1
 80032d6:	d100      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0x1a>
 80032d8:	e0a3      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fd fe8f 	bl	8000ffc <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d13f      	bne.n	8003370 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f0:	f3ef 8310 	mrs	r3, PRIMASK
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
 80032fa:	2301      	movs	r3, #1
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	f383 8810 	msr	PRIMASK, r3
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	494e      	ldr	r1, [pc, #312]	; (800344c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003312:	400a      	ands	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	f383 8810 	msr	PRIMASK, r3
}
 8003320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8310 	mrs	r3, PRIMASK
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
 800332c:	2301      	movs	r3, #1
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2101      	movs	r1, #1
 8003344:	438a      	bics	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2288      	movs	r2, #136	; 0x88
 8003358:	2120      	movs	r1, #32
 800335a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	228c      	movs	r2, #140	; 0x8c
 8003360:	2120      	movs	r1, #32
 8003362:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2284      	movs	r2, #132	; 0x84
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e069      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2204      	movs	r2, #4
 8003378:	4013      	ands	r3, r2
 800337a:	d052      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	401a      	ands	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	429a      	cmp	r2, r3
 800338e:	d148      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	613b      	str	r3, [r7, #16]
  return(result);
 80033a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4924      	ldr	r1, [pc, #144]	; (800344c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033bc:	400a      	ands	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033cc:	f3ef 8310 	mrs	r3, PRIMASK
 80033d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80033d2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d6:	2301      	movs	r3, #1
 80033d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	438a      	bics	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2288      	movs	r2, #136	; 0x88
 8003402:	2120      	movs	r1, #32
 8003404:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	228c      	movs	r2, #140	; 0x8c
 800340a:	2120      	movs	r1, #32
 800340c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2290      	movs	r2, #144	; 0x90
 8003412:	2120      	movs	r1, #32
 8003414:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2284      	movs	r2, #132	; 0x84
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e010      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	425a      	negs	r2, r3
 8003432:	4153      	adcs	r3, r2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	001a      	movs	r2, r3
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d100      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x182>
 8003440:	e747      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b014      	add	sp, #80	; 0x50
 800344a:	bd80      	pop	{r7, pc}
 800344c:	fffffe5f 	.word	0xfffffe5f

08003450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b098      	sub	sp, #96	; 0x60
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1dba      	adds	r2, r7, #6
 8003468:	215c      	movs	r1, #92	; 0x5c
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1dba      	adds	r2, r7, #6
 8003472:	215e      	movs	r1, #94	; 0x5e
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	429a      	cmp	r2, r3
 8003488:	d10d      	bne.n	80034a6 <UART_Start_Receive_IT+0x56>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <UART_Start_Receive_IT+0x4c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2260      	movs	r2, #96	; 0x60
 8003496:	497b      	ldr	r1, [pc, #492]	; (8003684 <UART_Start_Receive_IT+0x234>)
 8003498:	5299      	strh	r1, [r3, r2]
 800349a:	e02e      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2260      	movs	r2, #96	; 0x60
 80034a0:	21ff      	movs	r1, #255	; 0xff
 80034a2:	5299      	strh	r1, [r3, r2]
 80034a4:	e029      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <UART_Start_Receive_IT+0x7a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <UART_Start_Receive_IT+0x70>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2260      	movs	r2, #96	; 0x60
 80034ba:	21ff      	movs	r1, #255	; 0xff
 80034bc:	5299      	strh	r1, [r3, r2]
 80034be:	e01c      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2260      	movs	r2, #96	; 0x60
 80034c4:	217f      	movs	r1, #127	; 0x7f
 80034c6:	5299      	strh	r1, [r3, r2]
 80034c8:	e017      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	055b      	lsls	r3, r3, #21
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10d      	bne.n	80034f2 <UART_Start_Receive_IT+0xa2>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <UART_Start_Receive_IT+0x98>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2260      	movs	r2, #96	; 0x60
 80034e2:	217f      	movs	r1, #127	; 0x7f
 80034e4:	5299      	strh	r1, [r3, r2]
 80034e6:	e008      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2260      	movs	r2, #96	; 0x60
 80034ec:	213f      	movs	r1, #63	; 0x3f
 80034ee:	5299      	strh	r1, [r3, r2]
 80034f0:	e003      	b.n	80034fa <UART_Start_Receive_IT+0xaa>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2260      	movs	r2, #96	; 0x60
 80034f6:	2100      	movs	r1, #0
 80034f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2290      	movs	r2, #144	; 0x90
 80034fe:	2100      	movs	r1, #0
 8003500:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	228c      	movs	r2, #140	; 0x8c
 8003506:	2122      	movs	r1, #34	; 0x22
 8003508:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003514:	2301      	movs	r3, #1
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	059b      	lsls	r3, r3, #22
 8003544:	429a      	cmp	r2, r3
 8003546:	d150      	bne.n	80035ea <UART_Start_Receive_IT+0x19a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2268      	movs	r2, #104	; 0x68
 800354c:	5a9b      	ldrh	r3, [r3, r2]
 800354e:	1dba      	adds	r2, r7, #6
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d349      	bcc.n	80035ea <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	429a      	cmp	r2, r3
 8003560:	d107      	bne.n	8003572 <UART_Start_Receive_IT+0x122>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a46      	ldr	r2, [pc, #280]	; (8003688 <UART_Start_Receive_IT+0x238>)
 800356e:	675a      	str	r2, [r3, #116]	; 0x74
 8003570:	e002      	b.n	8003578 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a45      	ldr	r2, [pc, #276]	; (800368c <UART_Start_Receive_IT+0x23c>)
 8003576:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d019      	beq.n	80035b4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003580:	f3ef 8310 	mrs	r3, PRIMASK
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
 800358a:	2301      	movs	r3, #1
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	0049      	lsls	r1, r1, #1
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b4:	f3ef 8310 	mrs	r3, PRIMASK
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80035bc:	657b      	str	r3, [r7, #84]	; 0x54
 80035be:	2301      	movs	r3, #1
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0549      	lsls	r1, r1, #21
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	e047      	b.n	800367a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	015b      	lsls	r3, r3, #5
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d107      	bne.n	8003606 <UART_Start_Receive_IT+0x1b6>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <UART_Start_Receive_IT+0x240>)
 8003602:	675a      	str	r2, [r3, #116]	; 0x74
 8003604:	e002      	b.n	800360c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <UART_Start_Receive_IT+0x244>)
 800360a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d019      	beq.n	8003648 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003614:	f3ef 8310 	mrs	r3, PRIMASK
 8003618:	61fb      	str	r3, [r7, #28]
  return(result);
 800361a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800361c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361e:	2301      	movs	r3, #1
 8003620:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f383 8810 	msr	PRIMASK, r3
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2190      	movs	r1, #144	; 0x90
 8003636:	0049      	lsls	r1, r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	e018      	b.n	800367a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003648:	f3ef 8310 	mrs	r3, PRIMASK
 800364c:	613b      	str	r3, [r7, #16]
  return(result);
 800364e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003650:	653b      	str	r3, [r7, #80]	; 0x50
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2120      	movs	r1, #32
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b018      	add	sp, #96	; 0x60
 8003682:	bd80      	pop	{r7, pc}
 8003684:	000001ff 	.word	0x000001ff
 8003688:	08003dc1 	.word	0x08003dc1
 800368c:	08003ad5 	.word	0x08003ad5
 8003690:	08003961 	.word	0x08003961
 8003694:	080037ed 	.word	0x080037ed

08003698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a0:	f3ef 8310 	mrs	r3, PRIMASK
 80036a4:	617b      	str	r3, [r7, #20]
  return(result);
 80036a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f383 8810 	msr	PRIMASK, r3
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4926      	ldr	r1, [pc, #152]	; (800375c <UART_EndRxTransfer+0xc4>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d2:	f3ef 8310 	mrs	r3, PRIMASK
 80036d6:	623b      	str	r3, [r7, #32]
  return(result);
 80036d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
 80036dc:	2301      	movs	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	491b      	ldr	r1, [pc, #108]	; (8003760 <UART_EndRxTransfer+0xc8>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d118      	bne.n	800373e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370c:	f3ef 8310 	mrs	r3, PRIMASK
 8003710:	60bb      	str	r3, [r7, #8]
  return(result);
 8003712:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003716:	2301      	movs	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2110      	movs	r1, #16
 800372e:	438a      	bics	r2, r1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	228c      	movs	r2, #140	; 0x8c
 8003742:	2120      	movs	r1, #32
 8003744:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b00e      	add	sp, #56	; 0x38
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	fffffedf 	.word	0xfffffedf
 8003760:	effffffe 	.word	0xeffffffe

08003764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	225e      	movs	r2, #94	; 0x5e
 8003776:	2100      	movs	r1, #0
 8003778:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2256      	movs	r2, #86	; 0x56
 800377e:	2100      	movs	r1, #0
 8003780:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0018      	movs	r0, r3
 8003786:	f7fd f9b1 	bl	8000aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	60bb      	str	r3, [r7, #8]
  return(result);
 80037a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	2301      	movs	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	438a      	bics	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2288      	movs	r2, #136	; 0x88
 80037d0:	2120      	movs	r1, #32
 80037d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff fa83 	bl	8002ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b090      	sub	sp, #64	; 0x40
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037f4:	203e      	movs	r0, #62	; 0x3e
 80037f6:	183b      	adds	r3, r7, r0
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	2160      	movs	r1, #96	; 0x60
 80037fc:	5a52      	ldrh	r2, [r2, r1]
 80037fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	228c      	movs	r2, #140	; 0x8c
 8003804:	589b      	ldr	r3, [r3, r2]
 8003806:	2b22      	cmp	r3, #34	; 0x22
 8003808:	d000      	beq.n	800380c <UART_RxISR_8BIT+0x20>
 800380a:	e09a      	b.n	8003942 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003812:	213c      	movs	r1, #60	; 0x3c
 8003814:	187b      	adds	r3, r7, r1
 8003816:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003818:	187b      	adds	r3, r7, r1
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	183b      	adds	r3, r7, r0
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b2d9      	uxtb	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	400a      	ands	r2, r1
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	225e      	movs	r2, #94	; 0x5e
 800383c:	5a9b      	ldrh	r3, [r3, r2]
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b299      	uxth	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	225e      	movs	r2, #94	; 0x5e
 8003848:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	225e      	movs	r2, #94	; 0x5e
 800384e:	5a9b      	ldrh	r3, [r3, r2]
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d000      	beq.n	8003858 <UART_RxISR_8BIT+0x6c>
 8003856:	e07c      	b.n	8003952 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	61bb      	str	r3, [r7, #24]
  return(result);
 800385e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
 8003862:	2301      	movs	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4938      	ldr	r1, [pc, #224]	; (800395c <UART_RxISR_8BIT+0x170>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
 8003894:	2301      	movs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	438a      	bics	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	228c      	movs	r2, #140	; 0x8c
 80038c0:	2120      	movs	r1, #32
 80038c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d12f      	bne.n	8003938 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
 80038e8:	2301      	movs	r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2110      	movs	r1, #16
 8003900:	438a      	bics	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2210      	movs	r2, #16
 8003918:	4013      	ands	r3, r2
 800391a:	2b10      	cmp	r3, #16
 800391c:	d103      	bne.n	8003926 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	225c      	movs	r2, #92	; 0x5c
 800392a:	5a9a      	ldrh	r2, [r3, r2]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff f9e1 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003936:	e00c      	b.n	8003952 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7fd f8a8 	bl	8000a90 <HAL_UART_RxCpltCallback>
}
 8003940:	e007      	b.n	8003952 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2108      	movs	r1, #8
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b010      	add	sp, #64	; 0x40
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	fffffedf 	.word	0xfffffedf

08003960 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b090      	sub	sp, #64	; 0x40
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003968:	203e      	movs	r0, #62	; 0x3e
 800396a:	183b      	adds	r3, r7, r0
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	2160      	movs	r1, #96	; 0x60
 8003970:	5a52      	ldrh	r2, [r2, r1]
 8003972:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	228c      	movs	r2, #140	; 0x8c
 8003978:	589b      	ldr	r3, [r3, r2]
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	d000      	beq.n	8003980 <UART_RxISR_16BIT+0x20>
 800397e:	e09a      	b.n	8003ab6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003986:	213c      	movs	r1, #60	; 0x3c
 8003988:	187b      	adds	r3, r7, r1
 800398a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003992:	187b      	adds	r3, r7, r1
 8003994:	183a      	adds	r2, r7, r0
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	8812      	ldrh	r2, [r2, #0]
 800399a:	4013      	ands	r3, r2
 800399c:	b29a      	uxth	r2, r3
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	225e      	movs	r2, #94	; 0x5e
 80039b0:	5a9b      	ldrh	r3, [r3, r2]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b299      	uxth	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	225e      	movs	r2, #94	; 0x5e
 80039bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	225e      	movs	r2, #94	; 0x5e
 80039c2:	5a9b      	ldrh	r3, [r3, r2]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d000      	beq.n	80039cc <UART_RxISR_16BIT+0x6c>
 80039ca:	e07c      	b.n	8003ac6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039cc:	f3ef 8310 	mrs	r3, PRIMASK
 80039d0:	617b      	str	r3, [r7, #20]
  return(result);
 80039d2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
 80039d6:	2301      	movs	r3, #1
 80039d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4938      	ldr	r1, [pc, #224]	; (8003ad0 <UART_RxISR_16BIT+0x170>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	623b      	str	r3, [r7, #32]
  return(result);
 8003a04:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
 8003a08:	2301      	movs	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	228c      	movs	r2, #140	; 0x8c
 8003a34:	2120      	movs	r1, #32
 8003a36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12f      	bne.n	8003aac <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
 8003a56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a58:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2110      	movs	r1, #16
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d103      	bne.n	8003a9a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	225c      	movs	r2, #92	; 0x5c
 8003a9e:	5a9a      	ldrh	r2, [r3, r2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff f927 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aaa:	e00c      	b.n	8003ac6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fc ffee 	bl	8000a90 <HAL_UART_RxCpltCallback>
}
 8003ab4:	e007      	b.n	8003ac6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b010      	add	sp, #64	; 0x40
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	fffffedf 	.word	0xfffffedf

08003ad4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b09c      	sub	sp, #112	; 0x70
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003adc:	236a      	movs	r3, #106	; 0x6a
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	2160      	movs	r1, #96	; 0x60
 8003ae4:	5a52      	ldrh	r2, [r2, r1]
 8003ae6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	228c      	movs	r2, #140	; 0x8c
 8003b04:	589b      	ldr	r3, [r3, r2]
 8003b06:	2b22      	cmp	r3, #34	; 0x22
 8003b08:	d000      	beq.n	8003b0c <UART_RxISR_8BIT_FIFOEN+0x38>
 8003b0a:	e144      	b.n	8003d96 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b0c:	235e      	movs	r3, #94	; 0x5e
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	2168      	movs	r1, #104	; 0x68
 8003b14:	5a52      	ldrh	r2, [r2, r1]
 8003b16:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b18:	e0eb      	b.n	8003cf2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	215c      	movs	r1, #92	; 0x5c
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	236a      	movs	r3, #106	; 0x6a
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b2d9      	uxtb	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	400a      	ands	r2, r1
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	225e      	movs	r2, #94	; 0x5e
 8003b4c:	5a9b      	ldrh	r3, [r3, r2]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b299      	uxth	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	225e      	movs	r2, #94	; 0x5e
 8003b58:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	2207      	movs	r2, #7
 8003b66:	4013      	ands	r3, r2
 8003b68:	d049      	beq.n	8003bfe <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d010      	beq.n	8003b94 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2290      	movs	r2, #144	; 0x90
 8003b88:	589b      	ldr	r3, [r3, r2]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2190      	movs	r1, #144	; 0x90
 8003b92:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	2202      	movs	r2, #2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d00f      	beq.n	8003bbc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d00b      	beq.n	8003bbc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2290      	movs	r2, #144	; 0x90
 8003bb0:	589b      	ldr	r3, [r3, r2]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2190      	movs	r1, #144	; 0x90
 8003bba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d00f      	beq.n	8003be4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2290      	movs	r2, #144	; 0x90
 8003bd8:	589b      	ldr	r3, [r3, r2]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2190      	movs	r1, #144	; 0x90
 8003be2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2290      	movs	r2, #144	; 0x90
 8003be8:	589b      	ldr	r3, [r3, r2]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fc ff7b 	bl	8000aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2290      	movs	r2, #144	; 0x90
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	225e      	movs	r2, #94	; 0x5e
 8003c02:	5a9b      	ldrh	r3, [r3, r2]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d173      	bne.n	8003cf2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c14:	2301      	movs	r3, #1
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4961      	ldr	r1, [pc, #388]	; (8003db0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
 8003c46:	2301      	movs	r3, #1
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4955      	ldr	r1, [pc, #340]	; (8003db4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	228c      	movs	r2, #140	; 0x8c
 8003c72:	2120      	movs	r1, #32
 8003c74:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d12f      	bne.n	8003cea <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	623b      	str	r3, [r7, #32]
  return(result);
 8003c96:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d103      	bne.n	8003cd8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	225c      	movs	r2, #92	; 0x5c
 8003cdc:	5a9a      	ldrh	r2, [r3, r2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff f808 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
 8003ce8:	e003      	b.n	8003cf2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7fc fecf 	bl	8000a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003cf2:	235e      	movs	r3, #94	; 0x5e
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d000      	beq.n	8003d06 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003d04:	e709      	b.n	8003b1a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003d06:	204e      	movs	r0, #78	; 0x4e
 8003d08:	183b      	adds	r3, r7, r0
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	215e      	movs	r1, #94	; 0x5e
 8003d0e:	5a52      	ldrh	r2, [r2, r1]
 8003d10:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003d12:	0001      	movs	r1, r0
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d044      	beq.n	8003da6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2268      	movs	r2, #104	; 0x68
 8003d20:	5a9b      	ldrh	r3, [r3, r2]
 8003d22:	187a      	adds	r2, r7, r1
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d23d      	bcs.n	8003da6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d30:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	2301      	movs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	491b      	ldr	r1, [pc, #108]	; (8003db8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003d60:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
 8003d66:	617b      	str	r3, [r7, #20]
  return(result);
 8003d68:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2120      	movs	r1, #32
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d94:	e007      	b.n	8003da6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2108      	movs	r1, #8
 8003da2:	430a      	orrs	r2, r1
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b01c      	add	sp, #112	; 0x70
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	fffffeff 	.word	0xfffffeff
 8003db4:	effffffe 	.word	0xeffffffe
 8003db8:	efffffff 	.word	0xefffffff
 8003dbc:	080037ed 	.word	0x080037ed

08003dc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b09e      	sub	sp, #120	; 0x78
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003dc8:	2372      	movs	r3, #114	; 0x72
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	2160      	movs	r1, #96	; 0x60
 8003dd0:	5a52      	ldrh	r2, [r2, r1]
 8003dd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	228c      	movs	r2, #140	; 0x8c
 8003df0:	589b      	ldr	r3, [r3, r2]
 8003df2:	2b22      	cmp	r3, #34	; 0x22
 8003df4:	d000      	beq.n	8003df8 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003df6:	e144      	b.n	8004082 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003df8:	2366      	movs	r3, #102	; 0x66
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	2168      	movs	r1, #104	; 0x68
 8003e00:	5a52      	ldrh	r2, [r2, r1]
 8003e02:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e04:	e0eb      	b.n	8003fde <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0c:	2164      	movs	r1, #100	; 0x64
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2272      	movs	r2, #114	; 0x72
 8003e1c:	18ba      	adds	r2, r7, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	8812      	ldrh	r2, [r2, #0]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	1c9a      	adds	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	225e      	movs	r2, #94	; 0x5e
 8003e38:	5a9b      	ldrh	r3, [r3, r2]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b299      	uxth	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	225e      	movs	r2, #94	; 0x5e
 8003e44:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	2207      	movs	r2, #7
 8003e52:	4013      	ands	r3, r2
 8003e54:	d049      	beq.n	8003eea <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d010      	beq.n	8003e80 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003e5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4013      	ands	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2290      	movs	r2, #144	; 0x90
 8003e74:	589b      	ldr	r3, [r3, r2]
 8003e76:	2201      	movs	r2, #1
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2190      	movs	r1, #144	; 0x90
 8003e7e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d00f      	beq.n	8003ea8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2202      	movs	r2, #2
 8003e96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2290      	movs	r2, #144	; 0x90
 8003e9c:	589b      	ldr	r3, [r3, r2]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2190      	movs	r1, #144	; 0x90
 8003ea6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d00f      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2290      	movs	r2, #144	; 0x90
 8003ec4:	589b      	ldr	r3, [r3, r2]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2190      	movs	r1, #144	; 0x90
 8003ece:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2290      	movs	r2, #144	; 0x90
 8003ed4:	589b      	ldr	r3, [r3, r2]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fc fe05 	bl	8000aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2290      	movs	r2, #144	; 0x90
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	225e      	movs	r2, #94	; 0x5e
 8003eee:	5a9b      	ldrh	r3, [r3, r2]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d173      	bne.n	8003fde <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f00:	2301      	movs	r3, #1
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	f383 8810 	msr	PRIMASK, r3
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4961      	ldr	r1, [pc, #388]	; (800409c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003f18:	400a      	ands	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f28:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f32:	2301      	movs	r3, #1
 8003f34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4955      	ldr	r1, [pc, #340]	; (80040a0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	228c      	movs	r2, #140	; 0x8c
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d12f      	bne.n	8003fd6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
 8003f86:	2301      	movs	r3, #1
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d103      	bne.n	8003fc4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	225c      	movs	r2, #92	; 0x5c
 8003fc8:	5a9a      	ldrh	r2, [r3, r2]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0011      	movs	r1, r2
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fe fe92 	bl	8002cf8 <HAL_UARTEx_RxEventCallback>
 8003fd4:	e003      	b.n	8003fde <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7fc fd59 	bl	8000a90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003fde:	2366      	movs	r3, #102	; 0x66
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fea:	2220      	movs	r2, #32
 8003fec:	4013      	ands	r3, r2
 8003fee:	d000      	beq.n	8003ff2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8003ff0:	e709      	b.n	8003e06 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003ff2:	2052      	movs	r0, #82	; 0x52
 8003ff4:	183b      	adds	r3, r7, r0
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	215e      	movs	r1, #94	; 0x5e
 8003ffa:	5a52      	ldrh	r2, [r2, r1]
 8003ffc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ffe:	0001      	movs	r1, r0
 8004000:	187b      	adds	r3, r7, r1
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d044      	beq.n	8004092 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2268      	movs	r2, #104	; 0x68
 800400c:	5a9b      	ldrh	r3, [r3, r2]
 800400e:	187a      	adds	r2, r7, r1
 8004010:	8812      	ldrh	r2, [r2, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d23d      	bcs.n	8004092 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004016:	f3ef 8310 	mrs	r3, PRIMASK
 800401a:	60fb      	str	r3, [r7, #12]
  return(result);
 800401c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	2301      	movs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	491b      	ldr	r1, [pc, #108]	; (80040a4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8004038:	400a      	ands	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800404c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404e:	f3ef 8310 	mrs	r3, PRIMASK
 8004052:	61bb      	str	r3, [r7, #24]
  return(result);
 8004054:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004056:	64bb      	str	r3, [r7, #72]	; 0x48
 8004058:	2301      	movs	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2120      	movs	r1, #32
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004080:	e007      	b.n	8004092 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2108      	movs	r1, #8
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b01e      	add	sp, #120	; 0x78
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	fffffeff 	.word	0xfffffeff
 80040a0:	effffffe 	.word	0xeffffffe
 80040a4:	efffffff 	.word	0xefffffff
 80040a8:	08003961 	.word	0x08003961

080040ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2284      	movs	r2, #132	; 0x84
 80040e8:	5c9b      	ldrb	r3, [r3, r2]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e027      	b.n	8004142 <HAL_UARTEx_DisableFifoMode+0x66>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2284      	movs	r2, #132	; 0x84
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2288      	movs	r2, #136	; 0x88
 80040fe:	2124      	movs	r1, #36	; 0x24
 8004100:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_UARTEx_DisableFifoMode+0x70>)
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2288      	movs	r2, #136	; 0x88
 8004134:	2120      	movs	r1, #32
 8004136:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2284      	movs	r2, #132	; 0x84
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	dfffffff 	.word	0xdfffffff

08004150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2284      	movs	r2, #132	; 0x84
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e02e      	b.n	80041c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2284      	movs	r2, #132	; 0x84
 800416c:	2101      	movs	r1, #1
 800416e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2288      	movs	r2, #136	; 0x88
 8004174:	2124      	movs	r1, #36	; 0x24
 8004176:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	438a      	bics	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	08d9      	lsrs	r1, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f854 	bl	8004254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2288      	movs	r2, #136	; 0x88
 80041b8:	2120      	movs	r1, #32
 80041ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2284      	movs	r2, #132	; 0x84
 80041c0:	2100      	movs	r1, #0
 80041c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b004      	add	sp, #16
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2284      	movs	r2, #132	; 0x84
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e02f      	b.n	8004248 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2284      	movs	r2, #132	; 0x84
 80041ec:	2101      	movs	r1, #1
 80041ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2288      	movs	r2, #136	; 0x88
 80041f4:	2124      	movs	r1, #36	; 0x24
 80041f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2101      	movs	r1, #1
 800420c:	438a      	bics	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f813 	bl	8004254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2288      	movs	r2, #136	; 0x88
 800423a:	2120      	movs	r1, #32
 800423c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2284      	movs	r2, #132	; 0x84
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}
 8004250:	f1ffffff 	.word	0xf1ffffff

08004254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	226a      	movs	r2, #106	; 0x6a
 8004268:	2101      	movs	r1, #1
 800426a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2268      	movs	r2, #104	; 0x68
 8004270:	2101      	movs	r1, #1
 8004272:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004274:	e043      	b.n	80042fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004276:	260f      	movs	r6, #15
 8004278:	19bb      	adds	r3, r7, r6
 800427a:	2208      	movs	r2, #8
 800427c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800427e:	200e      	movs	r0, #14
 8004280:	183b      	adds	r3, r7, r0
 8004282:	2208      	movs	r2, #8
 8004284:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	0e5b      	lsrs	r3, r3, #25
 800428e:	b2da      	uxtb	r2, r3
 8004290:	240d      	movs	r4, #13
 8004292:	193b      	adds	r3, r7, r4
 8004294:	2107      	movs	r1, #7
 8004296:	400a      	ands	r2, r1
 8004298:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0f5b      	lsrs	r3, r3, #29
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	250c      	movs	r5, #12
 80042a6:	197b      	adds	r3, r7, r5
 80042a8:	2107      	movs	r1, #7
 80042aa:	400a      	ands	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	197a      	adds	r2, r7, r5
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	4914      	ldr	r1, [pc, #80]	; (8004308 <UARTEx_SetNbDataToProcess+0xb4>)
 80042b8:	5c8a      	ldrb	r2, [r1, r2]
 80042ba:	435a      	muls	r2, r3
 80042bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <UARTEx_SetNbDataToProcess+0xb8>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042c6:	0019      	movs	r1, r3
 80042c8:	f7fb ffa4 	bl	8000214 <__divsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	b299      	uxth	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	226a      	movs	r2, #106	; 0x6a
 80042d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042d6:	19bb      	adds	r3, r7, r6
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	193a      	adds	r2, r7, r4
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	490a      	ldr	r1, [pc, #40]	; (8004308 <UARTEx_SetNbDataToProcess+0xb4>)
 80042e0:	5c8a      	ldrb	r2, [r1, r2]
 80042e2:	435a      	muls	r2, r3
 80042e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042e6:	193b      	adds	r3, r7, r4
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	4a08      	ldr	r2, [pc, #32]	; (800430c <UARTEx_SetNbDataToProcess+0xb8>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042ee:	0019      	movs	r1, r3
 80042f0:	f7fb ff90 	bl	8000214 <__divsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	b299      	uxth	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2268      	movs	r2, #104	; 0x68
 80042fc:	5299      	strh	r1, [r3, r2]
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b005      	add	sp, #20
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	080043f8 	.word	0x080043f8
 800430c:	08004400 	.word	0x08004400

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	2600      	movs	r6, #0
 8004314:	4d0c      	ldr	r5, [pc, #48]	; (8004348 <__libc_init_array+0x38>)
 8004316:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	2600      	movs	r6, #0
 8004322:	f000 f821 	bl	8004368 <_init>
 8004326:	4d0a      	ldr	r5, [pc, #40]	; (8004350 <__libc_init_array+0x40>)
 8004328:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <__libc_init_array+0x44>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	00b3      	lsls	r3, r6, #2
 8004336:	58eb      	ldr	r3, [r5, r3]
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	00b3      	lsls	r3, r6, #2
 8004340:	58eb      	ldr	r3, [r5, r3]
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08004408 	.word	0x08004408
 800434c:	08004408 	.word	0x08004408
 8004350:	08004408 	.word	0x08004408
 8004354:	0800440c 	.word	0x0800440c

08004358 <memset>:
 8004358:	0003      	movs	r3, r0
 800435a:	1882      	adds	r2, r0, r2
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	7019      	strb	r1, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <_init>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr

08004374 <_fini>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr
