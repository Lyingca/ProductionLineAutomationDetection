
ProductionLineAutomationDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f0  080042f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042f0  080042f0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f0  080042f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08004308  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004308  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d48c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220b  00000000  00000000  0002d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ac0  00000000  00000000  000307d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db7f  00000000  00000000  00046298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084464  00000000  00000000  00053e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d827b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  000d82cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004250 	.word	0x08004250

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004250 	.word	0x08004250

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_GPIO_Init+0x40>)
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_GPIO_Init+0x40>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_GPIO_Init+0x40>)
 8000400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_GPIO_Init+0x40>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_GPIO_Init+0x40>)
 8000410:	2104      	movs	r1, #4
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_GPIO_Init+0x40>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041a:	2204      	movs	r2, #4
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <LIN_Check_Sum>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum(uint8_t *buf, uint8_t lens)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	000a      	movs	r2, r1
 800043a:	1cfb      	adds	r3, r7, #3
 800043c:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 800043e:	230b      	movs	r3, #11
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 8000446:	230c      	movs	r3, #12
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 800044e:	230f      	movs	r3, #15
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	e011      	b.n	800047c <LIN_Check_Sum+0x4c>
    {
        chm1 += *(buf+i);
 8000458:	200f      	movs	r0, #15
 800045a:	183b      	adds	r3, r7, r0
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	18d3      	adds	r3, r2, r3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b299      	uxth	r1, r3
 8000466:	220c      	movs	r2, #12
 8000468:	18bb      	adds	r3, r7, r2
 800046a:	18ba      	adds	r2, r7, r2
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	188a      	adds	r2, r1, r2
 8000470:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 8000472:	183b      	adds	r3, r7, r0
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	183b      	adds	r3, r7, r0
 8000478:	3201      	adds	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	230f      	movs	r3, #15
 800047e:	18fa      	adds	r2, r7, r3
 8000480:	1cfb      	adds	r3, r7, #3
 8000482:	7812      	ldrb	r2, [r2, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	429a      	cmp	r2, r3
 8000488:	d3e6      	bcc.n	8000458 <LIN_Check_Sum+0x28>
    }
    ckm = chm1 / 256;
 800048a:	210c      	movs	r1, #12
 800048c:	187b      	adds	r3, r7, r1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29a      	uxth	r2, r3
 8000494:	200b      	movs	r0, #11
 8000496:	183b      	adds	r3, r7, r0
 8000498:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b2d9      	uxtb	r1, r3
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	183a      	adds	r2, r7, r0
 80004a4:	7812      	ldrb	r2, [r2, #0]
 80004a6:	188a      	adds	r2, r1, r2
 80004a8:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	0001      	movs	r1, r0
 80004ae:	183a      	adds	r2, r7, r0
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	701a      	strb	r2, [r3, #0]
    return ckm;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	781b      	ldrb	r3, [r3, #0]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LIN_Check_Sum_En>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum_En(uint8_t *buf, uint8_t lens)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 80004d0:	230b      	movs	r3, #11
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 80004d8:	230c      	movs	r3, #12
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e011      	b.n	800050e <LIN_Check_Sum_En+0x4c>
    {
        chm1 += *(buf+i);
 80004ea:	200f      	movs	r0, #15
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	220c      	movs	r2, #12
 80004fa:	18bb      	adds	r3, r7, r2
 80004fc:	18ba      	adds	r2, r7, r2
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	188a      	adds	r2, r1, r2
 8000502:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 8000504:	183b      	adds	r3, r7, r0
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	183b      	adds	r3, r7, r0
 800050a:	3201      	adds	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	230f      	movs	r3, #15
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3e6      	bcc.n	80004ea <LIN_Check_Sum_En+0x28>
    }
    ckm = chm1 / 256;
 800051c:	210c      	movs	r1, #12
 800051e:	187b      	adds	r3, r7, r1
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29a      	uxth	r2, r3
 8000526:	200b      	movs	r0, #11
 8000528:	183b      	adds	r3, r7, r0
 800052a:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	183b      	adds	r3, r7, r0
 8000534:	183a      	adds	r2, r7, r0
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	188a      	adds	r2, r1, r2
 800053a:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 800053c:	183b      	adds	r3, r7, r0
 800053e:	0001      	movs	r1, r0
 8000540:	183a      	adds	r2, r7, r0
 8000542:	7812      	ldrb	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
    return ckm;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	781b      	ldrb	r3, [r3, #0]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}

08000554 <LIN_Tx_PID_Data>:
			       CK_Mode: 校验类型增强型LIN_CK_ENHANCED=1：基本LIN_CK_STANDARD=0
             Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID_Data(UART_HandleTypeDef *huart, uint8_t *buf, uint8_t lens, LIN_CK_Mode CK_Mode)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	0019      	movs	r1, r3
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
    if(CK_Mode == LIN_CK_STANDARD)
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10d      	bne.n	800058e <LIN_Tx_PID_Data+0x3a>
    {
    	//arr[i] = *(arr + i)
		//计算标准型校验码，不计算PID
		*(buf + lens) = LIN_Check_Sum(buf, lens);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	18d4      	adds	r4, r2, r3
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff54 	bl	8000430 <LIN_Check_Sum>
 8000588:	0003      	movs	r3, r0
 800058a:	7023      	strb	r3, [r4, #0]
 800058c:	e00c      	b.n	80005a8 <LIN_Tx_PID_Data+0x54>
    }
    else
    {
    	//计算增强型校验码,连PID一起校验
		*(buf + lens) = LIN_Check_Sum_En(buf, lens);
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	18d4      	adds	r4, r2, r3
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff8f 	bl	80004c2 <LIN_Check_Sum_En>
 80005a4:	0003      	movs	r3, r0
 80005a6:	7023      	strb	r3, [r4, #0]
    }

    //发送同步间隔段
	HAL_LIN_SendBreak(huart);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 fb23 	bl	8002bf6 <HAL_LIN_SendBreak>
	//发送同步段
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005b0:	2301      	movs	r3, #1
 80005b2:	425b      	negs	r3, r3
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <LIN_Tx_PID_Data+0x80>)
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	2201      	movs	r2, #1
 80005ba:	f001 feef 	bl	800239c <HAL_UART_Transmit>
	//发送PID,数据内容和校验
	HAL_UART_Transmit(huart,buf,LIN_TX_MAXSIZE,HAL_MAX_DELAY);
 80005be:	2301      	movs	r3, #1
 80005c0:	425b      	negs	r3, r3
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	220a      	movs	r2, #10
 80005c8:	f001 fee8 	bl	800239c <HAL_UART_Transmit>
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b005      	add	sp, #20
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	20000000 	.word	0x20000000

080005d8 <LIN_Tx_PID>:
** 功能描述: LIN发送报文头，PID，读取从机状态信息
** 参    数: PID, Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID(UART_HandleTypeDef *huart, uint8_t PID)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	000a      	movs	r2, r1
 80005e2:	1cfb      	adds	r3, r7, #3
 80005e4:	701a      	strb	r2, [r3, #0]
	//发送间隔帧
	HAL_LIN_SendBreak(huart);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 fb04 	bl	8002bf6 <HAL_LIN_SendBreak>
	//发送同步帧
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005ee:	2301      	movs	r3, #1
 80005f0:	425b      	negs	r3, r3
 80005f2:	4908      	ldr	r1, [pc, #32]	; (8000614 <LIN_Tx_PID+0x3c>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	f001 fed0 	bl	800239c <HAL_UART_Transmit>
	HAL_UART_Transmit(huart,&PID,1,HAL_MAX_DELAY);
 80005fc:	2301      	movs	r3, #1
 80005fe:	425b      	negs	r3, r3
 8000600:	1cf9      	adds	r1, r7, #3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	f001 fec9 	bl	800239c <HAL_UART_Transmit>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000000 	.word	0x20000000

08000618 <Send_Resp_Data>:

/**
 * 设置返回给RS232上位机的数据
 */
void Send_Resp_Data(uint8_t* pBuff,uint16_t data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	000a      	movs	r2, r1
 8000622:	1cbb      	adds	r3, r7, #2
 8000624:	801a      	strh	r2, [r3, #0]
	*pBuff = data >> 8;
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	b29b      	uxth	r3, r3
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	701a      	strb	r2, [r3, #0]
	*(pBuff + 1) = data;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	1cba      	adds	r2, r7, #2
 800063a:	8812      	ldrh	r2, [r2, #0]
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,pBuff,sizeof(data),HAL_MAX_DELAY);
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <Send_Resp_Data+0x44>)
 8000648:	2202      	movs	r2, #2
 800064a:	f001 fea7 	bl	800239c <HAL_UART_Transmit>
	LIN_Read_Flag = DISABLE;
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <Send_Resp_Data+0x48>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000e0 	.word	0x200000e0
 8000660:	20000044 	.word	0x20000044

08000664 <LIN_Data_Process>:

/**
 * 数据处理函数
 */
void LIN_Data_Process()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	LIN_Read_Flag = ENABLE;
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <LIN_Data_Process+0x138>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
	uint8_t RS232_Resp_Result[2] = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]
	uint16_t EXV_Run_Step = 0;
 8000676:	1dbb      	adds	r3, r7, #6
 8000678:	2200      	movs	r2, #0
 800067a:	801a      	strh	r2, [r3, #0]
	if(pLINRxBuff[2] == EXV_F_RESP_ERROR)
 800067c:	4b48      	ldr	r3, [pc, #288]	; (80007a0 <LIN_Data_Process+0x13c>)
 800067e:	789b      	ldrb	r3, [r3, #2]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d106      	bne.n	8000692 <LIN_Data_Process+0x2e>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_LIN_COMM_ERROR);
 8000684:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <LIN_Data_Process+0x140>)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff ffc4 	bl	8000618 <Send_Resp_Data>
 8000690:	e077      	b.n	8000782 <LIN_Data_Process+0x11e>
	}
	else if(pLINRxBuff[5] > 0)
 8000692:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <LIN_Data_Process+0x13c>)
 8000694:	795b      	ldrb	r3, [r3, #5]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d02b      	beq.n	80006f2 <LIN_Data_Process+0x8e>
	{
		switch(pLINRxBuff[5])
 800069a:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <LIN_Data_Process+0x13c>)
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d020      	beq.n	80006e4 <LIN_Data_Process+0x80>
 80006a2:	dd00      	ble.n	80006a6 <LIN_Data_Process+0x42>
 80006a4:	e06d      	b.n	8000782 <LIN_Data_Process+0x11e>
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d014      	beq.n	80006d4 <LIN_Data_Process+0x70>
 80006aa:	dd00      	ble.n	80006ae <LIN_Data_Process+0x4a>
 80006ac:	e069      	b.n	8000782 <LIN_Data_Process+0x11e>
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d002      	beq.n	80006b8 <LIN_Data_Process+0x54>
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d007      	beq.n	80006c6 <LIN_Data_Process+0x62>
 80006b6:	e064      	b.n	8000782 <LIN_Data_Process+0x11e>
		{
		case EXV_ST_FAULT_SHORTED:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_SHORT);
 80006b8:	4a3b      	ldr	r2, [pc, #236]	; (80007a8 <LIN_Data_Process+0x144>)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ffaa 	bl	8000618 <Send_Resp_Data>
			break;
 80006c4:	e05d      	b.n	8000782 <LIN_Data_Process+0x11e>
		case EXV_ST_FAULT_OPENLOAD:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_LOADOPEN);
 80006c6:	4a39      	ldr	r2, [pc, #228]	; (80007ac <LIN_Data_Process+0x148>)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff ffa3 	bl	8000618 <Send_Resp_Data>
			break;
 80006d2:	e056      	b.n	8000782 <LIN_Data_Process+0x11e>
		case EXV_ST_FAULT_OVERTEMP:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_SHUTDOWN);
 80006d4:	23e2      	movs	r3, #226	; 0xe2
 80006d6:	009a      	lsls	r2, r3, #2
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff9b 	bl	8000618 <Send_Resp_Data>
			break;
 80006e2:	e04e      	b.n	8000782 <LIN_Data_Process+0x11e>
		case EXV_ST_FAULT_ACTUATORFAULT:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ACTUATOR_FAULT);
 80006e4:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <LIN_Data_Process+0x14c>)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff94 	bl	8000618 <Send_Resp_Data>
			break;
 80006f0:	e047      	b.n	8000782 <LIN_Data_Process+0x11e>
		}
	}
	else if(pLINRxBuff[6] > 0)
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <LIN_Data_Process+0x13c>)
 80006f4:	799b      	ldrb	r3, [r3, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d014      	beq.n	8000724 <LIN_Data_Process+0xc0>
	{
		switch(pLINRxBuff[6])
 80006fa:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <LIN_Data_Process+0x13c>)
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d002      	beq.n	8000708 <LIN_Data_Process+0xa4>
 8000702:	2b02      	cmp	r3, #2
 8000704:	d007      	beq.n	8000716 <LIN_Data_Process+0xb2>
 8000706:	e03c      	b.n	8000782 <LIN_Data_Process+0x11e>
		{
		case EXV_ST_VOLTAGE_OVER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVER_VOLTAGE);
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <LIN_Data_Process+0x150>)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ff82 	bl	8000618 <Send_Resp_Data>
			break;
 8000714:	e035      	b.n	8000782 <LIN_Data_Process+0x11e>
		case EXV_ST_VOLTAGE_UNDER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_UNDER_VOLTAGE);
 8000716:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <LIN_Data_Process+0x154>)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ff7b 	bl	8000618 <Send_Resp_Data>
			break;
 8000722:	e02e      	b.n	8000782 <LIN_Data_Process+0x11e>
		}
	}
	else if(pLINRxBuff[7] == EXV_OVERTEMP_OVER)
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <LIN_Data_Process+0x13c>)
 8000726:	79db      	ldrb	r3, [r3, #7]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d107      	bne.n	800073c <LIN_Data_Process+0xd8>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVERTEMP);
 800072c:	23e3      	movs	r3, #227	; 0xe3
 800072e:	009a      	lsls	r2, r3, #2
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff6f 	bl	8000618 <Send_Resp_Data>
 800073a:	e022      	b.n	8000782 <LIN_Data_Process+0x11e>
	}
	else if(pLINRxBuff[3] == EXV_ST_RUN_NOT_MOVE)
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <LIN_Data_Process+0x13c>)
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d11e      	bne.n	8000782 <LIN_Data_Process+0x11e>
	{
		EXV_Run_Step = (pLINRxBuff[9] << 8) | pLINRxBuff[8];
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <LIN_Data_Process+0x13c>)
 8000746:	7a5b      	ldrb	r3, [r3, #9]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <LIN_Data_Process+0x13c>)
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	801a      	strh	r2, [r3, #0]
		if(EXV_Run_Step == EXV_Test_Step)
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <LIN_Data_Process+0x158>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	1dba      	adds	r2, r7, #6
 8000760:	8812      	ldrh	r2, [r2, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d107      	bne.n	8000776 <LIN_Data_Process+0x112>
		{
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OK);
 8000766:	23e1      	movs	r3, #225	; 0xe1
 8000768:	009a      	lsls	r2, r3, #2
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ff52 	bl	8000618 <Send_Resp_Data>
 8000774:	e005      	b.n	8000782 <LIN_Data_Process+0x11e>
		}
		else
		{
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ERROR);
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <LIN_Data_Process+0x15c>)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ff4b 	bl	8000618 <Send_Resp_Data>
		}
	}
	if(LIN_Read_Flag)
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <LIN_Data_Process+0x138>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d004      	beq.n	8000794 <LIN_Data_Process+0x130>
	{
		LIN_Tx_PID(&huart1, LIN_PID_35_0x23);
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <LIN_Data_Process+0x160>)
 800078c:	21a3      	movs	r1, #163	; 0xa3
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff22 	bl	80005d8 <LIN_Tx_PID>
	}
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000044 	.word	0x20000044
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	00000385 	.word	0x00000385
 80007a8:	00000386 	.word	0x00000386
 80007ac:	00000387 	.word	0x00000387
 80007b0:	00000389 	.word	0x00000389
 80007b4:	0000038a 	.word	0x0000038a
 80007b8:	0000038b 	.word	0x0000038b
 80007bc:	20000042 	.word	0x20000042
 80007c0:	0000038d 	.word	0x0000038d
 80007c4:	2000004c 	.word	0x2000004c

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fb32 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f814 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff fe0a 	bl	80003ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 f9ac 	bl	8000b34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 f9f8 	bl	8000bd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //开启中断接收
  Util_Receive_IT(&huart1);
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <main+0x2c>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f852 	bl	800088c <Util_Receive_IT>
  Util_Receive_IT(&huart2);
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <main+0x30>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f84e 	bl	800088c <Util_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x28>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	2000004c 	.word	0x2000004c
 80007f8:	200000e0 	.word	0x200000e0

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b093      	sub	sp, #76	; 0x4c
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fd17 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	2310      	movs	r3, #16
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 fd10 	bl	8004240 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	0018      	movs	r0, r3
 8000826:	f000 feaf 	bl	8001588 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2202      	movs	r2, #2
 800082e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0052      	lsls	r2, r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2240      	movs	r2, #64	; 0x40
 8000842:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	193b      	adds	r3, r7, r4
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fee7 	bl	8001620 <HAL_RCC_OscConfig>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000856:	f000 f895 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f9e2 	bl	8001c40 <HAL_RCC_ClockConfig>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000880:	f000 f880 	bl	8000984 <Error_Handler>
  }
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b013      	add	sp, #76	; 0x4c
 800088a:	bd90      	pop	{r4, r7, pc}

0800088c <Util_Receive_IT>:
/* USER CODE BEGIN 4 */
/**
 * 重写接收中断函数
 */
void Util_Receive_IT(UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <Util_Receive_IT+0x4c>)
 8000898:	429a      	cmp	r2, r3
 800089a:	d10a      	bne.n	80008b2 <Util_Receive_IT+0x26>
	{
		if(HAL_UART_Receive_IT(huart, pLINRxBuff, LIN_RX_MAXSIZE) != HAL_OK)
 800089c:	490f      	ldr	r1, [pc, #60]	; (80008dc <Util_Receive_IT+0x50>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	220b      	movs	r2, #11
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fe16 	bl	80024d4 <HAL_UART_Receive_IT>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d010      	beq.n	80008ce <Util_Receive_IT+0x42>
		{
			Error_Handler();
 80008ac:	f000 f86a 	bl	8000984 <Error_Handler>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 80008b0:	e00d      	b.n	80008ce <Util_Receive_IT+0x42>
	else if(huart == &huart2)
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <Util_Receive_IT+0x54>)
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d109      	bne.n	80008ce <Util_Receive_IT+0x42>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
 80008ba:	490a      	ldr	r1, [pc, #40]	; (80008e4 <Util_Receive_IT+0x58>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2202      	movs	r2, #2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fe07 	bl	80024d4 <HAL_UART_Receive_IT>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <Util_Receive_IT+0x42>
			Error_Handler();
 80008ca:	f000 f85b 	bl	8000984 <Error_Handler>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	2000004c 	.word	0x2000004c
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	200000e0 	.word	0x200000e0
 80008e4:	20000048 	.word	0x20000048

080008e8 <HAL_UART_RxCpltCallback>:
 * @brief Rx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	//LIN协议
	if(huart == &huart1)
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_UART_RxCpltCallback+0x40>)
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d102      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x16>
	{
		LIN_Data_Process();
 80008f8:	f7ff feb4 	bl	8000664 <LIN_Data_Process>
 80008fc:	e00c      	b.n	8000918 <HAL_UART_RxCpltCallback+0x30>
	}
	//RS232协议
	else if(huart == &huart2)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_UART_RxCpltCallback+0x44>)
 8000902:	429a      	cmp	r2, r3
 8000904:	d108      	bne.n	8000918 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Transmit(&huart2, pRS232RxBuff, RS232_MAXSIZE, HAL_MAX_DELAY);
 8000906:	2301      	movs	r3, #1
 8000908:	425b      	negs	r3, r3
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <HAL_UART_RxCpltCallback+0x48>)
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <HAL_UART_RxCpltCallback+0x44>)
 800090e:	2202      	movs	r2, #2
 8000910:	f001 fd44 	bl	800239c <HAL_UART_Transmit>
		RS232_Data_Process();
 8000914:	f000 f83c 	bl	8000990 <RS232_Data_Process>
	}
	Util_Receive_IT(huart);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff ffb6 	bl	800088c <Util_Receive_IT>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000004c 	.word	0x2000004c
 800092c:	200000e0 	.word	0x200000e0
 8000930:	20000048 	.word	0x20000048

08000934 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	//解决串口溢出，导致不断进入串口中断函数，使MCU过载的问题
	if(HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	0018      	movs	r0, r3
 8000940:	f002 f981 	bl	8002c46 <HAL_UART_GetError>
 8000944:	0003      	movs	r3, r0
 8000946:	2208      	movs	r2, #8
 8000948:	4013      	ands	r3, r2
 800094a:	d017      	beq.n	800097c <HAL_UART_ErrorCallback+0x48>
	{
		//清除ORE标志位
		__HAL_UART_FLUSH_DRREGISTER(huart);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	699a      	ldr	r2, [r3, #24]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2108      	movs	r1, #8
 8000958:	430a      	orrs	r2, r1
 800095a:	619a      	str	r2, [r3, #24]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2110      	movs	r1, #16
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
		Util_Receive_IT(huart);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff8c 	bl	800088c <Util_Receive_IT>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2290      	movs	r2, #144	; 0x90
 8000978:	2100      	movs	r1, #0
 800097a:	5099      	str	r1, [r3, r2]
	}
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <RS232_Data_Process>:

/**
 * 数据处理函数
 */
void RS232_Data_Process()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	uint8_t index = 0;
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
	EXV_Test_Step = (pRS232RxBuff[0] << 8) | pRS232RxBuff[1];
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <RS232_Data_Process+0xd8>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <RS232_Data_Process+0xd8>)
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <RS232_Data_Process+0xdc>)
 80009b2:	801a      	strh	r2, [r3, #0]
	pLINTxBuff[index++] = LIN_PID_52_0x34;
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	1dfa      	adds	r2, r7, #7
 80009ba:	1c59      	adds	r1, r3, #1
 80009bc:	7011      	strb	r1, [r2, #0]
 80009be:	001a      	movs	r2, r3
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <RS232_Data_Process+0xe0>)
 80009c2:	21b4      	movs	r1, #180	; 0xb4
 80009c4:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = pRS232RxBuff[1];
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	1c59      	adds	r1, r3, #1
 80009ce:	7011      	strb	r1, [r2, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <RS232_Data_Process+0xd8>)
 80009d4:	7859      	ldrb	r1, [r3, #1]
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <RS232_Data_Process+0xe0>)
 80009d8:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = pRS232RxBuff[0];
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	1c59      	adds	r1, r3, #1
 80009e2:	7011      	strb	r1, [r2, #0]
 80009e4:	001a      	movs	r2, r3
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <RS232_Data_Process+0xd8>)
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <RS232_Data_Process+0xe0>)
 80009ec:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = EXV_MOVE_CMD;
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	1c59      	adds	r1, r3, #1
 80009f6:	7011      	strb	r1, [r2, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <RS232_Data_Process+0xe0>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = EXV_INIT_NO_REQ;
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	1dfa      	adds	r2, r7, #7
 8000a06:	1c59      	adds	r1, r3, #1
 8000a08:	7011      	strb	r1, [r2, #0]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <RS232_Data_Process+0xe0>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	5499      	strb	r1, [r3, r2]
	while(index < LIN_TX_MAXSIZE - 1)
 8000a12:	e008      	b.n	8000a26 <RS232_Data_Process+0x96>
	{
		pLINTxBuff[index++] = 0xFF;
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	1dfa      	adds	r2, r7, #7
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	7011      	strb	r1, [r2, #0]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <RS232_Data_Process+0xe0>)
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	5499      	strb	r1, [r3, r2]
	while(index < LIN_TX_MAXSIZE - 1)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	d9f2      	bls.n	8000a14 <RS232_Data_Process+0x84>
	}
	LIN_Tx_PID_Data(&huart1,pLINTxBuff,index,LIN_CK_ENHANCED);
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	490f      	ldr	r1, [pc, #60]	; (8000a70 <RS232_Data_Process+0xe0>)
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <RS232_Data_Process+0xe4>)
 8000a36:	2301      	movs	r3, #1
 8000a38:	f7ff fd8c 	bl	8000554 <LIN_Tx_PID_Data>
	LIN_Tx_PID(&huart1, LIN_PID_35_0x23);
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <RS232_Data_Process+0xe4>)
 8000a3e:	21a3      	movs	r1, #163	; 0xa3
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fdc9 	bl	80005d8 <LIN_Tx_PID>
	memset(pLINTxBuff,0,LIN_TX_MAXSIZE);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <RS232_Data_Process+0xe0>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 fbf7 	bl	8004240 <memset>
	memset(pRS232RxBuff,0,RS232_MAXSIZE);
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <RS232_Data_Process+0xd8>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	2100      	movs	r1, #0
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f003 fbf1 	bl	8004240 <memset>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000048 	.word	0x20000048
 8000a6c:	20000042 	.word	0x20000042
 8000a70:	20000038 	.word	0x20000038
 8000a74:	2000004c 	.word	0x2000004c

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0549      	lsls	r1, r1, #21
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	055b      	lsls	r3, r3, #21
 8000aac:	4013      	ands	r3, r2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000ab2:	23c0      	movs	r3, #192	; 0xc0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fa42 	bl	8000f40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fa0c 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <USART1_IRQHandler+0x14>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fd40 	bl	8002584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	2000004c 	.word	0x2000004c

08000b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <USART2_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fd34 	bl	8002584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <MX_USART1_UART_Init+0x98>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b40:	2296      	movs	r2, #150	; 0x96
 8000b42:	01d2      	lsls	r2, r2, #7
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fb91 	bl	80022a8 <HAL_LIN_Init>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f7ff fefb 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 fa50 	bl	8004038 <HAL_UARTEx_SetTxFifoThreshold>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000b9c:	f7ff fef2 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f003 fa87 	bl	80040b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000bae:	f7ff fee9 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f003 fa05 	bl	8003fc4 <HAL_UARTEx_DisableFifoMode>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f7ff fee1 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000004c 	.word	0x2000004c
 8000bcc:	40013800 	.word	0x40013800

08000bd0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <MX_USART2_UART_Init+0x98>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	0252      	lsls	r2, r2, #9
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 faee 	bl	80021fc <HAL_UART_Init>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c24:	f7ff feae 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f003 fa03 	bl	8004038 <HAL_UARTEx_SetTxFifoThreshold>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c36:	f7ff fea5 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f003 fa3a 	bl	80040b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c48:	f7ff fe9c 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 f9b8 	bl	8003fc4 <HAL_UARTEx_DisableFifoMode>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c58:	f7ff fe94 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	200000e0 	.word	0x200000e0
 8000c68:	40004400 	.word	0x40004400

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b093      	sub	sp, #76	; 0x4c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	2334      	movs	r3, #52	; 0x34
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 fade 	bl	8004240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	2418      	movs	r4, #24
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	231c      	movs	r3, #28
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f003 fad6 	bl	8004240 <memset>
  if(uartHandle->Instance==USART1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_UART_MspInit+0x164>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d146      	bne.n	8000d2c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 f971 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff fe65 	bl	8000984 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	01c9      	lsls	r1, r1, #7
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc8:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	01db      	lsls	r3, r3, #7
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000cdc:	2104      	movs	r1, #4
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cee:	2134      	movs	r1, #52	; 0x34
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d12:	0019      	movs	r1, r3
 8000d14:	0010      	movs	r0, r2
 8000d16:	f000 fad3 	bl	80012c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201b      	movs	r0, #27
 8000d20:	f000 f9d0 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d24:	201b      	movs	r0, #27
 8000d26:	f000 f9e2 	bl	80010ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d2a:	e04c      	b.n	8000dc6 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_UART_MspInit+0x170>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d147      	bne.n	8000dc6 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d36:	2118      	movs	r1, #24
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 f924 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000d50:	f7ff fe18 	bl	8000984 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	0289      	lsls	r1, r1, #10
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	029b      	lsls	r3, r3, #10
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	2201      	movs	r2, #1
 8000d82:	4013      	ands	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d88:	2134      	movs	r1, #52	; 0x34
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	23a0      	movs	r3, #160	; 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fa85 	bl	80012c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	201c      	movs	r0, #28
 8000dbc:	f000 f982 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc0:	201c      	movs	r0, #28
 8000dc2:	f000 f994 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b013      	add	sp, #76	; 0x4c
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	50000800 	.word	0x50000800
 8000ddc:	40004400 	.word	0x40004400

08000de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de4:	f7ff fea0 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0e:	f003 f9f3 	bl	80041f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e12:	f7ff fcd9 	bl	80007c8 <main>

08000e16 <LoopForever>:

LoopForever:
  b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   r0, =_estack
 8000e18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e24:	080042f8 	.word	0x080042f8
  ldr r2, =_sbss
 8000e28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e2c:	20000178 	.word	0x20000178

08000e30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x3c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Init+0x3c>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0049      	lsls	r1, r1, #1
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f810 	bl	8000e74 <HAL_InitTick>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e001      	b.n	8000e64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe0a 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_InitTick+0x88>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d02b      	beq.n	8000ee4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_InitTick+0x8c>)
 8000e8e:	681c      	ldr	r4, [r3, #0]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_InitTick+0x88>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	0019      	movs	r1, r3
 8000e96:	23fa      	movs	r3, #250	; 0xfa
 8000e98:	0098      	lsls	r0, r3, #2
 8000e9a:	f7ff f931 	bl	8000100 <__udivsi3>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	0020      	movs	r0, r4
 8000ea4:	f7ff f92c 	bl	8000100 <__udivsi3>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f92f 	bl	800110e <HAL_SYSTICK_Config>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d112      	bne.n	8000eda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d80a      	bhi.n	8000ed0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	425b      	negs	r3, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f8fe 	bl	80010c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_InitTick+0x90>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e00d      	b.n	8000eec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e008      	b.n	8000eec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eda:	230f      	movs	r3, #15
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e003      	b.n	8000eec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b005      	add	sp, #20
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	20000004 	.word	0x20000004
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x1c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	001a      	movs	r2, r3
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x20>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	18d2      	adds	r2, r2, r3
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_IncTick+0x20>)
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	20000174 	.word	0x20000174

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <HAL_GetTick+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	20000174 	.word	0x20000174

08000f40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40010000 	.word	0x40010000
 8000f68:	fffff9ff 	.word	0xfffff9ff

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0002      	movs	r2, r0
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7e:	d809      	bhi.n	8000f94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	231f      	movs	r3, #31
 8000f88:	401a      	ands	r2, r3
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_EnableIRQ+0x30>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4091      	lsls	r1, r2
 8000f90:	000a      	movs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb4:	d828      	bhi.n	8001008 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb6:	4a2f      	ldr	r2, [pc, #188]	; (8001074 <__NVIC_SetPriority+0xd4>)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	33c0      	adds	r3, #192	; 0xc0
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	589b      	ldr	r3, [r3, r2]
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	0011      	movs	r1, r2
 8000fcc:	2203      	movs	r2, #3
 8000fce:	400a      	ands	r2, r1
 8000fd0:	00d2      	lsls	r2, r2, #3
 8000fd2:	21ff      	movs	r1, #255	; 0xff
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	43d2      	mvns	r2, r2
 8000fda:	401a      	ands	r2, r3
 8000fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	2303      	movs	r3, #3
 8000fee:	4003      	ands	r3, r0
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	481f      	ldr	r0, [pc, #124]	; (8001074 <__NVIC_SetPriority+0xd4>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	430a      	orrs	r2, r1
 8001000:	33c0      	adds	r3, #192	; 0xc0
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001006:	e031      	b.n	800106c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <__NVIC_SetPriority+0xd8>)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	0019      	movs	r1, r3
 8001010:	230f      	movs	r3, #15
 8001012:	400b      	ands	r3, r1
 8001014:	3b08      	subs	r3, #8
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3306      	adds	r3, #6
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	3304      	adds	r3, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	0011      	movs	r1, r2
 8001028:	2203      	movs	r2, #3
 800102a:	400a      	ands	r2, r1
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	21ff      	movs	r1, #255	; 0xff
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	43d2      	mvns	r2, r2
 8001036:	401a      	ands	r2, r3
 8001038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	401a      	ands	r2, r3
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	2303      	movs	r3, #3
 800104a:	4003      	ands	r3, r0
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	001c      	movs	r4, r3
 8001058:	230f      	movs	r3, #15
 800105a:	4023      	ands	r3, r4
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	430a      	orrs	r2, r1
 8001062:	3306      	adds	r3, #6
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	18c3      	adds	r3, r0, r3
 8001068:	3304      	adds	r3, #4
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b003      	add	sp, #12
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	045b      	lsls	r3, r3, #17
 800108c:	429a      	cmp	r2, r3
 800108e:	d301      	bcc.n	8001094 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001090:	2301      	movs	r3, #1
 8001092:	e010      	b.n	80010b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <SysTick_Config+0x44>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	3a01      	subs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109c:	2301      	movs	r3, #1
 800109e:	425b      	negs	r3, r3
 80010a0:	2103      	movs	r1, #3
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff ff7c 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x44>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x44>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	210f      	movs	r1, #15
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	1c02      	adds	r2, r0, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	0002      	movs	r2, r0
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ff33 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ffaf 	bl	800107c <SysTick_Config>
 800111e:	0003      	movs	r3, r0
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e050      	b.n	80011dc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2225      	movs	r2, #37	; 0x25
 800113e:	5c9b      	ldrb	r3, [r3, r2]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d008      	beq.n	8001158 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2204      	movs	r2, #4
 800114a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e041      	b.n	80011dc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	210e      	movs	r1, #14
 8001164:	438a      	bics	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	491c      	ldr	r1, [pc, #112]	; (80011e4 <HAL_DMA_Abort+0xbc>)
 8001174:	400a      	ands	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_DMA_Abort+0xc0>)
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	221c      	movs	r2, #28
 8001192:	4013      	ands	r3, r2
 8001194:	2201      	movs	r2, #1
 8001196:	409a      	lsls	r2, r3
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_DMA_Abort+0xc0>)
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00c      	beq.n	80011ca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ba:	490a      	ldr	r1, [pc, #40]	; (80011e4 <HAL_DMA_Abort+0xbc>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2225      	movs	r2, #37	; 0x25
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2224      	movs	r2, #36	; 0x24
 80011d6:	2100      	movs	r1, #0
 80011d8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	fffffeff 	.word	0xfffffeff
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	210f      	movs	r1, #15
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2225      	movs	r2, #37	; 0x25
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d006      	beq.n	8001216 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2204      	movs	r2, #4
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e049      	b.n	80012aa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	210e      	movs	r1, #14
 8001222:	438a      	bics	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	491d      	ldr	r1, [pc, #116]	; (80012b8 <HAL_DMA_Abort_IT+0xcc>)
 8001242:	400a      	ands	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_DMA_Abort_IT+0xd0>)
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	221c      	movs	r2, #28
 8001250:	4013      	ands	r3, r2
 8001252:	2201      	movs	r2, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_DMA_Abort_IT+0xd0>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00c      	beq.n	8001288 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001278:	490f      	ldr	r1, [pc, #60]	; (80012b8 <HAL_DMA_Abort_IT+0xcc>)
 800127a:	400a      	ands	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2225      	movs	r2, #37	; 0x25
 800128c:	2101      	movs	r1, #1
 800128e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2224      	movs	r2, #36	; 0x24
 8001294:	2100      	movs	r1, #0
 8001296:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	0010      	movs	r0, r2
 80012a8:	4798      	blx	r3
    }
  }
  return status;
 80012aa:	230f      	movs	r3, #15
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	fffffeff 	.word	0xfffffeff
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e147      	b.n	8001560 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <HAL_GPIO_Init+0x28>
 80012e6:	e138      	b.n	800155a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	2201      	movs	r2, #1
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	4013      	ands	r3, r2
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	58d3      	ldr	r3, [r2, r3]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2207      	movs	r2, #7
 80013bc:	4013      	ands	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2107      	movs	r1, #7
 80013d6:	400b      	ands	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	401a      	ands	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	23c0      	movs	r3, #192	; 0xc0
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_GPIO_Init+0x174>
 8001432:	e092      	b.n	800155a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3318      	adds	r3, #24
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	589b      	ldr	r3, [r3, r2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2203      	movs	r2, #3
 8001446:	4013      	ands	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	220f      	movs	r2, #15
 800144c:	409a      	lsls	r2, r3
 800144e:	0013      	movs	r3, r2
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	429a      	cmp	r2, r3
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x1ca>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a45      	ldr	r2, [pc, #276]	; (800157c <HAL_GPIO_Init+0x2bc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x1c6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a44      	ldr	r2, [pc, #272]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x1c2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a43      	ldr	r2, [pc, #268]	; (8001584 <HAL_GPIO_Init+0x2c4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x1be>
 800147a:	2303      	movs	r3, #3
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x1cc>
 800147e:	2305      	movs	r3, #5
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x1cc>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x1cc>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x1cc>
 800148a:	2300      	movs	r3, #0
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	2103      	movs	r1, #3
 8001490:	400a      	ands	r2, r1
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	4093      	lsls	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800149c:	4936      	ldr	r1, [pc, #216]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3318      	adds	r3, #24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	035b      	lsls	r3, r3, #13
 80014c2:	4013      	ands	r3, r2
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	039b      	lsls	r3, r3, #14
 80014ec:	4013      	ands	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 8001500:	2384      	movs	r3, #132	; 0x84
 8001502:	58d3      	ldr	r3, [r2, r3]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	029b      	lsls	r3, r3, #10
 8001518:	4013      	ands	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001524:	4914      	ldr	r1, [pc, #80]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 8001526:	2284      	movs	r2, #132	; 0x84
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	58d3      	ldr	r3, [r2, r3]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	4013      	ands	r3, r2
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001552:	4909      	ldr	r1, [pc, #36]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	40da      	lsrs	r2, r3
 8001568:	1e13      	subs	r3, r2, #0
 800156a:	d000      	beq.n	800156e <HAL_GPIO_Init+0x2ae>
 800156c:	e6b0      	b.n	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b006      	add	sp, #24
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021800 	.word	0x40021800
 800157c:	50000400 	.word	0x50000400
 8001580:	50000800 	.word	0x50000800
 8001584:	50000c00 	.word	0x50000c00

08001588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d11f      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0013      	movs	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	189b      	adds	r3, r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4912      	ldr	r1, [pc, #72]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7fe fda0 	bl	8000100 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c6:	e008      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e001      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e009      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	401a      	ands	r2, r3
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d0ed      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40007000 	.word	0x40007000
 80015fc:	fffff9ff 	.word	0xfffff9ff
 8001600:	20000004 	.word	0x20000004
 8001604:	000f4240 	.word	0x000f4240

08001608 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <LL_RCC_GetAPB1Prescaler+0x14>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	23e0      	movs	r3, #224	; 0xe0
 8001612:	01db      	lsls	r3, r3, #7
 8001614:	4013      	ands	r3, r2
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e2f3      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	d100      	bne.n	800163e <HAL_RCC_OscConfig+0x1e>
 800163c:	e07c      	b.n	8001738 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4bc3      	ldr	r3, [pc, #780]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2238      	movs	r2, #56	; 0x38
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	4bc0      	ldr	r3, [pc, #768]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2203      	movs	r2, #3
 800164e:	4013      	ands	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x3e>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d002      	beq.n	8001664 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d10b      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	4bb9      	ldr	r3, [pc, #740]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	029b      	lsls	r3, r3, #10
 800166c:	4013      	ands	r3, r2
 800166e:	d062      	beq.n	8001736 <HAL_RCC_OscConfig+0x116>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d15e      	bne.n	8001736 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e2ce      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	025b      	lsls	r3, r3, #9
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x78>
 8001688:	4bb0      	ldr	r3, [pc, #704]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4baf      	ldr	r3, [pc, #700]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	0249      	lsls	r1, r1, #9
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e020      	b.n	80016da <HAL_RCC_OscConfig+0xba>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	02db      	lsls	r3, r3, #11
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10e      	bne.n	80016c2 <HAL_RCC_OscConfig+0xa2>
 80016a4:	4ba9      	ldr	r3, [pc, #676]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4ba8      	ldr	r3, [pc, #672]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	02c9      	lsls	r1, r1, #11
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	4ba6      	ldr	r3, [pc, #664]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4ba5      	ldr	r3, [pc, #660]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0249      	lsls	r1, r1, #9
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0xba>
 80016c2:	4ba2      	ldr	r3, [pc, #648]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4ba1      	ldr	r3, [pc, #644]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016c8:	49a1      	ldr	r1, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x330>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4b9f      	ldr	r3, [pc, #636]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b9e      	ldr	r3, [pc, #632]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	499f      	ldr	r1, [pc, #636]	; (8001954 <HAL_RCC_OscConfig+0x334>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d014      	beq.n	800170c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fc23 	bl	8000f2c <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc1e 	bl	8000f2c <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e28d      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fe:	4b93      	ldr	r3, [pc, #588]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xcc>
 800170a:	e015      	b.n	8001738 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fc0e 	bl	8000f2c <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001716:	f7ff fc09 	bl	8000f2c <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e278      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001728:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0xf6>
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d100      	bne.n	8001744 <HAL_RCC_OscConfig+0x124>
 8001742:	e099      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2238      	movs	r2, #56	; 0x38
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2203      	movs	r2, #3
 8001754:	4013      	ands	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x144>
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d002      	beq.n	800176a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d135      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176a:	4b78      	ldr	r3, [pc, #480]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4013      	ands	r3, r2
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x162>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e24b      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b72      	ldr	r3, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a74      	ldr	r2, [pc, #464]	; (8001958 <HAL_RCC_OscConfig+0x338>)
 8001788:	4013      	ands	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	021a      	lsls	r2, r3, #8
 8001792:	4b6e      	ldr	r3, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800179e:	4b6b      	ldr	r3, [pc, #428]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x33c>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	4b67      	ldr	r3, [pc, #412]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017b2:	4b66      	ldr	r3, [pc, #408]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	0adb      	lsrs	r3, r3, #11
 80017b8:	2207      	movs	r2, #7
 80017ba:	4013      	ands	r3, r2
 80017bc:	4a68      	ldr	r2, [pc, #416]	; (8001960 <HAL_RCC_OscConfig+0x340>)
 80017be:	40da      	lsrs	r2, r3
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x344>)
 80017c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x348>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fb53 	bl	8000e74 <HAL_InitTick>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d051      	beq.n	8001876 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e221      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d030      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017de:	4b5b      	ldr	r3, [pc, #364]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5e      	ldr	r2, [pc, #376]	; (800195c <HAL_RCC_OscConfig+0x33c>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0049      	lsls	r1, r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb94 	bl	8000f2c <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fb8f 	bl	8000f2c <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1fe      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4013      	ands	r3, r2
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x338>)
 800182e:	4013      	ands	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	021a      	lsls	r2, r3, #8
 8001838:	4b44      	ldr	r3, [pc, #272]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001846:	4949      	ldr	r1, [pc, #292]	; (800196c <HAL_RCC_OscConfig+0x34c>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fb6e 	bl	8000f2c <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fb69 	bl	8000f2c <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1d8      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4013      	ands	r3, r2
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x236>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001876:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2208      	movs	r2, #8
 800187e:	4013      	ands	r3, r2
 8001880:	d047      	beq.n	8001912 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2238      	movs	r2, #56	; 0x38
 8001888:	4013      	ands	r3, r2
 800188a:	2b18      	cmp	r3, #24
 800188c:	d10a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x2f2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d138      	bne.n	8001912 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e1ba      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d019      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80018ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb38 	bl	8000f2c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fb33 	bl	8000f2c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a2      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f1      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2a2>
 80018de:	e018      	b.n	8001912 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80018e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb1e 	bl	8000f2c <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb19 	bl	8000f2c <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e188      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d1f1      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCC_OscConfig+0x2fe>
 800191c:	e0c6      	b.n	8001aac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	231f      	movs	r3, #31
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	4013      	ands	r3, r2
 800192e:	2b20      	cmp	r3, #32
 8001930:	d11e      	bne.n	8001970 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_OscConfig+0x32c>)
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x31e>
 800193c:	e0b6      	b.n	8001aac <HAL_RCC_OscConfig+0x48c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d000      	beq.n	8001948 <HAL_RCC_OscConfig+0x328>
 8001946:	e0b1      	b.n	8001aac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e166      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
 800194c:	40021000 	.word	0x40021000
 8001950:	fffeffff 	.word	0xfffeffff
 8001954:	fffbffff 	.word	0xfffbffff
 8001958:	ffff80ff 	.word	0xffff80ff
 800195c:	ffffc7ff 	.word	0xffffc7ff
 8001960:	00f42400 	.word	0x00f42400
 8001964:	20000004 	.word	0x20000004
 8001968:	20000008 	.word	0x20000008
 800196c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001970:	4bac      	ldr	r3, [pc, #688]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	055b      	lsls	r3, r3, #21
 8001978:	4013      	ands	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x360>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x362>
 8001980:	2300      	movs	r3, #0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d011      	beq.n	80019aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4ba7      	ldr	r3, [pc, #668]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198a:	4ba6      	ldr	r3, [pc, #664]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	0549      	lsls	r1, r1, #21
 8001990:	430a      	orrs	r2, r1
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
 8001994:	4ba3      	ldr	r3, [pc, #652]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	055b      	lsls	r3, r3, #21
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019a2:	231f      	movs	r3, #31
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	4b9f      	ldr	r3, [pc, #636]	; (8001c28 <HAL_RCC_OscConfig+0x608>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d11a      	bne.n	80019ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b6:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <HAL_RCC_OscConfig+0x608>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b9b      	ldr	r3, [pc, #620]	; (8001c28 <HAL_RCC_OscConfig+0x608>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0049      	lsls	r1, r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fab2 	bl	8000f2c <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff faad 	bl	8000f2c <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e11c      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <HAL_RCC_OscConfig+0x608>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3e2>
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 80019f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f8:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x41c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x404>
 8001a0a:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a0e:	4b85      	ldr	r3, [pc, #532]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a10:	2104      	movs	r1, #4
 8001a12:	430a      	orrs	r2, r1
 8001a14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a16:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a1a:	4b82      	ldr	r3, [pc, #520]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x41c>
 8001a24:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a28:	4b7e      	ldr	r3, [pc, #504]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a30:	4b7c      	ldr	r3, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a34:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a36:	2104      	movs	r1, #4
 8001a38:	438a      	bics	r2, r1
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d014      	beq.n	8001a6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa72 	bl	8000f2c <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa6d 	bl	8000f2c <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a74      	ldr	r2, [pc, #464]	; (8001c2c <HAL_RCC_OscConfig+0x60c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0db      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x42e>
 8001a6c:	e013      	b.n	8001a96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fa5d 	bl	8000f2c <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a76:	e009      	b.n	8001a8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fa58 	bl	8000f2c <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4a6a      	ldr	r2, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x60c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0c6      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a96:	231f      	movs	r3, #31
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa4:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001aa6:	4962      	ldr	r1, [pc, #392]	; (8001c30 <HAL_RCC_OscConfig+0x610>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x496>
 8001ab4:	e0b0      	b.n	8001c18 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2238      	movs	r2, #56	; 0x38
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4a4>
 8001ac2:	e078      	b.n	8001bb6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d153      	bne.n	8001b74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001ad2:	4958      	ldr	r1, [pc, #352]	; (8001c34 <HAL_RCC_OscConfig+0x614>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa28 	bl	8000f2c <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fa23 	bl	8000f2c <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e092      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	049b      	lsls	r3, r3, #18
 8001afc:	4013      	ands	r3, r2
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_RCC_OscConfig+0x618>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1a      	ldr	r2, [r3, #32]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	431a      	orrs	r2, r3
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0449      	lsls	r1, r1, #17
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0549      	lsls	r1, r1, #21
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f9ef 	bl	8000f2c <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f9ea 	bl	8000f2c <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e059      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	049b      	lsls	r3, r3, #18
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x534>
 8001b72:	e051      	b.n	8001c18 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b7a:	492e      	ldr	r1, [pc, #184]	; (8001c34 <HAL_RCC_OscConfig+0x614>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f9d4 	bl	8000f2c <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff f9cf 	bl	8000f2c <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e03e      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049b      	lsls	r3, r3, #18
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001bae:	4923      	ldr	r1, [pc, #140]	; (8001c3c <HAL_RCC_OscConfig+0x61c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e030      	b.n	8001c18 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02b      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x604>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11e      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2270      	movs	r2, #112	; 0x70
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d117      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	23fe      	movs	r3, #254	; 0xfe
 8001be8:	01db      	lsls	r3, r3, #7
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d10e      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	23f8      	movs	r3, #248	; 0xf8
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	0f5b      	lsrs	r3, r3, #29
 8001c0a:	075a      	lsls	r2, r3, #29
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b008      	add	sp, #32
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	efffffff 	.word	0xefffffff
 8001c34:	feffffff 	.word	0xfeffffff
 8001c38:	1fc1808c 	.word	0x1fc1808c
 8001c3c:	effefffc 	.word	0xeffefffc

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e9      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2207      	movs	r2, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d91e      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c74:	f7ff f95a 	bl	8000f2c <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7ff f955 	bl	8000f2c <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0ca      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d006      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	21e0      	movs	r1, #224	; 0xe0
 8001cbc:	01c9      	lsls	r1, r1, #7
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_ClockConfig+0x1fc>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d057      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e097      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d11f      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e08b      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	d113      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07f      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e074      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e06d      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2207      	movs	r2, #7
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff f8e4 	bl	8000f2c <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff f8df 	bl	8000f2c <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	; 0x38
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2207      	movs	r2, #7
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d21e      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db0:	f7ff f8bc 	bl	8000f2c <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f7ff f8b7 	bl	8000f2c <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e02c      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_RCC_ClockConfig+0x200>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dfa:	f000 f829 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	220f      	movs	r2, #15
 8001e08:	401a      	ands	r2, r3
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x204>)
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d3      	ldr	r3, [r2, r3]
 8001e10:	221f      	movs	r2, #31
 8001e12:	4013      	ands	r3, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x208>)
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x20c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff f827 	bl	8000e74 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	fffff0ff 	.word	0xfffff0ff
 8001e40:	ffff8fff 	.word	0xffff8fff
 8001e44:	08004268 	.word	0x08004268
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2238      	movs	r2, #56	; 0x38
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d10f      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0adb      	lsrs	r3, r3, #11
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4835      	ldr	r0, [pc, #212]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e76:	f7fe f943 	bl	8000100 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e05d      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2238      	movs	r2, #56	; 0x38
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d138      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10d      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	4824      	ldr	r0, [pc, #144]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ec0:	f7fe f91e 	bl	8000100 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	227f      	movs	r2, #127	; 0x7f
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	434b      	muls	r3, r1
 8001ed4:	617b      	str	r3, [r7, #20]
        break;
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	481c      	ldr	r0, [pc, #112]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001edc:	f7fe f910 	bl	8000100 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0f5b      	lsrs	r3, r3, #29
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7fe f8fb 	bl	8000100 <__udivsi3>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2238      	movs	r2, #56	; 0x38
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d103      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2238      	movs	r2, #56	; 0x38
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b18      	cmp	r3, #24
 8001f2e:	d103      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f30:	23fa      	movs	r3, #250	; 0xfa
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e001      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b006      	add	sp, #24
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	0004      	movs	r4, r0
 8001f72:	f7ff fb49 	bl	8001608 <LL_RCC_GetAPB1Prescaler>
 8001f76:	0003      	movs	r3, r0
 8001f78:	0b1a      	lsrs	r2, r3, #12
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	221f      	movs	r2, #31
 8001f82:	4013      	ands	r3, r2
 8001f84:	40dc      	lsrs	r4, r3
 8001f86:	0023      	movs	r3, r4
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	080042a8 	.word	0x080042a8

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f9c:	2313      	movs	r3, #19
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fb8:	e0a3      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2011      	movs	r0, #17
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b86      	ldr	r3, [pc, #536]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0549      	lsls	r1, r1, #21
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fdc:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0049      	lsls	r1, r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffe:	f7fe ff95 	bl	8000f2c <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002006:	e00b      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe ff90 	bl	8000f2c <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d904      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002016:	2313      	movs	r3, #19
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2203      	movs	r2, #3
 800201c:	701a      	strb	r2, [r3, #0]
        break;
 800201e:	e005      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002020:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d0ed      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800202c:	2313      	movs	r3, #19
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d154      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002036:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	429a      	cmp	r2, r3
 8002050:	d014      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002052:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	4a63      	ldr	r2, [pc, #396]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205c:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800205e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0249      	lsls	r1, r1, #9
 8002066:	430a      	orrs	r2, r1
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800206c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002070:	495d      	ldr	r1, [pc, #372]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002072:	400a      	ands	r2, r1
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002076:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d016      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff52 	bl	8000f2c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00c      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe ff4d 	bl	8000f2c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d904      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800209e:	2313      	movs	r3, #19
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
            break;
 80020a6:	e004      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0ed      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020b2:	2313      	movs	r3, #19
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80020d0:	e00c      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d2:	2312      	movs	r3, #18
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2213      	movs	r2, #19
 80020d8:	18ba      	adds	r2, r7, r2
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e0:	2312      	movs	r3, #18
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2213      	movs	r2, #19
 80020e6:	18ba      	adds	r2, r7, r2
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ec:	2311      	movs	r3, #17
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020fc:	493c      	ldr	r1, [pc, #240]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020fe:	400a      	ands	r2, r1
 8002100:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	2203      	movs	r2, #3
 8002112:	4393      	bics	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800211c:	430a      	orrs	r2, r1
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2202      	movs	r2, #2
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	220c      	movs	r2, #12
 8002130:	4393      	bics	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213a:	430a      	orrs	r2, r1
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	4013      	ands	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002158:	430a      	orrs	r2, r1
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	01db      	lsls	r3, r3, #7
 8002164:	4013      	ands	r3, r2
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	0899      	lsrs	r1, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002176:	430a      	orrs	r2, r1
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0249      	lsls	r1, r1, #9
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4013      	ands	r3, r2
 800219e:	d016      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0249      	lsls	r1, r1, #9
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021ce:	2312      	movs	r3, #18
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b006      	add	sp, #24
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	fffffcff 	.word	0xfffffcff
 80021e8:	fffeffff 	.word	0xfffeffff
 80021ec:	00001388 	.word	0x00001388
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	ffffcfff 	.word	0xffffcfff
 80021f8:	ffff3fff 	.word	0xffff3fff

080021fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e046      	b.n	800229c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2288      	movs	r2, #136	; 0x88
 8002212:	589b      	ldr	r3, [r3, r2]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2284      	movs	r2, #132	; 0x84
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f7fe fd22 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2288      	movs	r2, #136	; 0x88
 800222c:	2124      	movs	r1, #36	; 0x24
 800222e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fd0a 	bl	8002c5c <UART_SetConfig>
 8002248:	0003      	movs	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e024      	b.n	800229c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fea1 	bl	8002fa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	490d      	ldr	r1, [pc, #52]	; (80022a4 <HAL_UART_Init+0xa8>)
 800226e:	400a      	ands	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	212a      	movs	r1, #42	; 0x2a
 800227e:	438a      	bics	r2, r1
 8002280:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 ff39 	bl	800310c <UART_CheckIdleState>
 800229a:	0003      	movs	r3, r0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffffb7ff 	.word	0xffffb7ff

080022a8 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e068      	b.n	800238e <HAL_LIN_Init+0xe6>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d101      	bne.n	80022cc <HAL_LIN_Init+0x24>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e060      	b.n	800238e <HAL_LIN_Init+0xe6>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_LIN_Init+0x30>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e05a      	b.n	800238e <HAL_LIN_Init+0xe6>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2288      	movs	r2, #136	; 0x88
 80022dc:	589b      	ldr	r3, [r3, r2]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_LIN_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2284      	movs	r2, #132	; 0x84
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7fe fcbd 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2288      	movs	r2, #136	; 0x88
 80022f6:	2124      	movs	r1, #36	; 0x24
 80022f8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	438a      	bics	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fca5 	bl	8002c5c <UART_SetConfig>
 8002312:	0003      	movs	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_LIN_Init+0x74>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e038      	b.n	800238e <HAL_LIN_Init+0xe6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_LIN_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fe3c 	bl	8002fa4 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4918      	ldr	r1, [pc, #96]	; (8002398 <HAL_LIN_Init+0xf0>)
 8002338:	400a      	ands	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	212a      	movs	r1, #42	; 0x2a
 8002348:	438a      	bics	r2, r1
 800234a:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	01c9      	lsls	r1, r1, #7
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	4393      	bics	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fec0 	bl	800310c <UART_CheckIdleState>
 800238c:	0003      	movs	r3, r0
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	fffff7ff 	.word	0xfffff7ff

0800239c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2288      	movs	r2, #136	; 0x88
 80023b0:	589b      	ldr	r3, [r3, r2]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d000      	beq.n	80023b8 <HAL_UART_Transmit+0x1c>
 80023b6:	e088      	b.n	80024ca <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_UART_Transmit+0x2a>
 80023be:	1dbb      	adds	r3, r7, #6
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e080      	b.n	80024cc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d109      	bne.n	80023ea <HAL_UART_Transmit+0x4e>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d001      	beq.n	80023ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e070      	b.n	80024cc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2290      	movs	r2, #144	; 0x90
 80023ee:	2100      	movs	r1, #0
 80023f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2288      	movs	r2, #136	; 0x88
 80023f6:	2121      	movs	r1, #33	; 0x21
 80023f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fd97 	bl	8000f2c <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1dba      	adds	r2, r7, #6
 8002406:	2154      	movs	r1, #84	; 0x54
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1dba      	adds	r2, r7, #6
 8002410:	2156      	movs	r1, #86	; 0x56
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	429a      	cmp	r2, r3
 8002420:	d108      	bne.n	8002434 <HAL_UART_Transmit+0x98>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	e003      	b.n	800243c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800243c:	e02c      	b.n	8002498 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	0013      	movs	r3, r2
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	f000 feac 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e039      	b.n	80024cc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	001a      	movs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	05d2      	lsls	r2, r2, #23
 800246a:	0dd2      	lsrs	r2, r2, #23
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	3302      	adds	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e007      	b.n	8002486 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2256      	movs	r2, #86	; 0x56
 800248a:	5a9b      	ldrh	r3, [r3, r2]
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b299      	uxth	r1, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2256      	movs	r2, #86	; 0x56
 8002496:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2256      	movs	r2, #86	; 0x56
 800249c:	5a9b      	ldrh	r3, [r3, r2]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1cc      	bne.n	800243e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	0013      	movs	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	f000 fe79 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e006      	b.n	80024cc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2288      	movs	r2, #136	; 0x88
 80024c2:	2120      	movs	r1, #32
 80024c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b008      	add	sp, #32
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	228c      	movs	r2, #140	; 0x8c
 80024e6:	589b      	ldr	r3, [r3, r2]
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d145      	bne.n	8002578 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_UART_Receive_IT+0x26>
 80024f2:	1dbb      	adds	r3, r7, #6
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03d      	b.n	800257a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	429a      	cmp	r2, r3
 8002508:	d109      	bne.n	800251e <HAL_UART_Receive_IT+0x4a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d001      	beq.n	800251e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e02d      	b.n	800257a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	4013      	ands	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002532:	f3ef 8310 	mrs	r3, PRIMASK
 8002536:	613b      	str	r3, [r7, #16]
  return(result);
 8002538:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f383 8810 	msr	PRIMASK, r3
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	04c9      	lsls	r1, r1, #19
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f383 8810 	msr	PRIMASK, r3
}
 8002564:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fee2 	bl	8003338 <UART_Start_Receive_IT>
 8002574:	0003      	movs	r3, r0
 8002576:	e000      	b.n	800257a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b008      	add	sp, #32
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b0aa      	sub	sp, #168	; 0xa8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	22a4      	movs	r2, #164	; 0xa4
 8002594:	18b9      	adds	r1, r7, r2
 8002596:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	20a0      	movs	r0, #160	; 0xa0
 80025a0:	1839      	adds	r1, r7, r0
 80025a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	249c      	movs	r4, #156	; 0x9c
 80025ac:	1939      	adds	r1, r7, r4
 80025ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025b0:	0011      	movs	r1, r2
 80025b2:	18bb      	adds	r3, r7, r2
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4aa2      	ldr	r2, [pc, #648]	; (8002840 <HAL_UART_IRQHandler+0x2bc>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	2298      	movs	r2, #152	; 0x98
 80025bc:	18bd      	adds	r5, r7, r2
 80025be:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80025c0:	18bb      	adds	r3, r7, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11a      	bne.n	80025fe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2220      	movs	r2, #32
 80025ce:	4013      	ands	r3, r2
 80025d0:	d015      	beq.n	80025fe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025d2:	183b      	adds	r3, r7, r0
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d105      	bne.n	80025e8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	4013      	ands	r3, r2
 80025e6:	d00a      	beq.n	80025fe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d100      	bne.n	80025f2 <HAL_UART_IRQHandler+0x6e>
 80025f0:	e2dc      	b.n	8002bac <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	0010      	movs	r0, r2
 80025fa:	4798      	blx	r3
      }
      return;
 80025fc:	e2d6      	b.n	8002bac <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025fe:	2398      	movs	r3, #152	; 0x98
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d100      	bne.n	800260a <HAL_UART_IRQHandler+0x86>
 8002608:	e122      	b.n	8002850 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800260a:	239c      	movs	r3, #156	; 0x9c
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a8c      	ldr	r2, [pc, #560]	; (8002844 <HAL_UART_IRQHandler+0x2c0>)
 8002612:	4013      	ands	r3, r2
 8002614:	d106      	bne.n	8002624 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002616:	23a0      	movs	r3, #160	; 0xa0
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <HAL_UART_IRQHandler+0x2c4>)
 800261e:	4013      	ands	r3, r2
 8002620:	d100      	bne.n	8002624 <HAL_UART_IRQHandler+0xa0>
 8002622:	e115      	b.n	8002850 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002624:	23a4      	movs	r3, #164	; 0xa4
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
 8002630:	23a0      	movs	r3, #160	; 0xa0
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4013      	ands	r3, r2
 800263c:	d00b      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2290      	movs	r2, #144	; 0x90
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	2201      	movs	r2, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2190      	movs	r1, #144	; 0x90
 8002654:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002656:	23a4      	movs	r3, #164	; 0xa4
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	d011      	beq.n	8002686 <HAL_UART_IRQHandler+0x102>
 8002662:	239c      	movs	r3, #156	; 0x9c
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d00b      	beq.n	8002686 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2202      	movs	r2, #2
 8002674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2290      	movs	r2, #144	; 0x90
 800267a:	589b      	ldr	r3, [r3, r2]
 800267c:	2204      	movs	r2, #4
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2190      	movs	r1, #144	; 0x90
 8002684:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002686:	23a4      	movs	r3, #164	; 0xa4
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2204      	movs	r2, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d011      	beq.n	80026b6 <HAL_UART_IRQHandler+0x132>
 8002692:	239c      	movs	r3, #156	; 0x9c
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d00b      	beq.n	80026b6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2290      	movs	r2, #144	; 0x90
 80026aa:	589b      	ldr	r3, [r3, r2]
 80026ac:	2202      	movs	r2, #2
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2190      	movs	r1, #144	; 0x90
 80026b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026b6:	23a4      	movs	r3, #164	; 0xa4
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	4013      	ands	r3, r2
 80026c0:	d017      	beq.n	80026f2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026c2:	23a0      	movs	r3, #160	; 0xa0
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	4013      	ands	r3, r2
 80026cc:	d105      	bne.n	80026da <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80026ce:	239c      	movs	r3, #156	; 0x9c
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_UART_IRQHandler+0x2c0>)
 80026d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026d8:	d00b      	beq.n	80026f2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2290      	movs	r2, #144	; 0x90
 80026e6:	589b      	ldr	r3, [r3, r2]
 80026e8:	2208      	movs	r2, #8
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2190      	movs	r1, #144	; 0x90
 80026f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026f2:	23a4      	movs	r3, #164	; 0xa4
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d013      	beq.n	8002728 <HAL_UART_IRQHandler+0x1a4>
 8002700:	23a0      	movs	r3, #160	; 0xa0
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	04db      	lsls	r3, r3, #19
 800270a:	4013      	ands	r3, r2
 800270c:	d00c      	beq.n	8002728 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2290      	movs	r2, #144	; 0x90
 800271c:	589b      	ldr	r3, [r3, r2]
 800271e:	2220      	movs	r2, #32
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2190      	movs	r1, #144	; 0x90
 8002726:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2290      	movs	r2, #144	; 0x90
 800272c:	589b      	ldr	r3, [r3, r2]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d100      	bne.n	8002734 <HAL_UART_IRQHandler+0x1b0>
 8002732:	e23d      	b.n	8002bb0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002734:	23a4      	movs	r3, #164	; 0xa4
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2220      	movs	r2, #32
 800273c:	4013      	ands	r3, r2
 800273e:	d015      	beq.n	800276c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002740:	23a0      	movs	r3, #160	; 0xa0
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	d106      	bne.n	800275a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800274c:	239c      	movs	r3, #156	; 0x9c
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	055b      	lsls	r3, r3, #21
 8002756:	4013      	ands	r3, r2
 8002758:	d008      	beq.n	800276c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	0010      	movs	r0, r2
 800276a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2290      	movs	r2, #144	; 0x90
 8002770:	589b      	ldr	r3, [r3, r2]
 8002772:	2194      	movs	r1, #148	; 0x94
 8002774:	187a      	adds	r2, r7, r1
 8002776:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2240      	movs	r2, #64	; 0x40
 8002780:	4013      	ands	r3, r2
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d004      	beq.n	8002790 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002786:	187b      	adds	r3, r7, r1
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2228      	movs	r2, #40	; 0x28
 800278c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800278e:	d04c      	beq.n	800282a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fef4 	bl	8003580 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d13c      	bne.n	8002820 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a6:	f3ef 8310 	mrs	r3, PRIMASK
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80027ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ae:	2090      	movs	r0, #144	; 0x90
 80027b0:	183a      	adds	r2, r7, r0
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	2301      	movs	r3, #1
 80027b6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2140      	movs	r1, #64	; 0x40
 80027cc:	438a      	bics	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d8:	f383 8810 	msr	PRIMASK, r3
}
 80027dc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d016      	beq.n	8002816 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	589b      	ldr	r3, [r3, r2]
 80027ee:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_UART_IRQHandler+0x2c8>)
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	589b      	ldr	r3, [r3, r2]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fcf7 	bl	80011ec <HAL_DMA_Abort_IT>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d01c      	beq.n	800283c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	589b      	ldr	r3, [r3, r2]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	5852      	ldr	r2, [r2, r1]
 8002810:	0010      	movs	r0, r2
 8002812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e012      	b.n	800283c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe f88b 	bl	8000934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281e:	e00d      	b.n	800283c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f7fe f886 	bl	8000934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	e008      	b.n	800283c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f7fe f881 	bl	8000934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2290      	movs	r2, #144	; 0x90
 8002836:	2100      	movs	r1, #0
 8002838:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800283a:	e1b9      	b.n	8002bb0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	46c0      	nop			; (mov r8, r8)
    return;
 800283e:	e1b7      	b.n	8002bb0 <HAL_UART_IRQHandler+0x62c>
 8002840:	0000080f 	.word	0x0000080f
 8002844:	10000001 	.word	0x10000001
 8002848:	04000120 	.word	0x04000120
 800284c:	0800364d 	.word	0x0800364d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d000      	beq.n	800285a <HAL_UART_IRQHandler+0x2d6>
 8002858:	e13e      	b.n	8002ad8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800285a:	23a4      	movs	r3, #164	; 0xa4
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	4013      	ands	r3, r2
 8002864:	d100      	bne.n	8002868 <HAL_UART_IRQHandler+0x2e4>
 8002866:	e137      	b.n	8002ad8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002868:	23a0      	movs	r3, #160	; 0xa0
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2210      	movs	r2, #16
 8002870:	4013      	ands	r3, r2
 8002872:	d100      	bne.n	8002876 <HAL_UART_IRQHandler+0x2f2>
 8002874:	e130      	b.n	8002ad8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2210      	movs	r2, #16
 800287c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	4013      	ands	r3, r2
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d000      	beq.n	800288e <HAL_UART_IRQHandler+0x30a>
 800288c:	e0a4      	b.n	80029d8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	589b      	ldr	r3, [r3, r2]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	217e      	movs	r1, #126	; 0x7e
 800289a:	187b      	adds	r3, r7, r1
 800289c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <HAL_UART_IRQHandler+0x324>
 80028a6:	e185      	b.n	8002bb4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	225c      	movs	r2, #92	; 0x5c
 80028ac:	5a9b      	ldrh	r3, [r3, r2]
 80028ae:	187a      	adds	r2, r7, r1
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d300      	bcc.n	80028b8 <HAL_UART_IRQHandler+0x334>
 80028b6:	e17d      	b.n	8002bb4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	187a      	adds	r2, r7, r1
 80028bc:	215e      	movs	r1, #94	; 0x5e
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	589b      	ldr	r3, [r3, r2]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2220      	movs	r2, #32
 80028ce:	4013      	ands	r3, r2
 80028d0:	d170      	bne.n	80029b4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d2:	f3ef 8310 	mrs	r3, PRIMASK
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028da:	67bb      	str	r3, [r7, #120]	; 0x78
 80028dc:	2301      	movs	r3, #1
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	49b4      	ldr	r1, [pc, #720]	; (8002bc4 <HAL_UART_IRQHandler+0x640>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	f383 8810 	msr	PRIMASK, r3
}
 8002902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002904:	f3ef 8310 	mrs	r3, PRIMASK
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800290a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	677b      	str	r3, [r7, #116]	; 0x74
 800290e:	2301      	movs	r3, #1
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	438a      	bics	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002936:	f3ef 8310 	mrs	r3, PRIMASK
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
 8002940:	2301      	movs	r3, #1
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	438a      	bics	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	228c      	movs	r2, #140	; 0x8c
 800296c:	2120      	movs	r1, #32
 800296e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002976:	f3ef 8310 	mrs	r3, PRIMASK
 800297a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002980:	2301      	movs	r3, #1
 8002982:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002986:	f383 8810 	msr	PRIMASK, r3
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2110      	movs	r1, #16
 8002998:	438a      	bics	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	589b      	ldr	r3, [r3, r2]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7fe fbba 	bl	8001128 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	225c      	movs	r2, #92	; 0x5c
 80029be:	5a9a      	ldrh	r2, [r3, r2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	215e      	movs	r1, #94	; 0x5e
 80029c4:	5a5b      	ldrh	r3, [r3, r1]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f905 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029d6:	e0ed      	b.n	8002bb4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	225c      	movs	r2, #92	; 0x5c
 80029dc:	5a99      	ldrh	r1, [r3, r2]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	225e      	movs	r2, #94	; 0x5e
 80029e2:	5a9b      	ldrh	r3, [r3, r2]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	208e      	movs	r0, #142	; 0x8e
 80029e8:	183b      	adds	r3, r7, r0
 80029ea:	1a8a      	subs	r2, r1, r2
 80029ec:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	225e      	movs	r2, #94	; 0x5e
 80029f2:	5a9b      	ldrh	r3, [r3, r2]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d100      	bne.n	80029fc <HAL_UART_IRQHandler+0x478>
 80029fa:	e0dd      	b.n	8002bb8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80029fc:	183b      	adds	r3, r7, r0
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d100      	bne.n	8002a06 <HAL_UART_IRQHandler+0x482>
 8002a04:	e0d8      	b.n	8002bb8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a06:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a0e:	2488      	movs	r4, #136	; 0x88
 8002a10:	193a      	adds	r2, r7, r4
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4967      	ldr	r1, [pc, #412]	; (8002bc8 <HAL_UART_IRQHandler+0x644>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a42:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a44:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a46:	2484      	movs	r4, #132	; 0x84
 8002a48:	193a      	adds	r2, r7, r4
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	495a      	ldr	r1, [pc, #360]	; (8002bcc <HAL_UART_IRQHandler+0x648>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	228c      	movs	r2, #140	; 0x8c
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	2480      	movs	r4, #128	; 0x80
 8002a94:	193a      	adds	r2, r7, r4
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2110      	movs	r1, #16
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ac8:	183b      	adds	r3, r7, r0
 8002aca:	881a      	ldrh	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0011      	movs	r1, r2
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f885 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ad6:	e06f      	b.n	8002bb8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ad8:	23a4      	movs	r3, #164	; 0xa4
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	035b      	lsls	r3, r3, #13
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d010      	beq.n	8002b08 <HAL_UART_IRQHandler+0x584>
 8002ae6:	239c      	movs	r3, #156	; 0x9c
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	03db      	lsls	r3, r3, #15
 8002af0:	4013      	ands	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	0352      	lsls	r2, r2, #13
 8002afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fa47 	bl	8003f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b06:	e05a      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b08:	23a4      	movs	r3, #164	; 0xa4
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	4013      	ands	r3, r2
 8002b12:	d016      	beq.n	8002b42 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b14:	23a0      	movs	r3, #160	; 0xa0
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d106      	bne.n	8002b2e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b20:	239c      	movs	r3, #156	; 0x9c
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d042      	beq.n	8002bbc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	4798      	blx	r3
    }
    return;
 8002b40:	e03c      	b.n	8002bbc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b42:	23a4      	movs	r3, #164	; 0xa4
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0x5e0>
 8002b4e:	23a0      	movs	r3, #160	; 0xa0
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	4013      	ands	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 fd8c 	bl	800367a <UART_EndTransmit_IT>
    return;
 8002b62:	e02c      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b64:	23a4      	movs	r3, #164	; 0xa4
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0x606>
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f001 fa16 	bl	8003fb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b88:	e019      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b8a:	23a4      	movs	r3, #164	; 0xa4
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	045b      	lsls	r3, r3, #17
 8002b94:	4013      	ands	r3, r2
 8002b96:	d012      	beq.n	8002bbe <HAL_UART_IRQHandler+0x63a>
 8002b98:	23a0      	movs	r3, #160	; 0xa0
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da0d      	bge.n	8002bbe <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f001 f9fd 	bl	8003fa4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002baa:	e008      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
      return;
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	e006      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
    return;
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	e004      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
      return;
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	e002      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
      return;
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	e000      	b.n	8002bbe <HAL_UART_IRQHandler+0x63a>
    return;
 8002bbc:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b02a      	add	sp, #168	; 0xa8
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	fffffeff 	.word	0xfffffeff
 8002bc8:	fffffedf 	.word	0xfffffedf
 8002bcc:	effffffe 	.word	0xeffffffe

08002bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	000a      	movs	r2, r1
 8002bea:	1cbb      	adds	r3, r7, #2
 8002bec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2284      	movs	r2, #132	; 0x84
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_LIN_SendBreak+0x16>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e018      	b.n	8002c3e <HAL_LIN_SendBreak+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2284      	movs	r2, #132	; 0x84
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2288      	movs	r2, #136	; 0x88
 8002c18:	2124      	movs	r1, #36	; 0x24
 8002c1a:	5099      	str	r1, [r3, r2]

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2102      	movs	r1, #2
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2288      	movs	r2, #136	; 0x88
 8002c30:	2120      	movs	r1, #32
 8002c32:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2284      	movs	r2, #132	; 0x84
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2290      	movs	r2, #144	; 0x90
 8002c52:	589b      	ldr	r3, [r3, r2]
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c64:	231a      	movs	r3, #26
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4abc      	ldr	r2, [pc, #752]	; (8002f7c <UART_SetConfig+0x320>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4ab7      	ldr	r2, [pc, #732]	; (8002f80 <UART_SetConfig+0x324>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4aae      	ldr	r2, [pc, #696]	; (8002f84 <UART_SetConfig+0x328>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	220f      	movs	r2, #15
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4aa4      	ldr	r2, [pc, #656]	; (8002f88 <UART_SetConfig+0x32c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d127      	bne.n	8002d4a <UART_SetConfig+0xee>
 8002cfa:	4ba4      	ldr	r3, [pc, #656]	; (8002f8c <UART_SetConfig+0x330>)
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d017      	beq.n	8002d36 <UART_SetConfig+0xda>
 8002d06:	d81b      	bhi.n	8002d40 <UART_SetConfig+0xe4>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d00a      	beq.n	8002d22 <UART_SetConfig+0xc6>
 8002d0c:	d818      	bhi.n	8002d40 <UART_SetConfig+0xe4>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <UART_SetConfig+0xbc>
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d00a      	beq.n	8002d2c <UART_SetConfig+0xd0>
 8002d16:	e013      	b.n	8002d40 <UART_SetConfig+0xe4>
 8002d18:	231b      	movs	r3, #27
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e058      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d22:	231b      	movs	r3, #27
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e053      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d2c:	231b      	movs	r3, #27
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2204      	movs	r2, #4
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e04e      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d36:	231b      	movs	r3, #27
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e049      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d40:	231b      	movs	r3, #27
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2210      	movs	r2, #16
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e044      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <UART_SetConfig+0x334>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d127      	bne.n	8002da4 <UART_SetConfig+0x148>
 8002d54:	4b8d      	ldr	r3, [pc, #564]	; (8002f8c <UART_SetConfig+0x330>)
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	220c      	movs	r2, #12
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d017      	beq.n	8002d90 <UART_SetConfig+0x134>
 8002d60:	d81b      	bhi.n	8002d9a <UART_SetConfig+0x13e>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d00a      	beq.n	8002d7c <UART_SetConfig+0x120>
 8002d66:	d818      	bhi.n	8002d9a <UART_SetConfig+0x13e>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <UART_SetConfig+0x116>
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d00a      	beq.n	8002d86 <UART_SetConfig+0x12a>
 8002d70:	e013      	b.n	8002d9a <UART_SetConfig+0x13e>
 8002d72:	231b      	movs	r3, #27
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e02b      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d7c:	231b      	movs	r3, #27
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e026      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d86:	231b      	movs	r3, #27
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e021      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d90:	231b      	movs	r3, #27
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2208      	movs	r2, #8
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e01c      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2210      	movs	r2, #16
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e017      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <UART_SetConfig+0x338>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d104      	bne.n	8002db8 <UART_SetConfig+0x15c>
 8002dae:	231b      	movs	r3, #27
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e00d      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <UART_SetConfig+0x33c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d104      	bne.n	8002dcc <UART_SetConfig+0x170>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e003      	b.n	8002dd4 <UART_SetConfig+0x178>
 8002dcc:	231b      	movs	r3, #27
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d000      	beq.n	8002de2 <UART_SetConfig+0x186>
 8002de0:	e065      	b.n	8002eae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002de2:	231b      	movs	r3, #27
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d015      	beq.n	8002e18 <UART_SetConfig+0x1bc>
 8002dec:	dc18      	bgt.n	8002e20 <UART_SetConfig+0x1c4>
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d00d      	beq.n	8002e0e <UART_SetConfig+0x1b2>
 8002df2:	dc15      	bgt.n	8002e20 <UART_SetConfig+0x1c4>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <UART_SetConfig+0x1a2>
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d005      	beq.n	8002e08 <UART_SetConfig+0x1ac>
 8002dfc:	e010      	b.n	8002e20 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfe:	f7ff f8b3 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8002e02:	0003      	movs	r3, r0
 8002e04:	617b      	str	r3, [r7, #20]
        break;
 8002e06:	e012      	b.n	8002e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <UART_SetConfig+0x340>)
 8002e0a:	617b      	str	r3, [r7, #20]
        break;
 8002e0c:	e00f      	b.n	8002e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff f81f 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002e12:	0003      	movs	r3, r0
 8002e14:	617b      	str	r3, [r7, #20]
        break;
 8002e16:	e00a      	b.n	8002e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	617b      	str	r3, [r7, #20]
        break;
 8002e1e:	e006      	b.n	8002e2e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e24:	231a      	movs	r3, #26
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
        break;
 8002e2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <UART_SetConfig+0x1da>
 8002e34:	e08d      	b.n	8002f52 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3a:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <UART_SetConfig+0x344>)
 8002e3c:	0052      	lsls	r2, r2, #1
 8002e3e:	5ad3      	ldrh	r3, [r2, r3]
 8002e40:	0019      	movs	r1, r3
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7fd f95c 	bl	8000100 <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	005a      	lsls	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	18d2      	adds	r2, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0019      	movs	r1, r3
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	f7fd f950 	bl	8000100 <__udivsi3>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d91c      	bls.n	8002ea4 <UART_SetConfig+0x248>
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	025b      	lsls	r3, r3, #9
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d217      	bcs.n	8002ea4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	200e      	movs	r0, #14
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	438a      	bics	r2, r1
 8002e80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2207      	movs	r2, #7
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	183a      	adds	r2, r7, r0
 8002e92:	8812      	ldrh	r2, [r2, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	183a      	adds	r2, r7, r0
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	e056      	b.n	8002f52 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea4:	231a      	movs	r3, #26
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e051      	b.n	8002f52 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eae:	231b      	movs	r3, #27
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d015      	beq.n	8002ee4 <UART_SetConfig+0x288>
 8002eb8:	dc18      	bgt.n	8002eec <UART_SetConfig+0x290>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d00d      	beq.n	8002eda <UART_SetConfig+0x27e>
 8002ebe:	dc15      	bgt.n	8002eec <UART_SetConfig+0x290>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <UART_SetConfig+0x26e>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d005      	beq.n	8002ed4 <UART_SetConfig+0x278>
 8002ec8:	e010      	b.n	8002eec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eca:	f7ff f84d 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	617b      	str	r3, [r7, #20]
        break;
 8002ed2:	e012      	b.n	8002efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <UART_SetConfig+0x340>)
 8002ed6:	617b      	str	r3, [r7, #20]
        break;
 8002ed8:	e00f      	b.n	8002efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7fe ffb9 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	617b      	str	r3, [r7, #20]
        break;
 8002ee2:	e00a      	b.n	8002efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	617b      	str	r3, [r7, #20]
        break;
 8002eea:	e006      	b.n	8002efa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ef0:	231a      	movs	r3, #26
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
        break;
 8002ef8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <UART_SetConfig+0x344>)
 8002f06:	0052      	lsls	r2, r2, #1
 8002f08:	5ad3      	ldrh	r3, [r2, r3]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f7fd f8f7 	bl	8000100 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	18d2      	adds	r2, r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0019      	movs	r1, r3
 8002f24:	0010      	movs	r0, r2
 8002f26:	f7fd f8eb 	bl	8000100 <__udivsi3>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d90a      	bls.n	8002f4a <UART_SetConfig+0x2ee>
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	025b      	lsls	r3, r3, #9
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d205      	bcs.n	8002f4a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	e003      	b.n	8002f52 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f4a:	231a      	movs	r3, #26
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	226a      	movs	r2, #106	; 0x6a
 8002f56:	2101      	movs	r1, #1
 8002f58:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2268      	movs	r2, #104	; 0x68
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002f6e:	231a      	movs	r3, #26
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b008      	add	sp, #32
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	cfff69f3 	.word	0xcfff69f3
 8002f80:	ffffcfff 	.word	0xffffcfff
 8002f84:	11fff4ff 	.word	0x11fff4ff
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40004400 	.word	0x40004400
 8002f94:	40004800 	.word	0x40004800
 8002f98:	40004c00 	.word	0x40004c00
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	080042c8 	.word	0x080042c8

08002fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <UART_AdvFeatureConfig+0x144>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a43      	ldr	r2, [pc, #268]	; (80030ec <UART_AdvFeatureConfig+0x148>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <UART_AdvFeatureConfig+0x14c>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	d00b      	beq.n	8003034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a34      	ldr	r2, [pc, #208]	; (80030f4 <UART_AdvFeatureConfig+0x150>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2210      	movs	r2, #16
 800303a:	4013      	ands	r3, r2
 800303c:	d00b      	beq.n	8003056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <UART_AdvFeatureConfig+0x154>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	2220      	movs	r2, #32
 800305c:	4013      	ands	r3, r2
 800305e:	d00b      	beq.n	8003078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <UART_AdvFeatureConfig+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	2240      	movs	r2, #64	; 0x40
 800307e:	4013      	ands	r3, r2
 8003080:	d01d      	beq.n	80030be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <UART_AdvFeatureConfig+0x15c>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	035b      	lsls	r3, r3, #13
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10b      	bne.n	80030be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <UART_AdvFeatureConfig+0x160>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <UART_AdvFeatureConfig+0x164>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fffdffff 	.word	0xfffdffff
 80030ec:	fffeffff 	.word	0xfffeffff
 80030f0:	fffbffff 	.word	0xfffbffff
 80030f4:	ffff7fff 	.word	0xffff7fff
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	ffefffff 	.word	0xffefffff
 8003104:	ff9fffff 	.word	0xff9fffff
 8003108:	fff7ffff 	.word	0xfff7ffff

0800310c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2290      	movs	r2, #144	; 0x90
 8003118:	2100      	movs	r1, #0
 800311a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800311c:	f7fd ff06 	bl	8000f2c <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2208      	movs	r2, #8
 800312c:	4013      	ands	r3, r2
 800312e:	2b08      	cmp	r3, #8
 8003130:	d10c      	bne.n	800314c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	0391      	lsls	r1, r2, #14
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <UART_CheckIdleState+0x98>)
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	f000 f832 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d001      	beq.n	800314c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e026      	b.n	800319a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	2b04      	cmp	r3, #4
 8003158:	d10c      	bne.n	8003174 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	03d1      	lsls	r1, r2, #15
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <UART_CheckIdleState+0x98>)
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	f000 f81e 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d001      	beq.n	8003174 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e012      	b.n	800319a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2288      	movs	r2, #136	; 0x88
 8003178:	2120      	movs	r1, #32
 800317a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	228c      	movs	r2, #140	; 0x8c
 8003180:	2120      	movs	r1, #32
 8003182:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2284      	movs	r2, #132	; 0x84
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	01ffffff 	.word	0x01ffffff

080031a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b094      	sub	sp, #80	; 0x50
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b8:	e0a7      	b.n	800330a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031bc:	3301      	adds	r3, #1
 80031be:	d100      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80031c0:	e0a3      	b.n	800330a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fd feb3 	bl	8000f2c <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13f      	bne.n	8003258 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d8:	f3ef 8310 	mrs	r3, PRIMASK
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
 80031e2:	2301      	movs	r3, #1
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	494e      	ldr	r1, [pc, #312]	; (8003334 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320a:	f3ef 8310 	mrs	r3, PRIMASK
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
 8003214:	2301      	movs	r3, #1
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2101      	movs	r1, #1
 800322c:	438a      	bics	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	f383 8810 	msr	PRIMASK, r3
}
 800323a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2288      	movs	r2, #136	; 0x88
 8003240:	2120      	movs	r1, #32
 8003242:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	228c      	movs	r2, #140	; 0x8c
 8003248:	2120      	movs	r1, #32
 800324a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2284      	movs	r2, #132	; 0x84
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e069      	b.n	800332c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d052      	beq.n	800330a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	401a      	ands	r2, r3
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	429a      	cmp	r2, r3
 8003276:	d148      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003282:	f3ef 8310 	mrs	r3, PRIMASK
 8003286:	613b      	str	r3, [r7, #16]
  return(result);
 8003288:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4924      	ldr	r1, [pc, #144]	; (8003334 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b4:	f3ef 8310 	mrs	r3, PRIMASK
 80032b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032be:	2301      	movs	r3, #1
 80032c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	438a      	bics	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	f383 8810 	msr	PRIMASK, r3
}
 80032e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2288      	movs	r2, #136	; 0x88
 80032ea:	2120      	movs	r1, #32
 80032ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	228c      	movs	r2, #140	; 0x8c
 80032f2:	2120      	movs	r1, #32
 80032f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2290      	movs	r2, #144	; 0x90
 80032fa:	2120      	movs	r1, #32
 80032fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2284      	movs	r2, #132	; 0x84
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e010      	b.n	800332c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	425a      	negs	r2, r3
 800331a:	4153      	adcs	r3, r2
 800331c:	b2db      	uxtb	r3, r3
 800331e:	001a      	movs	r2, r3
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d100      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x182>
 8003328:	e747      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b014      	add	sp, #80	; 0x50
 8003332:	bd80      	pop	{r7, pc}
 8003334:	fffffe5f 	.word	0xfffffe5f

08003338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b098      	sub	sp, #96	; 0x60
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1dba      	adds	r2, r7, #6
 8003350:	215c      	movs	r1, #92	; 0x5c
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1dba      	adds	r2, r7, #6
 800335a:	215e      	movs	r1, #94	; 0x5e
 800335c:	8812      	ldrh	r2, [r2, #0]
 800335e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	429a      	cmp	r2, r3
 8003370:	d10d      	bne.n	800338e <UART_Start_Receive_IT+0x56>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <UART_Start_Receive_IT+0x4c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2260      	movs	r2, #96	; 0x60
 800337e:	497b      	ldr	r1, [pc, #492]	; (800356c <UART_Start_Receive_IT+0x234>)
 8003380:	5299      	strh	r1, [r3, r2]
 8003382:	e02e      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2260      	movs	r2, #96	; 0x60
 8003388:	21ff      	movs	r1, #255	; 0xff
 800338a:	5299      	strh	r1, [r3, r2]
 800338c:	e029      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <UART_Start_Receive_IT+0x7a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <UART_Start_Receive_IT+0x70>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2260      	movs	r2, #96	; 0x60
 80033a2:	21ff      	movs	r1, #255	; 0xff
 80033a4:	5299      	strh	r1, [r3, r2]
 80033a6:	e01c      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2260      	movs	r2, #96	; 0x60
 80033ac:	217f      	movs	r1, #127	; 0x7f
 80033ae:	5299      	strh	r1, [r3, r2]
 80033b0:	e017      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	055b      	lsls	r3, r3, #21
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d10d      	bne.n	80033da <UART_Start_Receive_IT+0xa2>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <UART_Start_Receive_IT+0x98>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2260      	movs	r2, #96	; 0x60
 80033ca:	217f      	movs	r1, #127	; 0x7f
 80033cc:	5299      	strh	r1, [r3, r2]
 80033ce:	e008      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2260      	movs	r2, #96	; 0x60
 80033d4:	213f      	movs	r1, #63	; 0x3f
 80033d6:	5299      	strh	r1, [r3, r2]
 80033d8:	e003      	b.n	80033e2 <UART_Start_Receive_IT+0xaa>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2260      	movs	r2, #96	; 0x60
 80033de:	2100      	movs	r1, #0
 80033e0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2290      	movs	r2, #144	; 0x90
 80033e6:	2100      	movs	r1, #0
 80033e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	228c      	movs	r2, #140	; 0x8c
 80033ee:	2122      	movs	r1, #34	; 0x22
 80033f0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f2:	f3ef 8310 	mrs	r3, PRIMASK
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fc:	2301      	movs	r3, #1
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2101      	movs	r1, #1
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	059b      	lsls	r3, r3, #22
 800342c:	429a      	cmp	r2, r3
 800342e:	d150      	bne.n	80034d2 <UART_Start_Receive_IT+0x19a>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2268      	movs	r2, #104	; 0x68
 8003434:	5a9b      	ldrh	r3, [r3, r2]
 8003436:	1dba      	adds	r2, r7, #6
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d349      	bcc.n	80034d2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	015b      	lsls	r3, r3, #5
 8003446:	429a      	cmp	r2, r3
 8003448:	d107      	bne.n	800345a <UART_Start_Receive_IT+0x122>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a46      	ldr	r2, [pc, #280]	; (8003570 <UART_Start_Receive_IT+0x238>)
 8003456:	675a      	str	r2, [r3, #116]	; 0x74
 8003458:	e002      	b.n	8003460 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a45      	ldr	r2, [pc, #276]	; (8003574 <UART_Start_Receive_IT+0x23c>)
 800345e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d019      	beq.n	800349c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003470:	65bb      	str	r3, [r7, #88]	; 0x58
 8003472:	2301      	movs	r3, #1
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0049      	lsls	r1, r1, #1
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034a4:	657b      	str	r3, [r7, #84]	; 0x54
 80034a6:	2301      	movs	r3, #1
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0549      	lsls	r1, r1, #21
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	e047      	b.n	8003562 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	015b      	lsls	r3, r3, #5
 80034da:	429a      	cmp	r2, r3
 80034dc:	d107      	bne.n	80034ee <UART_Start_Receive_IT+0x1b6>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <UART_Start_Receive_IT+0x240>)
 80034ea:	675a      	str	r2, [r3, #116]	; 0x74
 80034ec:	e002      	b.n	80034f4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <UART_Start_Receive_IT+0x244>)
 80034f2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003500:	61fb      	str	r3, [r7, #28]
  return(result);
 8003502:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003506:	2301      	movs	r3, #1
 8003508:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f383 8810 	msr	PRIMASK, r3
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2190      	movs	r1, #144	; 0x90
 800351e:	0049      	lsls	r1, r1, #1
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	e018      	b.n	8003562 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003530:	f3ef 8310 	mrs	r3, PRIMASK
 8003534:	613b      	str	r3, [r7, #16]
  return(result);
 8003536:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003538:	653b      	str	r3, [r7, #80]	; 0x50
 800353a:	2301      	movs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2120      	movs	r1, #32
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b018      	add	sp, #96	; 0x60
 800356a:	bd80      	pop	{r7, pc}
 800356c:	000001ff 	.word	0x000001ff
 8003570:	08003ca9 	.word	0x08003ca9
 8003574:	080039bd 	.word	0x080039bd
 8003578:	08003849 	.word	0x08003849
 800357c:	080036d5 	.word	0x080036d5

08003580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08e      	sub	sp, #56	; 0x38
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003588:	f3ef 8310 	mrs	r3, PRIMASK
 800358c:	617b      	str	r3, [r7, #20]
  return(result);
 800358e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4926      	ldr	r1, [pc, #152]	; (8003644 <UART_EndRxTransfer+0xc4>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	623b      	str	r3, [r7, #32]
  return(result);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <UART_EndRxTransfer+0xc8>)
 80035dc:	400a      	ands	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d118      	bne.n	8003626 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f4:	f3ef 8310 	mrs	r3, PRIMASK
 80035f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	2301      	movs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2110      	movs	r1, #16
 8003616:	438a      	bics	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	228c      	movs	r2, #140	; 0x8c
 800362a:	2120      	movs	r1, #32
 800362c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	675a      	str	r2, [r3, #116]	; 0x74
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b00e      	add	sp, #56	; 0x38
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	fffffedf 	.word	0xfffffedf
 8003648:	effffffe 	.word	0xeffffffe

0800364c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	225e      	movs	r2, #94	; 0x5e
 800365e:	2100      	movs	r1, #0
 8003660:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2256      	movs	r2, #86	; 0x56
 8003666:	2100      	movs	r1, #0
 8003668:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f7fd f961 	bl	8000934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b004      	add	sp, #16
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	60bb      	str	r3, [r7, #8]
  return(result);
 8003688:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	2301      	movs	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2140      	movs	r1, #64	; 0x40
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2288      	movs	r2, #136	; 0x88
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fa83 	bl	8002bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036dc:	203e      	movs	r0, #62	; 0x3e
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	2160      	movs	r1, #96	; 0x60
 80036e4:	5a52      	ldrh	r2, [r2, r1]
 80036e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	228c      	movs	r2, #140	; 0x8c
 80036ec:	589b      	ldr	r3, [r3, r2]
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	d000      	beq.n	80036f4 <UART_RxISR_8BIT+0x20>
 80036f2:	e09a      	b.n	800382a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036fa:	213c      	movs	r1, #60	; 0x3c
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003700:	187b      	adds	r3, r7, r1
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	183b      	adds	r3, r7, r0
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b2d9      	uxtb	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	400a      	ands	r2, r1
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	225e      	movs	r2, #94	; 0x5e
 8003724:	5a9b      	ldrh	r3, [r3, r2]
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b299      	uxth	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	225e      	movs	r2, #94	; 0x5e
 8003730:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	225e      	movs	r2, #94	; 0x5e
 8003736:	5a9b      	ldrh	r3, [r3, r2]
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d000      	beq.n	8003740 <UART_RxISR_8BIT+0x6c>
 800373e:	e07c      	b.n	800383a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003740:	f3ef 8310 	mrs	r3, PRIMASK
 8003744:	61bb      	str	r3, [r7, #24]
  return(result);
 8003746:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4938      	ldr	r1, [pc, #224]	; (8003844 <UART_RxISR_8BIT+0x170>)
 8003762:	400a      	ands	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003772:	f3ef 8310 	mrs	r3, PRIMASK
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
 800377c:	2301      	movs	r3, #1
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	228c      	movs	r2, #140	; 0x8c
 80037a8:	2120      	movs	r1, #32
 80037aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d12f      	bne.n	8003820 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
 80037d0:	2301      	movs	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2110      	movs	r1, #16
 80037e8:	438a      	bics	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2210      	movs	r2, #16
 8003800:	4013      	ands	r3, r2
 8003802:	2b10      	cmp	r3, #16
 8003804:	d103      	bne.n	800380e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2210      	movs	r2, #16
 800380c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	225c      	movs	r2, #92	; 0x5c
 8003812:	5a9a      	ldrh	r2, [r3, r2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff f9e1 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800381e:	e00c      	b.n	800383a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f7fd f860 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 8003828:	e007      	b.n	800383a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2108      	movs	r1, #8
 8003836:	430a      	orrs	r2, r1
 8003838:	619a      	str	r2, [r3, #24]
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b010      	add	sp, #64	; 0x40
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	fffffedf 	.word	0xfffffedf

08003848 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b090      	sub	sp, #64	; 0x40
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003850:	203e      	movs	r0, #62	; 0x3e
 8003852:	183b      	adds	r3, r7, r0
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	2160      	movs	r1, #96	; 0x60
 8003858:	5a52      	ldrh	r2, [r2, r1]
 800385a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	228c      	movs	r2, #140	; 0x8c
 8003860:	589b      	ldr	r3, [r3, r2]
 8003862:	2b22      	cmp	r3, #34	; 0x22
 8003864:	d000      	beq.n	8003868 <UART_RxISR_16BIT+0x20>
 8003866:	e09a      	b.n	800399e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386e:	213c      	movs	r1, #60	; 0x3c
 8003870:	187b      	adds	r3, r7, r1
 8003872:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800387a:	187b      	adds	r3, r7, r1
 800387c:	183a      	adds	r2, r7, r0
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	4013      	ands	r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	1c9a      	adds	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	225e      	movs	r2, #94	; 0x5e
 8003898:	5a9b      	ldrh	r3, [r3, r2]
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b299      	uxth	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	225e      	movs	r2, #94	; 0x5e
 80038a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	225e      	movs	r2, #94	; 0x5e
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d000      	beq.n	80038b4 <UART_RxISR_16BIT+0x6c>
 80038b2:	e07c      	b.n	80039ae <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b4:	f3ef 8310 	mrs	r3, PRIMASK
 80038b8:	617b      	str	r3, [r7, #20]
  return(result);
 80038ba:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f383 8810 	msr	PRIMASK, r3
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4938      	ldr	r1, [pc, #224]	; (80039b8 <UART_RxISR_16BIT+0x170>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	623b      	str	r3, [r7, #32]
  return(result);
 80038ec:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	438a      	bics	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	228c      	movs	r2, #140	; 0x8c
 800391c:	2120      	movs	r1, #32
 800391e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12f      	bne.n	8003994 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003940:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003944:	2301      	movs	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2110      	movs	r1, #16
 800395c:	438a      	bics	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2210      	movs	r2, #16
 8003974:	4013      	ands	r3, r2
 8003976:	2b10      	cmp	r3, #16
 8003978:	d103      	bne.n	8003982 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	225c      	movs	r2, #92	; 0x5c
 8003986:	5a9a      	ldrh	r2, [r3, r2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0011      	movs	r1, r2
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff f927 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003992:	e00c      	b.n	80039ae <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fc ffa6 	bl	80008e8 <HAL_UART_RxCpltCallback>
}
 800399c:	e007      	b.n	80039ae <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2108      	movs	r1, #8
 80039aa:	430a      	orrs	r2, r1
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b010      	add	sp, #64	; 0x40
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	fffffedf 	.word	0xfffffedf

080039bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b09c      	sub	sp, #112	; 0x70
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80039c4:	236a      	movs	r3, #106	; 0x6a
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	2160      	movs	r1, #96	; 0x60
 80039cc:	5a52      	ldrh	r2, [r2, r1]
 80039ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	228c      	movs	r2, #140	; 0x8c
 80039ec:	589b      	ldr	r3, [r3, r2]
 80039ee:	2b22      	cmp	r3, #34	; 0x22
 80039f0:	d000      	beq.n	80039f4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80039f2:	e144      	b.n	8003c7e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80039f4:	235e      	movs	r3, #94	; 0x5e
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	2168      	movs	r1, #104	; 0x68
 80039fc:	5a52      	ldrh	r2, [r2, r1]
 80039fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003a00:	e0eb      	b.n	8003bda <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a08:	215c      	movs	r1, #92	; 0x5c
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	236a      	movs	r3, #106	; 0x6a
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b2d9      	uxtb	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	400a      	ands	r2, r1
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	225e      	movs	r2, #94	; 0x5e
 8003a34:	5a9b      	ldrh	r3, [r3, r2]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	225e      	movs	r2, #94	; 0x5e
 8003a40:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d049      	beq.n	8003ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d010      	beq.n	8003a7c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003a5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2290      	movs	r2, #144	; 0x90
 8003a70:	589b      	ldr	r3, [r3, r2]
 8003a72:	2201      	movs	r2, #1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2190      	movs	r1, #144	; 0x90
 8003a7a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	2202      	movs	r2, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2202      	movs	r2, #2
 8003a92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2290      	movs	r2, #144	; 0x90
 8003a98:	589b      	ldr	r3, [r3, r2]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2190      	movs	r1, #144	; 0x90
 8003aa2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00f      	beq.n	8003acc <UART_RxISR_8BIT_FIFOEN+0x110>
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2290      	movs	r2, #144	; 0x90
 8003ac0:	589b      	ldr	r3, [r3, r2]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2190      	movs	r1, #144	; 0x90
 8003aca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2290      	movs	r2, #144	; 0x90
 8003ad0:	589b      	ldr	r3, [r3, r2]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fc ff2b 	bl	8000934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2290      	movs	r2, #144	; 0x90
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	225e      	movs	r2, #94	; 0x5e
 8003aea:	5a9b      	ldrh	r3, [r3, r2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d173      	bne.n	8003bda <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af2:	f3ef 8310 	mrs	r3, PRIMASK
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003afc:	2301      	movs	r3, #1
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4961      	ldr	r1, [pc, #388]	; (8003c98 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b2e:	2301      	movs	r3, #1
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4955      	ldr	r1, [pc, #340]	; (8003c9c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	228c      	movs	r2, #140	; 0x8c
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d12f      	bne.n	8003bd2 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b78:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7c:	623b      	str	r3, [r7, #32]
  return(result);
 8003b7e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	653b      	str	r3, [r7, #80]	; 0x50
 8003b82:	2301      	movs	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f383 8810 	msr	PRIMASK, r3
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2110      	movs	r1, #16
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d103      	bne.n	8003bc0 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	225c      	movs	r2, #92	; 0x5c
 8003bc4:	5a9a      	ldrh	r2, [r3, r2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff f808 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
 8003bd0:	e003      	b.n	8003bda <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fc fe87 	bl	80008e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003bda:	235e      	movs	r3, #94	; 0x5e
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <UART_RxISR_8BIT_FIFOEN+0x232>
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	2220      	movs	r2, #32
 8003be8:	4013      	ands	r3, r2
 8003bea:	d000      	beq.n	8003bee <UART_RxISR_8BIT_FIFOEN+0x232>
 8003bec:	e709      	b.n	8003a02 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003bee:	204e      	movs	r0, #78	; 0x4e
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	215e      	movs	r1, #94	; 0x5e
 8003bf6:	5a52      	ldrh	r2, [r2, r1]
 8003bf8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003bfa:	0001      	movs	r1, r0
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d044      	beq.n	8003c8e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2268      	movs	r2, #104	; 0x68
 8003c08:	5a9b      	ldrh	r3, [r3, r2]
 8003c0a:	187a      	adds	r2, r7, r1
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d23d      	bcs.n	8003c8e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c18:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003c48:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c50:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	2301      	movs	r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c7c:	e007      	b.n	8003c8e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2108      	movs	r1, #8
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	619a      	str	r2, [r3, #24]
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b01c      	add	sp, #112	; 0x70
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	fffffeff 	.word	0xfffffeff
 8003c9c:	effffffe 	.word	0xeffffffe
 8003ca0:	efffffff 	.word	0xefffffff
 8003ca4:	080036d5 	.word	0x080036d5

08003ca8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b09e      	sub	sp, #120	; 0x78
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003cb0:	2372      	movs	r3, #114	; 0x72
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	2160      	movs	r1, #96	; 0x60
 8003cb8:	5a52      	ldrh	r2, [r2, r1]
 8003cba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	228c      	movs	r2, #140	; 0x8c
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	d000      	beq.n	8003ce0 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003cde:	e144      	b.n	8003f6a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003ce0:	2366      	movs	r3, #102	; 0x66
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	2168      	movs	r1, #104	; 0x68
 8003ce8:	5a52      	ldrh	r2, [r2, r1]
 8003cea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003cec:	e0eb      	b.n	8003ec6 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2272      	movs	r2, #114	; 0x72
 8003d04:	18ba      	adds	r2, r7, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	8812      	ldrh	r2, [r2, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	1c9a      	adds	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	225e      	movs	r2, #94	; 0x5e
 8003d20:	5a9b      	ldrh	r3, [r3, r2]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b299      	uxth	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	225e      	movs	r2, #94	; 0x5e
 8003d2c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d38:	2207      	movs	r2, #7
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d049      	beq.n	8003dd2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d40:	2201      	movs	r2, #1
 8003d42:	4013      	ands	r3, r2
 8003d44:	d010      	beq.n	8003d68 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003d46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2290      	movs	r2, #144	; 0x90
 8003d5c:	589b      	ldr	r3, [r3, r2]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2190      	movs	r1, #144	; 0x90
 8003d66:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d72:	2201      	movs	r2, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2290      	movs	r2, #144	; 0x90
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	2204      	movs	r2, #4
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2190      	movs	r1, #144	; 0x90
 8003d8e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d92:	2204      	movs	r2, #4
 8003d94:	4013      	ands	r3, r2
 8003d96:	d00f      	beq.n	8003db8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2204      	movs	r2, #4
 8003da6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2290      	movs	r2, #144	; 0x90
 8003dac:	589b      	ldr	r3, [r3, r2]
 8003dae:	2202      	movs	r2, #2
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2190      	movs	r1, #144	; 0x90
 8003db6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2290      	movs	r2, #144	; 0x90
 8003dbc:	589b      	ldr	r3, [r3, r2]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fc fdb5 	bl	8000934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2290      	movs	r2, #144	; 0x90
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	225e      	movs	r2, #94	; 0x5e
 8003dd6:	5a9b      	ldrh	r3, [r3, r2]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d173      	bne.n	8003ec6 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dde:	f3ef 8310 	mrs	r3, PRIMASK
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de8:	2301      	movs	r3, #1
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4961      	ldr	r1, [pc, #388]	; (8003f84 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4955      	ldr	r1, [pc, #340]	; (8003f88 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	228c      	movs	r2, #140	; 0x8c
 8003e46:	2120      	movs	r1, #32
 8003e48:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d12f      	bne.n	8003ebe <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e64:	f3ef 8310 	mrs	r3, PRIMASK
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e6e:	2301      	movs	r3, #1
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2110      	movs	r1, #16
 8003e86:	438a      	bics	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d103      	bne.n	8003eac <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	225c      	movs	r2, #92	; 0x5c
 8003eb0:	5a9a      	ldrh	r2, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fe fe92 	bl	8002be0 <HAL_UARTEx_RxEventCallback>
 8003ebc:	e003      	b.n	8003ec6 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7fc fd11 	bl	80008e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ec6:	2366      	movs	r3, #102	; 0x66
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <UART_RxISR_16BIT_FIFOEN+0x232>
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d000      	beq.n	8003eda <UART_RxISR_16BIT_FIFOEN+0x232>
 8003ed8:	e709      	b.n	8003cee <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003eda:	2052      	movs	r0, #82	; 0x52
 8003edc:	183b      	adds	r3, r7, r0
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	215e      	movs	r1, #94	; 0x5e
 8003ee2:	5a52      	ldrh	r2, [r2, r1]
 8003ee4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ee6:	0001      	movs	r1, r0
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d044      	beq.n	8003f7a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2268      	movs	r2, #104	; 0x68
 8003ef4:	5a9b      	ldrh	r3, [r3, r2]
 8003ef6:	187a      	adds	r2, r7, r1
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d23d      	bcs.n	8003f7a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efe:	f3ef 8310 	mrs	r3, PRIMASK
 8003f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	2301      	movs	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	491b      	ldr	r1, [pc, #108]	; (8003f8c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f383 8810 	msr	PRIMASK, r3
}
 8003f2e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003f34:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f3c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f40:	2301      	movs	r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2120      	movs	r1, #32
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f68:	e007      	b.n	8003f7a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2108      	movs	r1, #8
 8003f76:	430a      	orrs	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b01e      	add	sp, #120	; 0x78
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	fffffeff 	.word	0xfffffeff
 8003f88:	effffffe 	.word	0xeffffffe
 8003f8c:	efffffff 	.word	0xefffffff
 8003f90:	08003849 	.word	0x08003849

08003f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2284      	movs	r2, #132	; 0x84
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UARTEx_DisableFifoMode+0x16>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e027      	b.n	800402a <HAL_UARTEx_DisableFifoMode+0x66>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2284      	movs	r2, #132	; 0x84
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2288      	movs	r2, #136	; 0x88
 8003fe6:	2124      	movs	r1, #36	; 0x24
 8003fe8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	438a      	bics	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2288      	movs	r2, #136	; 0x88
 800401c:	2120      	movs	r1, #32
 800401e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2284      	movs	r2, #132	; 0x84
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	dfffffff 	.word	0xdfffffff

08004038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2284      	movs	r2, #132	; 0x84
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e02e      	b.n	80040ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2284      	movs	r2, #132	; 0x84
 8004054:	2101      	movs	r1, #1
 8004056:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2288      	movs	r2, #136	; 0x88
 800405c:	2124      	movs	r1, #36	; 0x24
 800405e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	08d9      	lsrs	r1, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f854 	bl	800413c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2288      	movs	r2, #136	; 0x88
 80040a0:	2120      	movs	r1, #32
 80040a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2284      	movs	r2, #132	; 0x84
 80040a8:	2100      	movs	r1, #0
 80040aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2284      	movs	r2, #132	; 0x84
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e02f      	b.n	8004130 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2284      	movs	r2, #132	; 0x84
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2288      	movs	r2, #136	; 0x88
 80040dc:	2124      	movs	r1, #36	; 0x24
 80040de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f813 	bl	800413c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2288      	movs	r2, #136	; 0x88
 8004122:	2120      	movs	r1, #32
 8004124:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2284      	movs	r2, #132	; 0x84
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}
 8004138:	f1ffffff 	.word	0xf1ffffff

0800413c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004148:	2b00      	cmp	r3, #0
 800414a:	d108      	bne.n	800415e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	226a      	movs	r2, #106	; 0x6a
 8004150:	2101      	movs	r1, #1
 8004152:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2268      	movs	r2, #104	; 0x68
 8004158:	2101      	movs	r1, #1
 800415a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800415c:	e043      	b.n	80041e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800415e:	260f      	movs	r6, #15
 8004160:	19bb      	adds	r3, r7, r6
 8004162:	2208      	movs	r2, #8
 8004164:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004166:	200e      	movs	r0, #14
 8004168:	183b      	adds	r3, r7, r0
 800416a:	2208      	movs	r2, #8
 800416c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	0e5b      	lsrs	r3, r3, #25
 8004176:	b2da      	uxtb	r2, r3
 8004178:	240d      	movs	r4, #13
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2107      	movs	r1, #7
 800417e:	400a      	ands	r2, r1
 8004180:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	0f5b      	lsrs	r3, r3, #29
 800418a:	b2da      	uxtb	r2, r3
 800418c:	250c      	movs	r5, #12
 800418e:	197b      	adds	r3, r7, r5
 8004190:	2107      	movs	r1, #7
 8004192:	400a      	ands	r2, r1
 8004194:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004196:	183b      	adds	r3, r7, r0
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	197a      	adds	r2, r7, r5
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	4914      	ldr	r1, [pc, #80]	; (80041f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80041a0:	5c8a      	ldrb	r2, [r1, r2]
 80041a2:	435a      	muls	r2, r3
 80041a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041a6:	197b      	adds	r3, r7, r5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ae:	0019      	movs	r1, r3
 80041b0:	f7fc f830 	bl	8000214 <__divsi3>
 80041b4:	0003      	movs	r3, r0
 80041b6:	b299      	uxth	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	226a      	movs	r2, #106	; 0x6a
 80041bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041be:	19bb      	adds	r3, r7, r6
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	193a      	adds	r2, r7, r4
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	490a      	ldr	r1, [pc, #40]	; (80041f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80041c8:	5c8a      	ldrb	r2, [r1, r2]
 80041ca:	435a      	muls	r2, r3
 80041cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80041d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041d6:	0019      	movs	r1, r3
 80041d8:	f7fc f81c 	bl	8000214 <__divsi3>
 80041dc:	0003      	movs	r3, r0
 80041de:	b299      	uxth	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2268      	movs	r2, #104	; 0x68
 80041e4:	5299      	strh	r1, [r3, r2]
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b005      	add	sp, #20
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	080042e0 	.word	0x080042e0
 80041f4:	080042e8 	.word	0x080042e8

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	2600      	movs	r6, #0
 80041fc:	4d0c      	ldr	r5, [pc, #48]	; (8004230 <__libc_init_array+0x38>)
 80041fe:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	2600      	movs	r6, #0
 800420a:	f000 f821 	bl	8004250 <_init>
 800420e:	4d0a      	ldr	r5, [pc, #40]	; (8004238 <__libc_init_array+0x40>)
 8004210:	4c0a      	ldr	r4, [pc, #40]	; (800423c <__libc_init_array+0x44>)
 8004212:	1b64      	subs	r4, r4, r5
 8004214:	10a4      	asrs	r4, r4, #2
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	00b3      	lsls	r3, r6, #2
 800421e:	58eb      	ldr	r3, [r5, r3]
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	00b3      	lsls	r3, r6, #2
 8004228:	58eb      	ldr	r3, [r5, r3]
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	080042f0 	.word	0x080042f0
 8004234:	080042f0 	.word	0x080042f0
 8004238:	080042f0 	.word	0x080042f0
 800423c:	080042f4 	.word	0x080042f4

08004240 <memset>:
 8004240:	0003      	movs	r3, r0
 8004242:	1882      	adds	r2, r0, r2
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	7019      	strb	r1, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
