
ProductionLineAutomationDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004318  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004458  08004458  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004458  08004458  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004458  08004458  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000018  08004478  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004478  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb5b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002191  00000000  00000000  0002cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014edb  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d92d  00000000  00000000  00044d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083188  00000000  00000000  00052648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d57d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000d5820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080043b8 	.word	0x080043b8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	080043b8 	.word	0x080043b8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_GPIO_Init+0x40>)
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_GPIO_Init+0x40>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_GPIO_Init+0x40>)
 8000400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_GPIO_Init+0x40>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_GPIO_Init+0x40>)
 8000410:	2104      	movs	r1, #4
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_GPIO_Init+0x40>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041a:	2204      	movs	r2, #4
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <LIN_Check_Sum>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum(uint8_t *buf, uint8_t lens)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	000a      	movs	r2, r1
 800043a:	1cfb      	adds	r3, r7, #3
 800043c:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 800043e:	230b      	movs	r3, #11
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 8000446:	230c      	movs	r3, #12
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	2200      	movs	r2, #0
 800044c:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 800044e:	230f      	movs	r3, #15
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	e011      	b.n	800047c <LIN_Check_Sum+0x4c>
    {
        chm1 += *(buf+i);
 8000458:	200f      	movs	r0, #15
 800045a:	183b      	adds	r3, r7, r0
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	18d3      	adds	r3, r2, r3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b299      	uxth	r1, r3
 8000466:	220c      	movs	r2, #12
 8000468:	18bb      	adds	r3, r7, r2
 800046a:	18ba      	adds	r2, r7, r2
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	188a      	adds	r2, r1, r2
 8000470:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < lens; i++)
 8000472:	183b      	adds	r3, r7, r0
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	183b      	adds	r3, r7, r0
 8000478:	3201      	adds	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	230f      	movs	r3, #15
 800047e:	18fa      	adds	r2, r7, r3
 8000480:	1cfb      	adds	r3, r7, #3
 8000482:	7812      	ldrb	r2, [r2, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	429a      	cmp	r2, r3
 8000488:	d3e6      	bcc.n	8000458 <LIN_Check_Sum+0x28>
    }
    ckm = chm1 / 256;
 800048a:	210c      	movs	r1, #12
 800048c:	187b      	adds	r3, r7, r1
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29a      	uxth	r2, r3
 8000494:	200b      	movs	r0, #11
 8000496:	183b      	adds	r3, r7, r0
 8000498:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b2d9      	uxtb	r1, r3
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	183a      	adds	r2, r7, r0
 80004a4:	7812      	ldrb	r2, [r2, #0]
 80004a6:	188a      	adds	r2, r1, r2
 80004a8:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	0001      	movs	r1, r0
 80004ae:	183a      	adds	r2, r7, r0
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	701a      	strb	r2, [r3, #0]
    return ckm;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	781b      	ldrb	r3, [r3, #0]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LIN_Check_Sum_En>:
** 参    数:  uint8_t *buf：需要计算的数组
			        uint8_t lens：数组长度
** 返 回 值:   uint8_t ckm: 计算结果
****************************************************************************************/
uint8_t LIN_Check_Sum_En(uint8_t *buf, uint8_t lens)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
    uint8_t i, ckm = 0;
 80004d0:	230b      	movs	r3, #11
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
    uint16_t chm1 = 0;
 80004d8:	230c      	movs	r3, #12
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e011      	b.n	800050e <LIN_Check_Sum_En+0x4c>
    {
        chm1 += *(buf+i);
 80004ea:	200f      	movs	r0, #15
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	220c      	movs	r2, #12
 80004fa:	18bb      	adds	r3, r7, r2
 80004fc:	18ba      	adds	r2, r7, r2
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	188a      	adds	r2, r1, r2
 8000502:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < lens; i++)
 8000504:	183b      	adds	r3, r7, r0
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	183b      	adds	r3, r7, r0
 800050a:	3201      	adds	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	230f      	movs	r3, #15
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3e6      	bcc.n	80004ea <LIN_Check_Sum_En+0x28>
    }
    ckm = chm1 / 256;
 800051c:	210c      	movs	r1, #12
 800051e:	187b      	adds	r3, r7, r1
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b29a      	uxth	r2, r3
 8000526:	200b      	movs	r0, #11
 8000528:	183b      	adds	r3, r7, r0
 800052a:	701a      	strb	r2, [r3, #0]
    ckm = ckm + chm1 % 256;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	183b      	adds	r3, r7, r0
 8000534:	183a      	adds	r2, r7, r0
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	188a      	adds	r2, r1, r2
 800053a:	701a      	strb	r2, [r3, #0]
    ckm = 0xFF - ckm;
 800053c:	183b      	adds	r3, r7, r0
 800053e:	0001      	movs	r1, r0
 8000540:	183a      	adds	r2, r7, r0
 8000542:	7812      	ldrb	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
    return ckm;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	781b      	ldrb	r3, [r3, #0]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}

08000554 <LIN_Tx_PID_Data>:
			       CK_Mode: 校验类型增强型LIN_CK_ENHANCED=1：基本LIN_CK_STANDARD=0
             Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID_Data(UART_HandleTypeDef *huart, uint8_t *buf, uint8_t lens, LIN_CK_Mode CK_Mode)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	0019      	movs	r1, r3
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
    if(CK_Mode == LIN_CK_STANDARD)
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10b      	bne.n	800058a <LIN_Tx_PID_Data+0x36>
    {
    	//arr[i] = *(arr + i)
		//计算标准型校验码，不计算PID
		*(buf + lens) = LIN_Check_Sum(buf, LIN_CHECK_STD_NUM);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	18d4      	adds	r4, r2, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2108      	movs	r1, #8
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff ff56 	bl	8000430 <LIN_Check_Sum>
 8000584:	0003      	movs	r3, r0
 8000586:	7023      	strb	r3, [r4, #0]
 8000588:	e00a      	b.n	80005a0 <LIN_Tx_PID_Data+0x4c>
    }
    else
    {
    	//计算增强型校验码,连PID一起校验
		*(buf + lens) = LIN_Check_Sum_En(buf, LIN_CHECK_EN_NUM);
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	18d4      	adds	r4, r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	2109      	movs	r1, #9
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff ff93 	bl	80004c2 <LIN_Check_Sum_En>
 800059c:	0003      	movs	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
    }

    //发送同步间隔段
	HAL_LIN_SendBreak(huart);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 fbdb 	bl	8002d5e <HAL_LIN_SendBreak>
	//发送同步段
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005a8:	2301      	movs	r3, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <LIN_Tx_PID_Data+0x78>)
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	2201      	movs	r2, #1
 80005b2:	f001 ffa7 	bl	8002504 <HAL_UART_Transmit>
	//发送PID,数据内容和校验
	HAL_UART_Transmit(huart,buf,LIN_TX_MAXSIZE,HAL_MAX_DELAY);
 80005b6:	2301      	movs	r3, #1
 80005b8:	425b      	negs	r3, r3
 80005ba:	68b9      	ldr	r1, [r7, #8]
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	220a      	movs	r2, #10
 80005c0:	f001 ffa0 	bl	8002504 <HAL_UART_Transmit>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20000000 	.word	0x20000000

080005d0 <LIN_Tx_PID>:
** 功能描述: LIN发送报文头，PID，读取从机状态信息
** 参    数: PID, Timeout (0xffff)不做时间限制
** 返 回 值: 无
****************************************************************************************/
void LIN_Tx_PID(UART_HandleTypeDef *huart, uint8_t PID)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	000a      	movs	r2, r1
 80005da:	1cfb      	adds	r3, r7, #3
 80005dc:	701a      	strb	r2, [r3, #0]
	//发送间隔帧
	HAL_LIN_SendBreak(huart);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fbbc 	bl	8002d5e <HAL_LIN_SendBreak>
	//发送同步帧
	HAL_UART_Transmit(huart,&SYNC_Frame,1,HAL_MAX_DELAY);
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <LIN_Tx_PID+0x3c>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	f001 ff88 	bl	8002504 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart,&PID,1,HAL_MAX_DELAY);
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	1cf9      	adds	r1, r7, #3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	f001 ff81 	bl	8002504 <HAL_UART_Transmit>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000000 	.word	0x20000000

08000610 <RS232_To_LIN>:

/**
 * RS232 to LIN
 */
void RS232_To_LIN(uint8_t* pRS232Buff)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	LIN_Send_Flag = DISABLE;
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <RS232_To_LIN+0xf0>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0;
 800061e:	210f      	movs	r1, #15
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	chip_Num = pRS232RxBuff[0];
 8000626:	4b37      	ldr	r3, [pc, #220]	; (8000704 <RS232_To_LIN+0xf4>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <RS232_To_LIN+0xf8>)
 800062c:	701a      	strb	r2, [r3, #0]
	EXV_Test_Step = (pRS232RxBuff[1] << 8) | pRS232RxBuff[2];
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <RS232_To_LIN+0xf4>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21a      	sxth	r2, r3
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <RS232_To_LIN+0xf4>)
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <RS232_To_LIN+0xfc>)
 8000644:	801a      	strh	r2, [r3, #0]
	pLINTxBuff[index++] = chip[chip_Num].write_PID;
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <RS232_To_LIN+0xf8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	0018      	movs	r0, r3
 800064c:	187b      	adds	r3, r7, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	000c      	movs	r4, r1
 8000652:	187a      	adds	r2, r7, r1
 8000654:	1c59      	adds	r1, r3, #1
 8000656:	7011      	strb	r1, [r2, #0]
 8000658:	0019      	movs	r1, r3
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <RS232_To_LIN+0x100>)
 800065c:	0083      	lsls	r3, r0, #2
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	3301      	adds	r3, #1
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <RS232_To_LIN+0x104>)
 8000666:	545a      	strb	r2, [r3, r1]
	pLINTxBuff[index++] = pRS232RxBuff[2];
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	193a      	adds	r2, r7, r4
 800066e:	1c59      	adds	r1, r3, #1
 8000670:	7011      	strb	r1, [r2, #0]
 8000672:	001a      	movs	r2, r3
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <RS232_To_LIN+0xf4>)
 8000676:	7899      	ldrb	r1, [r3, #2]
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <RS232_To_LIN+0x104>)
 800067a:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = pRS232RxBuff[1];
 800067c:	193b      	adds	r3, r7, r4
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	193a      	adds	r2, r7, r4
 8000682:	1c59      	adds	r1, r3, #1
 8000684:	7011      	strb	r1, [r2, #0]
 8000686:	001a      	movs	r2, r3
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <RS232_To_LIN+0xf4>)
 800068a:	7859      	ldrb	r1, [r3, #1]
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <RS232_To_LIN+0x104>)
 800068e:	5499      	strb	r1, [r3, r2]
	pLINTxBuff[index++] = chip[chip_Num].EXV_Move_Enable;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <RS232_To_LIN+0xf8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	0018      	movs	r0, r3
 8000696:	193b      	adds	r3, r7, r4
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	193a      	adds	r2, r7, r4
 800069c:	1c59      	adds	r1, r3, #1
 800069e:	7011      	strb	r1, [r2, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <RS232_To_LIN+0x100>)
 80006a4:	0083      	lsls	r3, r0, #2
 80006a6:	18d3      	adds	r3, r2, r3
 80006a8:	3302      	adds	r3, #2
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <RS232_To_LIN+0x104>)
 80006ae:	545a      	strb	r2, [r3, r1]
	pLINTxBuff[index++] = chip[chip_Num].EXV_Init_Request;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <RS232_To_LIN+0xf8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	0018      	movs	r0, r3
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	193a      	adds	r2, r7, r4
 80006bc:	1c59      	adds	r1, r3, #1
 80006be:	7011      	strb	r1, [r2, #0]
 80006c0:	0019      	movs	r1, r3
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <RS232_To_LIN+0x100>)
 80006c4:	0083      	lsls	r3, r0, #2
 80006c6:	18d3      	adds	r3, r2, r3
 80006c8:	3303      	adds	r3, #3
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <RS232_To_LIN+0x104>)
 80006ce:	545a      	strb	r2, [r3, r1]
	//剩余的字节数有0xFF填充
	while(index < LIN_TX_MAXSIZE - 1)
 80006d0:	e009      	b.n	80006e6 <RS232_To_LIN+0xd6>
	{
		pLINTxBuff[index++] = 0xFF;
 80006d2:	220f      	movs	r2, #15
 80006d4:	18bb      	adds	r3, r7, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	18ba      	adds	r2, r7, r2
 80006da:	1c59      	adds	r1, r3, #1
 80006dc:	7011      	strb	r1, [r2, #0]
 80006de:	001a      	movs	r2, r3
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <RS232_To_LIN+0x104>)
 80006e2:	21ff      	movs	r1, #255	; 0xff
 80006e4:	5499      	strb	r1, [r3, r2]
	while(index < LIN_TX_MAXSIZE - 1)
 80006e6:	230f      	movs	r3, #15
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d9f0      	bls.n	80006d2 <RS232_To_LIN+0xc2>
	}
	LIN_Send_Flag = ENABLE;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <RS232_To_LIN+0xf0>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b005      	add	sp, #20
 80006fc:	bd90      	pop	{r4, r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	2000004d 	.word	0x2000004d
 8000704:	20000050 	.word	0x20000050
 8000708:	2000004e 	.word	0x2000004e
 800070c:	2000004a 	.word	0x2000004a
 8000710:	20000004 	.word	0x20000004
 8000714:	20000040 	.word	0x20000040

08000718 <Send_LIN_Data>:

/**
 * 发送LIN数据，包括读取帧和写帧
 */
void Send_LIN_Data()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	if(LIN_Send_Flag)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <Send_LIN_Data+0x50>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <Send_LIN_Data+0x24>
	{
		LIN_Tx_PID_Data(&huart1,pLINTxBuff,LIN_TX_MAXSIZE - 1,LIN_CK_ENHANCED);
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <Send_LIN_Data+0x54>)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <Send_LIN_Data+0x58>)
 8000728:	2301      	movs	r3, #1
 800072a:	2209      	movs	r2, #9
 800072c:	f7ff ff12 	bl	8000554 <LIN_Tx_PID_Data>
		LIN_Send_Flag = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <Send_LIN_Data+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		LIN_Read_Flag = ENABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <Send_LIN_Data+0x5c>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
	}
	if(LIN_Read_Flag)
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <Send_LIN_Data+0x5c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00d      	beq.n	8000760 <Send_LIN_Data+0x48>
	{
		LIN_Tx_PID(&huart1, chip[chip_Num].read_PID);
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <Send_LIN_Data+0x60>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	001a      	movs	r2, r3
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <Send_LIN_Data+0x64>)
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	5cd2      	ldrb	r2, [r2, r3]
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <Send_LIN_Data+0x58>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ff3b 	bl	80005d0 <LIN_Tx_PID>
		HAL_Delay(200);
 800075a:	20c8      	movs	r0, #200	; 0xc8
 800075c:	f000 fc80 	bl	8001060 <HAL_Delay>
	}
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	2000004d 	.word	0x2000004d
 800076c:	20000040 	.word	0x20000040
 8000770:	20000054 	.word	0x20000054
 8000774:	2000004c 	.word	0x2000004c
 8000778:	2000004e 	.word	0x2000004e
 800077c:	20000004 	.word	0x20000004

08000780 <Send_Resp_Data>:

/**
 * 设置响应给RS232上位机的数据
 */
void Send_Resp_Data(uint8_t* pBuff,uint16_t data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	000a      	movs	r2, r1
 800078a:	1cbb      	adds	r3, r7, #2
 800078c:	801a      	strh	r2, [r3, #0]
	*pBuff = data >> 8;
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	701a      	strb	r2, [r3, #0]
	*(pBuff + 1) = data;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	1cba      	adds	r2, r7, #2
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,pBuff,sizeof(data),HAL_MAX_DELAY);
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <Send_Resp_Data+0x58>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	f001 fea7 	bl	8002504 <HAL_UART_Transmit>
	//读取标志位置为不发送读取数据帧
	LIN_Read_Flag = DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <Send_Resp_Data+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	//重置重试的次数为3
	retries = 3;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Send_Resp_Data+0x60>)
 80007be:	2203      	movs	r2, #3
 80007c0:	701a      	strb	r2, [r3, #0]
	//发送响应数据后表示本次测试结束，清空发送数据缓存
	memset(pLINTxBuff,0,LIN_TX_MAXSIZE);
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <Send_Resp_Data+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	2100      	movs	r1, #0
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fded 	bl	80043a8 <memset>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	2000004c 	.word	0x2000004c
 80007e0:	20000001 	.word	0x20000001
 80007e4:	20000040 	.word	0x20000040

080007e8 <LIN_Data_Process>:

/**
 * 数据处理函数
 */
void LIN_Data_Process()
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
	//响应数组
	uint8_t RS232_Resp_Result[2] = {0};
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	801a      	strh	r2, [r3, #0]
	//电机转动步长
	uint16_t EXV_Run_Step = 0;
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
	//通过校验位-校验数据
	uint8_t ckm = 0;
 80007fa:	1d7b      	adds	r3, r7, #5
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	//pLINRxBuff + 1表示从接收的第二个数据开始，因为接收数组第一个是同步段（0x55）
	ckm = LIN_Check_Sum_En(pLINRxBuff + 1,LIN_CHECK_EN_NUM);
 8000800:	4b62      	ldr	r3, [pc, #392]	; (800098c <LIN_Data_Process+0x1a4>)
 8000802:	1d7c      	adds	r4, r7, #5
 8000804:	2109      	movs	r1, #9
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff fe5b 	bl	80004c2 <LIN_Check_Sum_En>
 800080c:	0003      	movs	r3, r0
 800080e:	7023      	strb	r3, [r4, #0]
	//如果校验不通过，丢弃这帧数据
	if(ckm != pLINRxBuff[LIN_RX_MAXSIZE - 1])
 8000810:	4b5f      	ldr	r3, [pc, #380]	; (8000990 <LIN_Data_Process+0x1a8>)
 8000812:	7a9b      	ldrb	r3, [r3, #10]
 8000814:	1d7a      	adds	r2, r7, #5
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d000      	beq.n	800081e <LIN_Data_Process+0x36>
 800081c:	e0b2      	b.n	8000984 <LIN_Data_Process+0x19c>
	{
		return;
	}
	//解析数据具有优先级：LIN通信故障->电机故障->电压异常->温度异常->电机停止标志->判断步长
	//校验LIN通信故障反馈
	if((pLINRxBuff[2] & EXV_F_RESP_COMP) == EXV_F_RESP_ERROR)
 800081e:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <LIN_Data_Process+0x1a8>)
 8000820:	789b      	ldrb	r3, [r3, #2]
 8000822:	001a      	movs	r2, r3
 8000824:	2301      	movs	r3, #1
 8000826:	4013      	ands	r3, r2
 8000828:	d006      	beq.n	8000838 <LIN_Data_Process+0x50>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_LIN_COMM_ERROR);
 800082a:	4a5a      	ldr	r2, [pc, #360]	; (8000994 <LIN_Data_Process+0x1ac>)
 800082c:	003b      	movs	r3, r7
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ffa5 	bl	8000780 <Send_Resp_Data>
 8000836:	e09e      	b.n	8000976 <LIN_Data_Process+0x18e>
	}
	//校验故障状态
	else if((pLINRxBuff[3] & EXV_ST_FAULT_COMP) > 0)
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <LIN_Data_Process+0x1a8>)
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	001a      	movs	r2, r3
 800083e:	230f      	movs	r3, #15
 8000840:	4013      	ands	r3, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd31      	ble.n	80008aa <LIN_Data_Process+0xc2>
	{
		uint8_t fault_index = pLINRxBuff[3] & EXV_ST_FAULT_COMP;
 8000846:	4b52      	ldr	r3, [pc, #328]	; (8000990 <LIN_Data_Process+0x1a8>)
 8000848:	78da      	ldrb	r2, [r3, #3]
 800084a:	1cfb      	adds	r3, r7, #3
 800084c:	210f      	movs	r1, #15
 800084e:	400a      	ands	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
		switch(fault_index)
 8000852:	1cfb      	adds	r3, r7, #3
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d020      	beq.n	800089c <LIN_Data_Process+0xb4>
 800085a:	dd00      	ble.n	800085e <LIN_Data_Process+0x76>
 800085c:	e08b      	b.n	8000976 <LIN_Data_Process+0x18e>
 800085e:	2b03      	cmp	r3, #3
 8000860:	d014      	beq.n	800088c <LIN_Data_Process+0xa4>
 8000862:	dd00      	ble.n	8000866 <LIN_Data_Process+0x7e>
 8000864:	e087      	b.n	8000976 <LIN_Data_Process+0x18e>
 8000866:	2b01      	cmp	r3, #1
 8000868:	d002      	beq.n	8000870 <LIN_Data_Process+0x88>
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <LIN_Data_Process+0x96>
 800086e:	e082      	b.n	8000976 <LIN_Data_Process+0x18e>
		{
		case EXV_ST_FAULT_SHORTED:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_SHORT);
 8000870:	4a49      	ldr	r2, [pc, #292]	; (8000998 <LIN_Data_Process+0x1b0>)
 8000872:	003b      	movs	r3, r7
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff ff82 	bl	8000780 <Send_Resp_Data>
			break;
 800087c:	e07b      	b.n	8000976 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_OPENLOAD:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_MC_LOADOPEN);
 800087e:	4a47      	ldr	r2, [pc, #284]	; (800099c <LIN_Data_Process+0x1b4>)
 8000880:	003b      	movs	r3, r7
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff7b 	bl	8000780 <Send_Resp_Data>
			break;
 800088a:	e074      	b.n	8000976 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_OVERTEMP:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_SHUTDOWN);
 800088c:	23e2      	movs	r3, #226	; 0xe2
 800088e:	009a      	lsls	r2, r3, #2
 8000890:	003b      	movs	r3, r7
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff73 	bl	8000780 <Send_Resp_Data>
			break;
 800089a:	e06c      	b.n	8000976 <LIN_Data_Process+0x18e>
		case EXV_ST_FAULT_ACTUATORFAULT:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ACTUATOR_FAULT);
 800089c:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <LIN_Data_Process+0x1b8>)
 800089e:	003b      	movs	r3, r7
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff ff6c 	bl	8000780 <Send_Resp_Data>
			break;
 80008a8:	e065      	b.n	8000976 <LIN_Data_Process+0x18e>
		}
	}
	//校验电压状态
	else if((pLINRxBuff[3] & EXV_ST_VOLTAGE_COMP) > 0)
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <LIN_Data_Process+0x1a8>)
 80008ac:	78db      	ldrb	r3, [r3, #3]
 80008ae:	001a      	movs	r2, r3
 80008b0:	2330      	movs	r3, #48	; 0x30
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dd1a      	ble.n	80008ee <LIN_Data_Process+0x106>
	{
		uint8_t voltage_index = pLINRxBuff[3] & EXV_ST_VOLTAGE_COMP;
 80008b8:	4b35      	ldr	r3, [pc, #212]	; (8000990 <LIN_Data_Process+0x1a8>)
 80008ba:	78da      	ldrb	r2, [r3, #3]
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2130      	movs	r1, #48	; 0x30
 80008c0:	400a      	ands	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
		switch(voltage_index)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d002      	beq.n	80008d2 <LIN_Data_Process+0xea>
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d007      	beq.n	80008e0 <LIN_Data_Process+0xf8>
 80008d0:	e051      	b.n	8000976 <LIN_Data_Process+0x18e>
		{
		case EXV_ST_VOLTAGE_OVER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVER_VOLTAGE);
 80008d2:	4a34      	ldr	r2, [pc, #208]	; (80009a4 <LIN_Data_Process+0x1bc>)
 80008d4:	003b      	movs	r3, r7
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff51 	bl	8000780 <Send_Resp_Data>
			break;
 80008de:	e04a      	b.n	8000976 <LIN_Data_Process+0x18e>
		case EXV_ST_VOLTAGE_UNDER:
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_UNDER_VOLTAGE);
 80008e0:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <LIN_Data_Process+0x1c0>)
 80008e2:	003b      	movs	r3, r7
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff ff4a 	bl	8000780 <Send_Resp_Data>
			break;
 80008ec:	e043      	b.n	8000976 <LIN_Data_Process+0x18e>
		}
	}
	//校验温度状态
	else if((pLINRxBuff[3] & EXV_OVERTEMP_COMP) == EXV_OVERTEMP_OVER)
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <LIN_Data_Process+0x1a8>)
 80008f0:	78db      	ldrb	r3, [r3, #3]
 80008f2:	001a      	movs	r2, r3
 80008f4:	23c0      	movs	r3, #192	; 0xc0
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b40      	cmp	r3, #64	; 0x40
 80008fa:	d107      	bne.n	800090c <LIN_Data_Process+0x124>
	{
		Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OVERTEMP);
 80008fc:	23e3      	movs	r3, #227	; 0xe3
 80008fe:	009a      	lsls	r2, r3, #2
 8000900:	003b      	movs	r3, r7
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ff3b 	bl	8000780 <Send_Resp_Data>
 800090a:	e034      	b.n	8000976 <LIN_Data_Process+0x18e>
	}
	//电机停止转动
	else if((pLINRxBuff[2] & EXV_ST_RUN_COMP) == EXV_ST_RUN_NOT_MOVE)
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <LIN_Data_Process+0x1a8>)
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	001a      	movs	r2, r3
 8000912:	2310      	movs	r3, #16
 8000914:	4013      	ands	r3, r2
 8000916:	d12e      	bne.n	8000976 <LIN_Data_Process+0x18e>
	{
		//计算电机转动步长，步长低字节在前高字节在后
		EXV_Run_Step = (pLINRxBuff[5] << 8) | pLINRxBuff[4];
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <LIN_Data_Process+0x1a8>)
 800091a:	795b      	ldrb	r3, [r3, #5]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <LIN_Data_Process+0x1a8>)
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21a      	sxth	r2, r3
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	801a      	strh	r2, [r3, #0]
		if(EXV_Run_Step == EXV_Test_Step)
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <LIN_Data_Process+0x1c4>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	1dba      	adds	r2, r7, #6
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d107      	bne.n	800094a <LIN_Data_Process+0x162>
		{
			Send_Resp_Data(RS232_Resp_Result,RS232_RESP_OK);
 800093a:	23e1      	movs	r3, #225	; 0xe1
 800093c:	009a      	lsls	r2, r3, #2
 800093e:	003b      	movs	r3, r7
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff ff1c 	bl	8000780 <Send_Resp_Data>
 8000948:	e015      	b.n	8000976 <LIN_Data_Process+0x18e>
		}
		//重试3次发送电机运动使能
		else
		{
			LIN_Send_Flag = ENABLE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <LIN_Data_Process+0x1c8>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
			retries--;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <LIN_Data_Process+0x1cc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <LIN_Data_Process+0x1cc>)
 800095a:	701a      	strb	r2, [r3, #0]
			//当3次电机运动使能后，电机转动步长与测试步长不一致，发送错误信息
			if(retries <= 0)
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <LIN_Data_Process+0x1cc>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d108      	bne.n	8000976 <LIN_Data_Process+0x18e>
			{
				Send_Resp_Data(RS232_Resp_Result,RS232_RESP_ERROR);
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <LIN_Data_Process+0x1d0>)
 8000966:	003b      	movs	r3, r7
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff08 	bl	8000780 <Send_Resp_Data>
				//发送标志置为不发送写数据帧
				LIN_Send_Flag = DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <LIN_Data_Process+0x1c8>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//这帧数据解析完成，清空接收缓存数据
	memset(pLINRxBuff,0,LIN_RX_MAXSIZE);
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <LIN_Data_Process+0x1a8>)
 8000978:	220b      	movs	r2, #11
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fd13 	bl	80043a8 <memset>
 8000982:	e000      	b.n	8000986 <LIN_Data_Process+0x19e>
		return;
 8000984:	46c0      	nop			; (mov r8, r8)
}
 8000986:	46bd      	mov	sp, r7
 8000988:	b003      	add	sp, #12
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	20000035 	.word	0x20000035
 8000990:	20000034 	.word	0x20000034
 8000994:	00000385 	.word	0x00000385
 8000998:	00000386 	.word	0x00000386
 800099c:	00000387 	.word	0x00000387
 80009a0:	00000389 	.word	0x00000389
 80009a4:	0000038a 	.word	0x0000038a
 80009a8:	0000038b 	.word	0x0000038b
 80009ac:	2000004a 	.word	0x2000004a
 80009b0:	2000004d 	.word	0x2000004d
 80009b4:	20000001 	.word	0x20000001
 80009b8:	0000038d 	.word	0x0000038d

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fac8 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f816 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff fd10 	bl	80003ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009cc:	f000 f942 	bl	8000c54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009d0:	f000 f98e 	bl	8000cf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //开启中断接收
  Util_Receive_IT(&huart1);
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <main+0x30>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f854 	bl	8000a84 <Util_Receive_IT>
  Util_Receive_IT(&huart2);
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <main+0x34>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f850 	bl	8000a84 <Util_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //循环发送数据
	  Send_LIN_Data();
 80009e4:	f7ff fe98 	bl	8000718 <Send_LIN_Data>
 80009e8:	e7fc      	b.n	80009e4 <main+0x28>
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000054 	.word	0x20000054
 80009f0:	200000e8 	.word	0x200000e8

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b093      	sub	sp, #76	; 0x4c
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	2414      	movs	r4, #20
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	0018      	movs	r0, r3
 8000a00:	2334      	movs	r3, #52	; 0x34
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f003 fccf 	bl	80043a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2310      	movs	r3, #16
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 fcc8 	bl	80043a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fe67 	bl	80016f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2202      	movs	r2, #2
 8000a26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fe9f 	bl	8001788 <HAL_RCC_OscConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a4e:	f000 f89d 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 f99a 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a78:	f000 f888 	bl	8000b8c <Error_Handler>
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b013      	add	sp, #76	; 0x4c
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <Util_Receive_IT>:
/* USER CODE BEGIN 4 */
/**
 * 重写接收中断函数
 */
void Util_Receive_IT(UART_HandleTypeDef *huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <Util_Receive_IT+0x4c>)
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d10a      	bne.n	8000aaa <Util_Receive_IT+0x26>
	{
		if(HAL_UART_Receive_IT(huart, pLINRxBuff, LIN_RX_MAXSIZE) != HAL_OK)
 8000a94:	490f      	ldr	r1, [pc, #60]	; (8000ad4 <Util_Receive_IT+0x50>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	220b      	movs	r2, #11
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fdce 	bl	800263c <HAL_UART_Receive_IT>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d010      	beq.n	8000ac6 <Util_Receive_IT+0x42>
		{
			Error_Handler();
 8000aa4:	f000 f872 	bl	8000b8c <Error_Handler>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 8000aa8:	e00d      	b.n	8000ac6 <Util_Receive_IT+0x42>
	else if(huart == &huart2)
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <Util_Receive_IT+0x54>)
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d109      	bne.n	8000ac6 <Util_Receive_IT+0x42>
		if(HAL_UART_Receive_IT(huart, pRS232RxBuff, RS232_MAXSIZE) != HAL_OK)
 8000ab2:	490a      	ldr	r1, [pc, #40]	; (8000adc <Util_Receive_IT+0x58>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 fdbf 	bl	800263c <HAL_UART_Receive_IT>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <Util_Receive_IT+0x42>
			Error_Handler();
 8000ac2:	f000 f863 	bl	8000b8c <Error_Handler>
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000054 	.word	0x20000054
 8000ad4:	20000034 	.word	0x20000034
 8000ad8:	200000e8 	.word	0x200000e8
 8000adc:	20000050 	.word	0x20000050

08000ae0 <HAL_UART_RxCpltCallback>:
 * @brief Rx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	//LIN协议
	if(huart == &huart1)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_RxCpltCallback+0x50>)
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d102      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x16>
	{
		LIN_Data_Process();
 8000af0:	f7ff fe7a 	bl	80007e8 <LIN_Data_Process>
 8000af4:	e014      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x40>
	}
	//RS232协议
	else if(huart == &huart2)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_RxCpltCallback+0x54>)
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d110      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x40>
	{
		HAL_UART_Transmit(&huart2, pRS232RxBuff, RS232_MAXSIZE, HAL_MAX_DELAY);
 8000afe:	2301      	movs	r3, #1
 8000b00:	425b      	negs	r3, r3
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <HAL_UART_RxCpltCallback+0x54>)
 8000b06:	2203      	movs	r2, #3
 8000b08:	f001 fcfc 	bl	8002504 <HAL_UART_Transmit>
		RS232_To_LIN(pRS232RxBuff);
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fd7e 	bl	8000610 <RS232_To_LIN>
		memset(pRS232RxBuff,0,RS232_MAXSIZE);
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fc44 	bl	80043a8 <memset>
	}
	Util_Receive_IT(huart);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ffae 	bl	8000a84 <Util_Receive_IT>
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000054 	.word	0x20000054
 8000b34:	200000e8 	.word	0x200000e8
 8000b38:	20000050 	.word	0x20000050

08000b3c <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	//解决串口溢出，导致不断进入串口中断函数，使MCU过载的问题
	if(HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 f931 	bl	8002dae <HAL_UART_GetError>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	2208      	movs	r2, #8
 8000b50:	4013      	ands	r3, r2
 8000b52:	d017      	beq.n	8000b84 <HAL_UART_ErrorCallback+0x48>
	{
		//清除ORE标志位
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2108      	movs	r1, #8
 8000b60:	430a      	orrs	r2, r1
 8000b62:	619a      	str	r2, [r3, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2110      	movs	r1, #16
 8000b70:	430a      	orrs	r2, r1
 8000b72:	619a      	str	r2, [r3, #24]
		Util_Receive_IT(huart);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ff84 	bl	8000a84 <Util_Receive_IT>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2290      	movs	r2, #144	; 0x90
 8000b80:	2100      	movs	r1, #0
 8000b82:	5099      	str	r1, [r3, r2]
	}
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fa66 	bl	80010a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 fa0c 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <USART1_IRQHandler+0x14>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 fd64 	bl	80026ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000054 	.word	0x20000054

08000c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <USART2_IRQHandler+0x14>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 fd58 	bl	80026ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	200000e8 	.word	0x200000e8

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c5a:	4a24      	ldr	r2, [pc, #144]	; (8000cec <MX_USART1_UART_Init+0x98>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c60:	2296      	movs	r2, #150	; 0x96
 8000c62:	01d2      	lsls	r2, r2, #7
 8000c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fbb5 	bl	8002410 <HAL_LIN_Init>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000caa:	f7ff ff6f 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f003 fa74 	bl	80041a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000cbc:	f7ff ff66 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f003 faab 	bl	8004220 <HAL_UARTEx_SetRxFifoThreshold>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000cce:	f7ff ff5d 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 fa29 	bl	800412c <HAL_UARTEx_DisableFifoMode>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f7ff ff55 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	40013800 	.word	0x40013800

08000cf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <MX_USART2_UART_Init+0x98>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000cfc:	22e1      	movs	r2, #225	; 0xe1
 8000cfe:	0252      	lsls	r2, r2, #9
 8000d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 fb12 	bl	8002364 <HAL_UART_Init>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d44:	f7ff ff22 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f003 fa27 	bl	80041a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d56:	f7ff ff19 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 fa5e 	bl	8004220 <HAL_UARTEx_SetRxFifoThreshold>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d68:	f7ff ff10 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x94>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f003 f9dc 	bl	800412c <HAL_UARTEx_DisableFifoMode>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f7ff ff08 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	200000e8 	.word	0x200000e8
 8000d88:	40004400 	.word	0x40004400

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b093      	sub	sp, #76	; 0x4c
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	2334      	movs	r3, #52	; 0x34
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2314      	movs	r3, #20
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f003 fb02 	bl	80043a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	2418      	movs	r4, #24
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	231c      	movs	r3, #28
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f003 fafa 	bl	80043a8 <memset>
  if(uartHandle->Instance==USART1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_UART_MspInit+0x164>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d146      	bne.n	8000e4c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 f995 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dd6:	f7ff fed9 	bl	8000b8c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	01c9      	lsls	r1, r1, #7
 8000de4:	430a      	orrs	r2, r1
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
 8000de8:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4013      	ands	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
 8000e02:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	2204      	movs	r2, #4
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2134      	movs	r1, #52	; 0x34
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2202      	movs	r2, #2
 8000e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_UART_MspInit+0x16c>)
 8000e32:	0019      	movs	r1, r3
 8000e34:	0010      	movs	r0, r2
 8000e36:	f000 faf7 	bl	8001428 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	201b      	movs	r0, #27
 8000e40:	f000 f9f4 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e44:	201b      	movs	r0, #27
 8000e46:	f000 fa06 	bl	8001256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e4a:	e04c      	b.n	8000ee6 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_UART_MspInit+0x170>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d147      	bne.n	8000ee6 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e56:	2118      	movs	r1, #24
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 f948 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000e70:	f7ff fe8c 	bl	8000b8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	0289      	lsls	r1, r1, #10
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e96:	2101      	movs	r1, #1
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x168>)
 8000e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea8:	2134      	movs	r1, #52	; 0x34
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	220c      	movs	r2, #12
 8000eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	187a      	adds	r2, r7, r1
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 faa9 	bl	8001428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201c      	movs	r0, #28
 8000edc:	f000 f9a6 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f000 f9b8 	bl	8001256 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b013      	add	sp, #76	; 0x4c
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	50000800 	.word	0x50000800
 8000efc:	40004400 	.word	0x40004400

08000f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f04:	f7ff fea0 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2e:	f003 fa17 	bl	8004360 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f32:	f7ff fd43 	bl	80009bc <main>

08000f36 <LoopForever>:

LoopForever:
  b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   r0, =_estack
 8000f38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f44:	08004460 	.word	0x08004460
  ldr r2, =_sbss
 8000f48:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f4c:	20000180 	.word	0x20000180

08000f50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x3c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Init+0x3c>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0049      	lsls	r1, r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f810 	bl	8000f94 <HAL_InitTick>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e001      	b.n	8000f84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe0a 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_InitTick+0x88>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d02b      	beq.n	8001004 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_InitTick+0x8c>)
 8000fae:	681c      	ldr	r4, [r3, #0]
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_InitTick+0x88>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	23fa      	movs	r3, #250	; 0xfa
 8000fb8:	0098      	lsls	r0, r3, #2
 8000fba:	f7ff f8a1 	bl	8000100 <__udivsi3>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	0020      	movs	r0, r4
 8000fc4:	f7ff f89c 	bl	8000100 <__udivsi3>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f953 	bl	8001276 <HAL_SYSTICK_Config>
 8000fd0:	1e03      	subs	r3, r0, #0
 8000fd2:	d112      	bne.n	8000ffa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d80a      	bhi.n	8000ff0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 f922 	bl	800122c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_InitTick+0x90>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00d      	b.n	800100c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e008      	b.n	800100c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e003      	b.n	800100c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	781b      	ldrb	r3, [r3, #0]
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b005      	add	sp, #20
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	20000014 	.word	0x20000014
 8001020:	2000000c 	.word	0x2000000c
 8001024:	20000010 	.word	0x20000010

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	001a      	movs	r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x20>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	18d2      	adds	r2, r2, r3
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_IncTick+0x20>)
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000014 	.word	0x20000014
 8001048:	2000017c 	.word	0x2000017c

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	2000017c 	.word	0x2000017c

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff fff0 	bl	800104c <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	001a      	movs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	189b      	adds	r3, r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	f7ff ffe0 	bl	800104c <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b004      	add	sp, #16
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000014 	.word	0x20000014

080010a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	0019      	movs	r1, r3
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40010000 	.word	0x40010000
 80010d0:	fffff9ff 	.word	0xfffff9ff

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	0002      	movs	r2, r0
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b7f      	cmp	r3, #127	; 0x7f
 80010e6:	d809      	bhi.n	80010fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	001a      	movs	r2, r3
 80010ee:	231f      	movs	r3, #31
 80010f0:	401a      	ands	r2, r3
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_EnableIRQ+0x30>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	4091      	lsls	r1, r2
 80010f8:	000a      	movs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b7f      	cmp	r3, #127	; 0x7f
 800111c:	d828      	bhi.n	8001170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <__NVIC_SetPriority+0xd4>)
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	33c0      	adds	r3, #192	; 0xc0
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	589b      	ldr	r3, [r3, r2]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	; 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	; 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <__NVIC_SetPriority+0xd4>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	430a      	orrs	r2, r1
 8001168:	33c0      	adds	r3, #192	; 0xc0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800116e:	e031      	b.n	80011d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <__NVIC_SetPriority+0xd8>)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0019      	movs	r1, r3
 8001178:	230f      	movs	r3, #15
 800117a:	400b      	ands	r3, r1
 800117c:	3b08      	subs	r3, #8
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3306      	adds	r3, #6
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1dfa      	adds	r2, r7, #7
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	0011      	movs	r1, r2
 8001190:	2203      	movs	r2, #3
 8001192:	400a      	ands	r2, r1
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	21ff      	movs	r1, #255	; 0xff
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	019b      	lsls	r3, r3, #6
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	401a      	ands	r2, r3
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	2303      	movs	r3, #3
 80011b2:	4003      	ands	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <__NVIC_SetPriority+0xd8>)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001c      	movs	r4, r3
 80011c0:	230f      	movs	r3, #15
 80011c2:	4023      	ands	r3, r4
 80011c4:	3b08      	subs	r3, #8
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	430a      	orrs	r2, r1
 80011ca:	3306      	adds	r3, #6
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	18c3      	adds	r3, r0, r3
 80011d0:	3304      	adds	r3, #4
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b003      	add	sp, #12
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	045b      	lsls	r3, r3, #17
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d301      	bcc.n	80011fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f8:	2301      	movs	r3, #1
 80011fa:	e010      	b.n	800121e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <SysTick_Config+0x44>)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	3a01      	subs	r2, #1
 8001202:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	2103      	movs	r1, #3
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff ff7c 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x44>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x44>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	210f      	movs	r1, #15
 8001238:	187b      	adds	r3, r7, r1
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	187b      	adds	r3, r7, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b004      	add	sp, #16
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	0002      	movs	r2, r0
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b25b      	sxtb	r3, r3
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff33 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff ffaf 	bl	80011e4 <SysTick_Config>
 8001286:	0003      	movs	r3, r0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e050      	b.n	8001344 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2225      	movs	r2, #37	; 0x25
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e041      	b.n	8001344 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	210e      	movs	r1, #14
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	491c      	ldr	r1, [pc, #112]	; (800134c <HAL_DMA_Abort+0xbc>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2101      	movs	r1, #1
 80012ec:	438a      	bics	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_DMA_Abort+0xc0>)
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	221c      	movs	r2, #28
 80012fa:	4013      	ands	r3, r2
 80012fc:	2201      	movs	r2, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_DMA_Abort+0xc0>)
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800130e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00c      	beq.n	8001332 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_DMA_Abort+0xbc>)
 8001324:	400a      	ands	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001330:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2225      	movs	r2, #37	; 0x25
 8001336:	2101      	movs	r1, #1
 8001338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2224      	movs	r2, #36	; 0x24
 800133e:	2100      	movs	r1, #0
 8001340:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	fffffeff 	.word	0xfffffeff
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	210f      	movs	r1, #15
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2225      	movs	r2, #37	; 0x25
 8001368:	5c9b      	ldrb	r3, [r3, r2]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d006      	beq.n	800137e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2204      	movs	r2, #4
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e049      	b.n	8001412 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	210e      	movs	r1, #14
 800138a:	438a      	bics	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	491d      	ldr	r1, [pc, #116]	; (8001420 <HAL_DMA_Abort_IT+0xcc>)
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_DMA_Abort_IT+0xd0>)
 80013b0:	6859      	ldr	r1, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	221c      	movs	r2, #28
 80013b8:	4013      	ands	r3, r2
 80013ba:	2201      	movs	r2, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_DMA_Abort_IT+0xd0>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e0:	490f      	ldr	r1, [pc, #60]	; (8001420 <HAL_DMA_Abort_IT+0xcc>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2225      	movs	r2, #37	; 0x25
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	0010      	movs	r0, r2
 8001410:	4798      	blx	r3
    }
  }
  return status;
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}
 8001420:	fffffeff 	.word	0xfffffeff
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e147      	b.n	80016c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <HAL_GPIO_Init+0x28>
 800144e:	e138      	b.n	80016c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	2201      	movs	r2, #1
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	58d3      	ldr	r3, [r2, r3]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2107      	movs	r1, #7
 800153e:	400b      	ands	r3, r1
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	401a      	ands	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_GPIO_Init+0x174>
 800159a:	e092      	b.n	80016c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3318      	adds	r3, #24
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	589b      	ldr	r3, [r3, r2]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2203      	movs	r2, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	220f      	movs	r2, #15
 80015b4:	409a      	lsls	r2, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	23a0      	movs	r3, #160	; 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x1ca>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x1c6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <HAL_GPIO_Init+0x2c0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x1c2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x1be>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x1cc>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x1cc>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x1cc>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x1cc>
 80015f2:	2300      	movs	r3, #0
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	2103      	movs	r1, #3
 80015f8:	400a      	ands	r2, r1
 80015fa:	00d2      	lsls	r2, r2, #3
 80015fc:	4093      	lsls	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001604:	4936      	ldr	r1, [pc, #216]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3318      	adds	r3, #24
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	035b      	lsls	r3, r3, #13
 800162a:	4013      	ands	r3, r2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43da      	mvns	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	039b      	lsls	r3, r3, #14
 8001654:	4013      	ands	r3, r2
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001668:	2384      	movs	r3, #132	; 0x84
 800166a:	58d3      	ldr	r3, [r2, r3]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800168c:	4914      	ldr	r1, [pc, #80]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 800168e:	2284      	movs	r2, #132	; 0x84
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	025b      	lsls	r3, r3, #9
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	1e13      	subs	r3, r2, #0
 80016d2:	d000      	beq.n	80016d6 <HAL_GPIO_Init+0x2ae>
 80016d4:	e6b0      	b.n	8001438 <HAL_GPIO_Init+0x10>
  }
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b006      	add	sp, #24
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021800 	.word	0x40021800
 80016e4:	50000400 	.word	0x50000400
 80016e8:	50000800 	.word	0x50000800
 80016ec:	50000c00 	.word	0x50000c00

080016f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016fe:	4013      	ands	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d11f      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	0013      	movs	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	189b      	adds	r3, r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4912      	ldr	r1, [pc, #72]	; (800176c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001722:	0018      	movs	r0, r3
 8001724:	f7fe fcec 	bl	8000100 <__udivsi3>
 8001728:	0003      	movs	r3, r0
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800172e:	e008      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3b01      	subs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e001      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e009      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	401a      	ands	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	429a      	cmp	r2, r3
 8001752:	d0ed      	beq.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40007000 	.word	0x40007000
 8001764:	fffff9ff 	.word	0xfffff9ff
 8001768:	2000000c 	.word	0x2000000c
 800176c:	000f4240 	.word	0x000f4240

08001770 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	23e0      	movs	r3, #224	; 0xe0
 800177a:	01db      	lsls	r3, r3, #7
 800177c:	4013      	ands	r3, r2
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e2f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x1e>
 80017a4:	e07c      	b.n	80018a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a6:	4bc3      	ldr	r3, [pc, #780]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b0:	4bc0      	ldr	r3, [pc, #768]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2203      	movs	r2, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d102      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3e>
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d002      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4bb9      	ldr	r3, [pc, #740]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d062      	beq.n	800189e <HAL_RCC_OscConfig+0x116>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d15e      	bne.n	800189e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2ce      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_OscConfig+0x78>
 80017f0:	4bb0      	ldr	r3, [pc, #704]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4baf      	ldr	r3, [pc, #700]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0249      	lsls	r1, r1, #9
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e020      	b.n	8001842 <HAL_RCC_OscConfig+0xba>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	23a0      	movs	r3, #160	; 0xa0
 8001806:	02db      	lsls	r3, r3, #11
 8001808:	429a      	cmp	r2, r3
 800180a:	d10e      	bne.n	800182a <HAL_RCC_OscConfig+0xa2>
 800180c:	4ba9      	ldr	r3, [pc, #676]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4ba8      	ldr	r3, [pc, #672]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	02c9      	lsls	r1, r1, #11
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	4ba6      	ldr	r3, [pc, #664]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4ba5      	ldr	r3, [pc, #660]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0249      	lsls	r1, r1, #9
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0xba>
 800182a:	4ba2      	ldr	r3, [pc, #648]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4ba1      	ldr	r3, [pc, #644]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001830:	49a1      	ldr	r1, [pc, #644]	; (8001ab8 <HAL_RCC_OscConfig+0x330>)
 8001832:	400a      	ands	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b9f      	ldr	r3, [pc, #636]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b9e      	ldr	r3, [pc, #632]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800183c:	499f      	ldr	r1, [pc, #636]	; (8001abc <HAL_RCC_OscConfig+0x334>)
 800183e:	400a      	ands	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d014      	beq.n	8001874 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fbff 	bl	800104c <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fbfa 	bl	800104c <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e28d      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001866:	4b93      	ldr	r3, [pc, #588]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xcc>
 8001872:	e015      	b.n	80018a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fbea 	bl	800104c <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187e:	f7ff fbe5 	bl	800104c <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e278      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001890:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0xf6>
 800189c:	e000      	b.n	80018a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d100      	bne.n	80018ac <HAL_RCC_OscConfig+0x124>
 80018aa:	e099      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2238      	movs	r2, #56	; 0x38
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0x144>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d002      	beq.n	80018d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d135      	bne.n	800193e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x162>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e24b      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <HAL_RCC_OscConfig+0x338>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	021a      	lsls	r2, r3, #8
 80018fa:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001906:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x33c>)
 800190c:	4013      	ands	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800191a:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0adb      	lsrs	r3, r3, #11
 8001920:	2207      	movs	r2, #7
 8001922:	4013      	ands	r3, r2
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x340>)
 8001926:	40da      	lsrs	r2, r3
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x344>)
 800192a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x348>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fb2f 	bl	8000f94 <HAL_InitTick>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d051      	beq.n	80019de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e221      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d030      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5e      	ldr	r2, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x33c>)
 800194c:	4013      	ands	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800195a:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0049      	lsls	r1, r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fb70 	bl	800104c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fb6b 	bl	800104c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1fe      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_RCC_OscConfig+0x338>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	021a      	lsls	r2, r3, #8
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019a8:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	4949      	ldr	r1, [pc, #292]	; (8001ad4 <HAL_RCC_OscConfig+0x34c>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb4a 	bl	800104c <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fb45 	bl	800104c <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1d8      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x236>
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2208      	movs	r2, #8
 80019e6:	4013      	ands	r3, r2
 80019e8:	d047      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2238      	movs	r2, #56	; 0x38
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b18      	cmp	r3, #24
 80019f4:	d10a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	2202      	movs	r2, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d138      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e1ba      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d019      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fb14 	bl	800104c <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fb0f 	bl	800104c <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1a2      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f1      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2a2>
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fafa 	bl	800104c <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff faf5 	bl	800104c <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e188      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f1      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2fe>
 8001a84:	e0c6      	b.n	8001c14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	231f      	movs	r3, #31
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2238      	movs	r2, #56	; 0x38
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d11e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x31e>
 8001aa4:	e0b6      	b.n	8001c14 <HAL_RCC_OscConfig+0x48c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d000      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x328>
 8001aae:	e0b1      	b.n	8001c14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e166      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	fffeffff 	.word	0xfffeffff
 8001abc:	fffbffff 	.word	0xfffbffff
 8001ac0:	ffff80ff 	.word	0xffff80ff
 8001ac4:	ffffc7ff 	.word	0xffffc7ff
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad8:	4bac      	ldr	r3, [pc, #688]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	055b      	lsls	r3, r3, #21
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x360>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x362>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d011      	beq.n	8001b12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4ba7      	ldr	r3, [pc, #668]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af2:	4ba6      	ldr	r3, [pc, #664]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0549      	lsls	r1, r1, #21
 8001af8:	430a      	orrs	r2, r1
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001afc:	4ba3      	ldr	r3, [pc, #652]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <HAL_RCC_OscConfig+0x608>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d11a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1e:	4b9c      	ldr	r3, [pc, #624]	; (8001d90 <HAL_RCC_OscConfig+0x608>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b9b      	ldr	r3, [pc, #620]	; (8001d90 <HAL_RCC_OscConfig+0x608>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0049      	lsls	r1, r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fa8e 	bl	800104c <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fa89 	bl	800104c <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e11c      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b48:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x608>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3e2>
 8001b5c:	4b8b      	ldr	r3, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b60:	4b8a      	ldr	r3, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x404>
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b76:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b78:	2104      	movs	r1, #4
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7e:	4b83      	ldr	r3, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9c:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d014      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa4e 	bl	800104c <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff fa49 	bl	800104c <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a74      	ldr	r2, [pc, #464]	; (8001d94 <HAL_RCC_OscConfig+0x60c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0db      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x42e>
 8001bd4:	e013      	b.n	8001bfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa39 	bl	800104c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff fa34 	bl	800104c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x60c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0c6      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf4:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c0e:	4962      	ldr	r1, [pc, #392]	; (8001d98 <HAL_RCC_OscConfig+0x610>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x496>
 8001c1c:	e0b0      	b.n	8001d80 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1e:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2238      	movs	r2, #56	; 0x38
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d100      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4a4>
 8001c2a:	e078      	b.n	8001d1e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d153      	bne.n	8001cdc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c3a:	4958      	ldr	r1, [pc, #352]	; (8001d9c <HAL_RCC_OscConfig+0x614>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa04 	bl	800104c <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f9ff 	bl	800104c <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e092      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	049b      	lsls	r3, r3, #18
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	0449      	lsls	r1, r1, #17
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ca4:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0549      	lsls	r1, r1, #21
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f9cb 	bl	800104c <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f9c6 	bl	800104c <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e059      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	049b      	lsls	r3, r3, #18
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x534>
 8001cda:	e051      	b.n	8001d80 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001ce2:	492e      	ldr	r1, [pc, #184]	; (8001d9c <HAL_RCC_OscConfig+0x614>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f9b0 	bl	800104c <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f9ab 	bl	800104c <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e03e      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	049b      	lsls	r3, r3, #18
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001d16:	4923      	ldr	r1, [pc, #140]	; (8001da4 <HAL_RCC_OscConfig+0x61c>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	e030      	b.n	8001d80 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e02b      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_RCC_OscConfig+0x604>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2203      	movs	r2, #3
 8001d34:	401a      	ands	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2270      	movs	r2, #112	; 0x70
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d117      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	23fe      	movs	r3, #254	; 0xfe
 8001d50:	01db      	lsls	r3, r3, #7
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10e      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	23f8      	movs	r3, #248	; 0xf8
 8001d62:	039b      	lsls	r3, r3, #14
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	0f5b      	lsrs	r3, r3, #29
 8001d72:	075a      	lsls	r2, r3, #29
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b008      	add	sp, #32
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
 8001d94:	00001388 	.word	0x00001388
 8001d98:	efffffff 	.word	0xefffffff
 8001d9c:	feffffff 	.word	0xfeffffff
 8001da0:	1fc1808c 	.word	0x1fc1808c
 8001da4:	effefffc 	.word	0xeffefffc

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0e9      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d91e      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff f936 	bl	800104c <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff f931 	bl	800104c <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a6a      	ldr	r2, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0ca      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d006      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	21e0      	movs	r1, #224	; 0xe0
 8001e24:	01c9      	lsls	r1, r1, #7
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	d057      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d12b      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e097      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	049b      	lsls	r3, r3, #18
 8001e70:	4013      	ands	r3, r2
 8001e72:	d11f      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e08b      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d113      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e07f      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e074      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2207      	movs	r2, #7
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c0 	bl	800104c <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff f8bb 	bl	800104c <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e054      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	; 0x38
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ec      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d21e      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f18:	f7ff f898 	bl	800104c <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff f893 	bl	800104c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e02c      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_RCC_ClockConfig+0x200>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f62:	f000 f829 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f66:	0001      	movs	r1, r0
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	220f      	movs	r2, #15
 8001f70:	401a      	ands	r2, r3
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_RCC_ClockConfig+0x204>)
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	58d3      	ldr	r3, [r2, r3]
 8001f78:	221f      	movs	r2, #31
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	40da      	lsrs	r2, r3
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x208>)
 8001f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x20c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff f803 	bl	8000f94 <HAL_InitTick>
 8001f8e:	0003      	movs	r3, r0
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b004      	add	sp, #16
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	fffff0ff 	.word	0xfffff0ff
 8001fa8:	ffff8fff 	.word	0xffff8fff
 8001fac:	080043d0 	.word	0x080043d0
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	20000010 	.word	0x20000010

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0adb      	lsrs	r3, r3, #11
 8001fce:	2207      	movs	r2, #7
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	4835      	ldr	r0, [pc, #212]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fde:	f7fe f88f 	bl	8000100 <__udivsi3>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e05d      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2238      	movs	r2, #56	; 0x38
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e054      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2238      	movs	r2, #56	; 0x38
 8002000:	4013      	ands	r3, r2
 8002002:	2b10      	cmp	r3, #16
 8002004:	d138      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	2207      	movs	r2, #7
 8002018:	4013      	ands	r3, r2
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d10d      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	4824      	ldr	r0, [pc, #144]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002028:	f7fe f86a 	bl	8000100 <__udivsi3>
 800202c:	0003      	movs	r3, r0
 800202e:	0019      	movs	r1, r3
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	227f      	movs	r2, #127	; 0x7f
 8002038:	4013      	ands	r3, r2
 800203a:	434b      	muls	r3, r1
 800203c:	617b      	str	r3, [r7, #20]
        break;
 800203e:	e00d      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	481c      	ldr	r0, [pc, #112]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002044:	f7fe f85c 	bl	8000100 <__udivsi3>
 8002048:	0003      	movs	r3, r0
 800204a:	0019      	movs	r1, r3
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	227f      	movs	r2, #127	; 0x7f
 8002054:	4013      	ands	r3, r2
 8002056:	434b      	muls	r3, r1
 8002058:	617b      	str	r3, [r7, #20]
        break;
 800205a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0f5b      	lsrs	r3, r3, #29
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	6978      	ldr	r0, [r7, #20]
 800206e:	f7fe f847 	bl	8000100 <__udivsi3>
 8002072:	0003      	movs	r3, r0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e015      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2238      	movs	r2, #56	; 0x38
 800207e:	4013      	ands	r3, r2
 8002080:	2b20      	cmp	r3, #32
 8002082:	d103      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2238      	movs	r2, #56	; 0x38
 8002092:	4013      	ands	r3, r2
 8002094:	2b18      	cmp	r3, #24
 8002096:	d103      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002098:	23fa      	movs	r3, #250	; 0xfa
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e001      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	007a1200 	.word	0x007a1200

080020bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <HAL_RCC_GetHCLKFreq+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020d4:	f7ff fff2 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020d8:	0004      	movs	r4, r0
 80020da:	f7ff fb49 	bl	8001770 <LL_RCC_GetAPB1Prescaler>
 80020de:	0003      	movs	r3, r0
 80020e0:	0b1a      	lsrs	r2, r3, #12
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	58d3      	ldr	r3, [r2, r3]
 80020e8:	221f      	movs	r2, #31
 80020ea:	4013      	ands	r3, r2
 80020ec:	40dc      	lsrs	r4, r3
 80020ee:	0023      	movs	r3, r4
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bdb0      	pop	{r4, r5, r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	08004410 	.word	0x08004410

080020fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002104:	2313      	movs	r3, #19
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2312      	movs	r3, #18
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	4013      	ands	r3, r2
 800211e:	d100      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002120:	e0a3      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2011      	movs	r0, #17
 8002124:	183b      	adds	r3, r7, r0
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b86      	ldr	r3, [pc, #536]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	055b      	lsls	r3, r3, #21
 8002132:	4013      	ands	r3, r2
 8002134:	d110      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800213a:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0549      	lsls	r1, r1, #21
 8002140:	430a      	orrs	r2, r1
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
 8002144:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	183b      	adds	r3, r7, r0
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002158:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	0049      	lsls	r1, r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002166:	f7fe ff71 	bl	800104c <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800216e:	e00b      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7fe ff6c 	bl	800104c <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d904      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800217e:	2313      	movs	r3, #19
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2203      	movs	r2, #3
 8002184:	701a      	strb	r2, [r3, #0]
        break;
 8002186:	e005      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4013      	ands	r3, r2
 8002192:	d0ed      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002194:	2313      	movs	r3, #19
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d154      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800219e:	4b69      	ldr	r3, [pc, #420]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a2:	23c0      	movs	r3, #192	; 0xc0
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d019      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d014      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	4a63      	ldr	r2, [pc, #396]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	0249      	lsls	r1, r1, #9
 80021ce:	430a      	orrs	r2, r1
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d2:	4b5c      	ldr	r3, [pc, #368]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d8:	495d      	ldr	r1, [pc, #372]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80021da:	400a      	ands	r2, r1
 80021dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021de:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d016      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe ff2e 	bl	800104c <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f4:	e00c      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe ff29 	bl	800104c <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d904      	bls.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002206:	2313      	movs	r3, #19
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2203      	movs	r2, #3
 800220c:	701a      	strb	r2, [r3, #0]
            break;
 800220e:	e004      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d0ed      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800221a:	2313      	movs	r3, #19
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002224:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002234:	430a      	orrs	r2, r1
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
 8002238:	e00c      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800223a:	2312      	movs	r3, #18
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	2213      	movs	r2, #19
 8002240:	18ba      	adds	r2, r7, r2
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e005      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	2312      	movs	r3, #18
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2213      	movs	r2, #19
 800224e:	18ba      	adds	r2, r7, r2
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002254:	2311      	movs	r3, #17
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002264:	493c      	ldr	r1, [pc, #240]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002266:	400a      	ands	r2, r1
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	2203      	movs	r2, #3
 800227a:	4393      	bics	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002284:	430a      	orrs	r2, r1
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2202      	movs	r2, #2
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	220c      	movs	r2, #12
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	0899      	lsrs	r1, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	05db      	lsls	r3, r3, #23
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d106      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	0249      	lsls	r1, r1, #9
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4013      	ands	r3, r2
 8002306:	d016      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	01db      	lsls	r3, r3, #7
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0249      	lsls	r1, r1, #9
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002336:	2312      	movs	r3, #18
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	781b      	ldrb	r3, [r3, #0]
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b006      	add	sp, #24
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	fffffcff 	.word	0xfffffcff
 8002350:	fffeffff 	.word	0xfffeffff
 8002354:	00001388 	.word	0x00001388
 8002358:	efffffff 	.word	0xefffffff
 800235c:	ffffcfff 	.word	0xffffcfff
 8002360:	ffff3fff 	.word	0xffff3fff

08002364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e046      	b.n	8002404 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2288      	movs	r2, #136	; 0x88
 800237a:	589b      	ldr	r3, [r3, r2]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2284      	movs	r2, #132	; 0x84
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f7fe fcfe 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2288      	movs	r2, #136	; 0x88
 8002394:	2124      	movs	r1, #36	; 0x24
 8002396:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fd0a 	bl	8002dc4 <UART_SetConfig>
 80023b0:	0003      	movs	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e024      	b.n	8002404 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 fea1 	bl	800310c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	490d      	ldr	r1, [pc, #52]	; (800240c <HAL_UART_Init+0xa8>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	212a      	movs	r1, #42	; 0x2a
 80023e6:	438a      	bics	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 ff39 	bl	8003274 <UART_CheckIdleState>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ffffb7ff 	.word	0xffffb7ff

08002410 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e068      	b.n	80024f6 <HAL_LIN_Init+0xe6>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	429a      	cmp	r2, r3
 800242e:	d101      	bne.n	8002434 <HAL_LIN_Init+0x24>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e060      	b.n	80024f6 <HAL_LIN_Init+0xe6>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_LIN_Init+0x30>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e05a      	b.n	80024f6 <HAL_LIN_Init+0xe6>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2288      	movs	r2, #136	; 0x88
 8002444:	589b      	ldr	r3, [r3, r2]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_LIN_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2284      	movs	r2, #132	; 0x84
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe fc99 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2288      	movs	r2, #136	; 0x88
 800245e:	2124      	movs	r1, #36	; 0x24
 8002460:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	438a      	bics	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fca5 	bl	8002dc4 <UART_SetConfig>
 800247a:	0003      	movs	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_LIN_Init+0x74>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e038      	b.n	80024f6 <HAL_LIN_Init+0xe6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_LIN_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fe3c 	bl	800310c <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4918      	ldr	r1, [pc, #96]	; (8002500 <HAL_LIN_Init+0xf0>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	212a      	movs	r1, #42	; 0x2a
 80024b0:	438a      	bics	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	01c9      	lsls	r1, r1, #7
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	4393      	bics	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fec0 	bl	8003274 <UART_CheckIdleState>
 80024f4:	0003      	movs	r3, r0
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	fffff7ff 	.word	0xfffff7ff

08002504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2288      	movs	r2, #136	; 0x88
 8002518:	589b      	ldr	r3, [r3, r2]
 800251a:	2b20      	cmp	r3, #32
 800251c:	d000      	beq.n	8002520 <HAL_UART_Transmit+0x1c>
 800251e:	e088      	b.n	8002632 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_Transmit+0x2a>
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e080      	b.n	8002634 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	429a      	cmp	r2, r3
 800253c:	d109      	bne.n	8002552 <HAL_UART_Transmit+0x4e>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d001      	beq.n	8002552 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e070      	b.n	8002634 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2290      	movs	r2, #144	; 0x90
 8002556:	2100      	movs	r1, #0
 8002558:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2288      	movs	r2, #136	; 0x88
 800255e:	2121      	movs	r1, #33	; 0x21
 8002560:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002562:	f7fe fd73 	bl	800104c <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1dba      	adds	r2, r7, #6
 800256e:	2154      	movs	r1, #84	; 0x54
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1dba      	adds	r2, r7, #6
 8002578:	2156      	movs	r1, #86	; 0x56
 800257a:	8812      	ldrh	r2, [r2, #0]
 800257c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	015b      	lsls	r3, r3, #5
 8002586:	429a      	cmp	r2, r3
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x98>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e02c      	b.n	8002600 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	0013      	movs	r3, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	f000 feac 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e039      	b.n	8002634 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	001a      	movs	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	05d2      	lsls	r2, r2, #23
 80025d2:	0dd2      	lsrs	r2, r2, #23
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2256      	movs	r2, #86	; 0x56
 80025f2:	5a9b      	ldrh	r3, [r3, r2]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b299      	uxth	r1, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2256      	movs	r2, #86	; 0x56
 80025fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2256      	movs	r2, #86	; 0x56
 8002604:	5a9b      	ldrh	r3, [r3, r2]
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1cc      	bne.n	80025a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	0013      	movs	r3, r2
 8002616:	2200      	movs	r2, #0
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	f000 fe79 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e006      	b.n	8002634 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2288      	movs	r2, #136	; 0x88
 800262a:	2120      	movs	r1, #32
 800262c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b008      	add	sp, #32
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	1dbb      	adds	r3, r7, #6
 8002648:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	228c      	movs	r2, #140	; 0x8c
 800264e:	589b      	ldr	r3, [r3, r2]
 8002650:	2b20      	cmp	r3, #32
 8002652:	d145      	bne.n	80026e0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_UART_Receive_IT+0x26>
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e03d      	b.n	80026e2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	429a      	cmp	r2, r3
 8002670:	d109      	bne.n	8002686 <HAL_UART_Receive_IT+0x4a>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d001      	beq.n	8002686 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02d      	b.n	80026e2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	4013      	ands	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269a:	f3ef 8310 	mrs	r3, PRIMASK
 800269e:	613b      	str	r3, [r7, #16]
  return(result);
 80026a0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	2301      	movs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f383 8810 	msr	PRIMASK, r3
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	04c9      	lsls	r1, r1, #19
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f383 8810 	msr	PRIMASK, r3
}
 80026cc:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026ce:	1dbb      	adds	r3, r7, #6
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fee2 	bl	80034a0 <UART_Start_Receive_IT>
 80026dc:	0003      	movs	r3, r0
 80026de:	e000      	b.n	80026e2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b008      	add	sp, #32
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026ec:	b5b0      	push	{r4, r5, r7, lr}
 80026ee:	b0aa      	sub	sp, #168	; 0xa8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	22a4      	movs	r2, #164	; 0xa4
 80026fc:	18b9      	adds	r1, r7, r2
 80026fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	20a0      	movs	r0, #160	; 0xa0
 8002708:	1839      	adds	r1, r7, r0
 800270a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	249c      	movs	r4, #156	; 0x9c
 8002714:	1939      	adds	r1, r7, r4
 8002716:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002718:	0011      	movs	r1, r2
 800271a:	18bb      	adds	r3, r7, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4aa2      	ldr	r2, [pc, #648]	; (80029a8 <HAL_UART_IRQHandler+0x2bc>)
 8002720:	4013      	ands	r3, r2
 8002722:	2298      	movs	r2, #152	; 0x98
 8002724:	18bd      	adds	r5, r7, r2
 8002726:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002728:	18bb      	adds	r3, r7, r2
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11a      	bne.n	8002766 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002730:	187b      	adds	r3, r7, r1
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2220      	movs	r2, #32
 8002736:	4013      	ands	r3, r2
 8002738:	d015      	beq.n	8002766 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800273a:	183b      	adds	r3, r7, r0
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2220      	movs	r2, #32
 8002740:	4013      	ands	r3, r2
 8002742:	d105      	bne.n	8002750 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002744:	193b      	adds	r3, r7, r4
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4013      	ands	r3, r2
 800274e:	d00a      	beq.n	8002766 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	2b00      	cmp	r3, #0
 8002756:	d100      	bne.n	800275a <HAL_UART_IRQHandler+0x6e>
 8002758:	e2dc      	b.n	8002d14 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	0010      	movs	r0, r2
 8002762:	4798      	blx	r3
      }
      return;
 8002764:	e2d6      	b.n	8002d14 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002766:	2398      	movs	r3, #152	; 0x98
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d100      	bne.n	8002772 <HAL_UART_IRQHandler+0x86>
 8002770:	e122      	b.n	80029b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002772:	239c      	movs	r3, #156	; 0x9c
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8c      	ldr	r2, [pc, #560]	; (80029ac <HAL_UART_IRQHandler+0x2c0>)
 800277a:	4013      	ands	r3, r2
 800277c:	d106      	bne.n	800278c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800277e:	23a0      	movs	r3, #160	; 0xa0
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a8a      	ldr	r2, [pc, #552]	; (80029b0 <HAL_UART_IRQHandler+0x2c4>)
 8002786:	4013      	ands	r3, r2
 8002788:	d100      	bne.n	800278c <HAL_UART_IRQHandler+0xa0>
 800278a:	e115      	b.n	80029b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800278c:	23a4      	movs	r3, #164	; 0xa4
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d012      	beq.n	80027be <HAL_UART_IRQHandler+0xd2>
 8002798:	23a0      	movs	r3, #160	; 0xa0
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2201      	movs	r2, #1
 80027ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2290      	movs	r2, #144	; 0x90
 80027b2:	589b      	ldr	r3, [r3, r2]
 80027b4:	2201      	movs	r2, #1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2190      	movs	r1, #144	; 0x90
 80027bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027be:	23a4      	movs	r3, #164	; 0xa4
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d011      	beq.n	80027ee <HAL_UART_IRQHandler+0x102>
 80027ca:	239c      	movs	r3, #156	; 0x9c
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00b      	beq.n	80027ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2202      	movs	r2, #2
 80027dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2290      	movs	r2, #144	; 0x90
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	2204      	movs	r2, #4
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2190      	movs	r1, #144	; 0x90
 80027ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ee:	23a4      	movs	r3, #164	; 0xa4
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d011      	beq.n	800281e <HAL_UART_IRQHandler+0x132>
 80027fa:	239c      	movs	r3, #156	; 0x9c
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	d00b      	beq.n	800281e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2290      	movs	r2, #144	; 0x90
 8002812:	589b      	ldr	r3, [r3, r2]
 8002814:	2202      	movs	r2, #2
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2190      	movs	r1, #144	; 0x90
 800281c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800281e:	23a4      	movs	r3, #164	; 0xa4
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	4013      	ands	r3, r2
 8002828:	d017      	beq.n	800285a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800282a:	23a0      	movs	r3, #160	; 0xa0
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	4013      	ands	r3, r2
 8002834:	d105      	bne.n	8002842 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002836:	239c      	movs	r3, #156	; 0x9c
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_UART_IRQHandler+0x2c0>)
 800283e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002840:	d00b      	beq.n	800285a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2290      	movs	r2, #144	; 0x90
 800284e:	589b      	ldr	r3, [r3, r2]
 8002850:	2208      	movs	r2, #8
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2190      	movs	r1, #144	; 0x90
 8002858:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800285a:	23a4      	movs	r3, #164	; 0xa4
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4013      	ands	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_UART_IRQHandler+0x1a4>
 8002868:	23a0      	movs	r3, #160	; 0xa0
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	04db      	lsls	r3, r3, #19
 8002872:	4013      	ands	r3, r2
 8002874:	d00c      	beq.n	8002890 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2290      	movs	r2, #144	; 0x90
 8002884:	589b      	ldr	r3, [r3, r2]
 8002886:	2220      	movs	r2, #32
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2190      	movs	r1, #144	; 0x90
 800288e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2290      	movs	r2, #144	; 0x90
 8002894:	589b      	ldr	r3, [r3, r2]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d100      	bne.n	800289c <HAL_UART_IRQHandler+0x1b0>
 800289a:	e23d      	b.n	8002d18 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800289c:	23a4      	movs	r3, #164	; 0xa4
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2220      	movs	r2, #32
 80028a4:	4013      	ands	r3, r2
 80028a6:	d015      	beq.n	80028d4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028a8:	23a0      	movs	r3, #160	; 0xa0
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2220      	movs	r2, #32
 80028b0:	4013      	ands	r3, r2
 80028b2:	d106      	bne.n	80028c2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028b4:	239c      	movs	r3, #156	; 0x9c
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	055b      	lsls	r3, r3, #21
 80028be:	4013      	ands	r3, r2
 80028c0:	d008      	beq.n	80028d4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	0010      	movs	r0, r2
 80028d2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2290      	movs	r2, #144	; 0x90
 80028d8:	589b      	ldr	r3, [r3, r2]
 80028da:	2194      	movs	r1, #148	; 0x94
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d004      	beq.n	80028f8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2228      	movs	r2, #40	; 0x28
 80028f4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028f6:	d04c      	beq.n	8002992 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fef4 	bl	80036e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	4013      	ands	r3, r2
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d13c      	bne.n	8002988 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290e:	f3ef 8310 	mrs	r3, PRIMASK
 8002912:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002916:	2090      	movs	r0, #144	; 0x90
 8002918:	183a      	adds	r2, r7, r0
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	438a      	bics	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	183b      	adds	r3, r7, r0
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	589b      	ldr	r3, [r3, r2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d016      	beq.n	800297e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	589b      	ldr	r3, [r3, r2]
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_UART_IRQHandler+0x2c8>)
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	589b      	ldr	r3, [r3, r2]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fe fcf7 	bl	8001354 <HAL_DMA_Abort_IT>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d01c      	beq.n	80029a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	589b      	ldr	r3, [r3, r2]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	5852      	ldr	r2, [r2, r1]
 8002978:	0010      	movs	r0, r2
 800297a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e012      	b.n	80029a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f7fe f8db 	bl	8000b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002986:	e00d      	b.n	80029a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f7fe f8d6 	bl	8000b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	e008      	b.n	80029a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe f8d1 	bl	8000b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2290      	movs	r2, #144	; 0x90
 800299e:	2100      	movs	r1, #0
 80029a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80029a2:	e1b9      	b.n	8002d18 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	46c0      	nop			; (mov r8, r8)
    return;
 80029a6:	e1b7      	b.n	8002d18 <HAL_UART_IRQHandler+0x62c>
 80029a8:	0000080f 	.word	0x0000080f
 80029ac:	10000001 	.word	0x10000001
 80029b0:	04000120 	.word	0x04000120
 80029b4:	080037b5 	.word	0x080037b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d000      	beq.n	80029c2 <HAL_UART_IRQHandler+0x2d6>
 80029c0:	e13e      	b.n	8002c40 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029c2:	23a4      	movs	r3, #164	; 0xa4
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d100      	bne.n	80029d0 <HAL_UART_IRQHandler+0x2e4>
 80029ce:	e137      	b.n	8002c40 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2210      	movs	r2, #16
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_UART_IRQHandler+0x2f2>
 80029dc:	e130      	b.n	8002c40 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2210      	movs	r2, #16
 80029e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d000      	beq.n	80029f6 <HAL_UART_IRQHandler+0x30a>
 80029f4:	e0a4      	b.n	8002b40 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	589b      	ldr	r3, [r3, r2]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	217e      	movs	r1, #126	; 0x7e
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d100      	bne.n	8002a10 <HAL_UART_IRQHandler+0x324>
 8002a0e:	e185      	b.n	8002d1c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	225c      	movs	r2, #92	; 0x5c
 8002a14:	5a9b      	ldrh	r3, [r3, r2]
 8002a16:	187a      	adds	r2, r7, r1
 8002a18:	8812      	ldrh	r2, [r2, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d300      	bcc.n	8002a20 <HAL_UART_IRQHandler+0x334>
 8002a1e:	e17d      	b.n	8002d1c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	187a      	adds	r2, r7, r1
 8002a24:	215e      	movs	r1, #94	; 0x5e
 8002a26:	8812      	ldrh	r2, [r2, #0]
 8002a28:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	589b      	ldr	r3, [r3, r2]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2220      	movs	r2, #32
 8002a36:	4013      	ands	r3, r2
 8002a38:	d170      	bne.n	8002b1c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a42:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a44:	2301      	movs	r3, #1
 8002a46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	49b4      	ldr	r1, [pc, #720]	; (8002d2c <HAL_UART_IRQHandler+0x640>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
 8002a76:	2301      	movs	r3, #1
 8002a78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	f383 8810 	msr	PRIMASK, r3
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	438a      	bics	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a98:	f383 8810 	msr	PRIMASK, r3
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aae:	f383 8810 	msr	PRIMASK, r3
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	228c      	movs	r2, #140	; 0x8c
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ade:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ae8:	2301      	movs	r3, #1
 8002aea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2110      	movs	r1, #16
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	589b      	ldr	r3, [r3, r2]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fe fbba 	bl	8001290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	225c      	movs	r2, #92	; 0x5c
 8002b26:	5a9a      	ldrh	r2, [r3, r2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	215e      	movs	r1, #94	; 0x5e
 8002b2c:	5a5b      	ldrh	r3, [r3, r1]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f905 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b3e:	e0ed      	b.n	8002d1c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	225c      	movs	r2, #92	; 0x5c
 8002b44:	5a99      	ldrh	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	225e      	movs	r2, #94	; 0x5e
 8002b4a:	5a9b      	ldrh	r3, [r3, r2]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	208e      	movs	r0, #142	; 0x8e
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	1a8a      	subs	r2, r1, r2
 8002b54:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	225e      	movs	r2, #94	; 0x5e
 8002b5a:	5a9b      	ldrh	r3, [r3, r2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d100      	bne.n	8002b64 <HAL_UART_IRQHandler+0x478>
 8002b62:	e0dd      	b.n	8002d20 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002b64:	183b      	adds	r3, r7, r0
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d100      	bne.n	8002b6e <HAL_UART_IRQHandler+0x482>
 8002b6c:	e0d8      	b.n	8002d20 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b76:	2488      	movs	r4, #136	; 0x88
 8002b78:	193a      	adds	r2, r7, r4
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4967      	ldr	r1, [pc, #412]	; (8002d30 <HAL_UART_IRQHandler+0x644>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8002baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bae:	2484      	movs	r4, #132	; 0x84
 8002bb0:	193a      	adds	r2, r7, r4
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f383 8810 	msr	PRIMASK, r3
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	495a      	ldr	r1, [pc, #360]	; (8002d34 <HAL_UART_IRQHandler+0x648>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	228c      	movs	r2, #140	; 0x8c
 8002be2:	2120      	movs	r1, #32
 8002be4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfa:	2480      	movs	r4, #128	; 0x80
 8002bfc:	193a      	adds	r2, r7, r4
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	2301      	movs	r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2110      	movs	r1, #16
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f885 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3e:	e06f      	b.n	8002d20 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c40:	23a4      	movs	r3, #164	; 0xa4
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	035b      	lsls	r3, r3, #13
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d010      	beq.n	8002c70 <HAL_UART_IRQHandler+0x584>
 8002c4e:	239c      	movs	r3, #156	; 0x9c
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	03db      	lsls	r3, r3, #15
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	0352      	lsls	r2, r2, #13
 8002c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f001 fa47 	bl	80040fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c6e:	e05a      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c70:	23a4      	movs	r3, #164	; 0xa4
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d016      	beq.n	8002caa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c7c:	23a0      	movs	r3, #160	; 0xa0
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	4013      	ands	r3, r2
 8002c86:	d106      	bne.n	8002c96 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c88:	239c      	movs	r3, #156	; 0x9c
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	4013      	ands	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d042      	beq.n	8002d24 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	4798      	blx	r3
    }
    return;
 8002ca8:	e03c      	b.n	8002d24 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002caa:	23a4      	movs	r3, #164	; 0xa4
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d00a      	beq.n	8002ccc <HAL_UART_IRQHandler+0x5e0>
 8002cb6:	23a0      	movs	r3, #160	; 0xa0
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fd8c 	bl	80037e2 <UART_EndTransmit_IT>
    return;
 8002cca:	e02c      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ccc:	23a4      	movs	r3, #164	; 0xa4
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x606>
 8002cda:	23a0      	movs	r3, #160	; 0xa0
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	05db      	lsls	r3, r3, #23
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fa16 	bl	800411c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf0:	e019      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cf2:	23a4      	movs	r3, #164	; 0xa4
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	045b      	lsls	r3, r3, #17
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d012      	beq.n	8002d26 <HAL_UART_IRQHandler+0x63a>
 8002d00:	23a0      	movs	r3, #160	; 0xa0
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da0d      	bge.n	8002d26 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f001 f9fd 	bl	800410c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d12:	e008      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	e006      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	e004      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	e002      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	e000      	b.n	8002d26 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d24:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b02a      	add	sp, #168	; 0xa8
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	fffffeff 	.word	0xfffffeff
 8002d30:	fffffedf 	.word	0xfffffedf
 8002d34:	effffffe 	.word	0xeffffffe

08002d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	000a      	movs	r2, r1
 8002d52:	1cbb      	adds	r3, r7, #2
 8002d54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2284      	movs	r2, #132	; 0x84
 8002d6a:	5c9b      	ldrb	r3, [r3, r2]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_LIN_SendBreak+0x16>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e018      	b.n	8002da6 <HAL_LIN_SendBreak+0x48>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2284      	movs	r2, #132	; 0x84
 8002d78:	2101      	movs	r1, #1
 8002d7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2288      	movs	r2, #136	; 0x88
 8002d80:	2124      	movs	r1, #36	; 0x24
 8002d82:	5099      	str	r1, [r3, r2]

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2102      	movs	r1, #2
 8002d90:	430a      	orrs	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2288      	movs	r2, #136	; 0x88
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2284      	movs	r2, #132	; 0x84
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2290      	movs	r2, #144	; 0x90
 8002dba:	589b      	ldr	r3, [r3, r2]
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dcc:	231a      	movs	r3, #26
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4abc      	ldr	r2, [pc, #752]	; (80030e4 <UART_SetConfig+0x320>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4ab7      	ldr	r2, [pc, #732]	; (80030e8 <UART_SetConfig+0x324>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4aae      	ldr	r2, [pc, #696]	; (80030ec <UART_SetConfig+0x328>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	220f      	movs	r2, #15
 8002e48:	4393      	bics	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4aa4      	ldr	r2, [pc, #656]	; (80030f0 <UART_SetConfig+0x32c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d127      	bne.n	8002eb2 <UART_SetConfig+0xee>
 8002e62:	4ba4      	ldr	r3, [pc, #656]	; (80030f4 <UART_SetConfig+0x330>)
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	2203      	movs	r2, #3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <UART_SetConfig+0xda>
 8002e6e:	d81b      	bhi.n	8002ea8 <UART_SetConfig+0xe4>
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d00a      	beq.n	8002e8a <UART_SetConfig+0xc6>
 8002e74:	d818      	bhi.n	8002ea8 <UART_SetConfig+0xe4>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <UART_SetConfig+0xbc>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d00a      	beq.n	8002e94 <UART_SetConfig+0xd0>
 8002e7e:	e013      	b.n	8002ea8 <UART_SetConfig+0xe4>
 8002e80:	231b      	movs	r3, #27
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e058      	b.n	8002f3c <UART_SetConfig+0x178>
 8002e8a:	231b      	movs	r3, #27
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e053      	b.n	8002f3c <UART_SetConfig+0x178>
 8002e94:	231b      	movs	r3, #27
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2204      	movs	r2, #4
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e04e      	b.n	8002f3c <UART_SetConfig+0x178>
 8002e9e:	231b      	movs	r3, #27
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e049      	b.n	8002f3c <UART_SetConfig+0x178>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2210      	movs	r2, #16
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e044      	b.n	8002f3c <UART_SetConfig+0x178>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a90      	ldr	r2, [pc, #576]	; (80030f8 <UART_SetConfig+0x334>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d127      	bne.n	8002f0c <UART_SetConfig+0x148>
 8002ebc:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <UART_SetConfig+0x330>)
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	220c      	movs	r2, #12
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d017      	beq.n	8002ef8 <UART_SetConfig+0x134>
 8002ec8:	d81b      	bhi.n	8002f02 <UART_SetConfig+0x13e>
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d00a      	beq.n	8002ee4 <UART_SetConfig+0x120>
 8002ece:	d818      	bhi.n	8002f02 <UART_SetConfig+0x13e>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <UART_SetConfig+0x116>
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00a      	beq.n	8002eee <UART_SetConfig+0x12a>
 8002ed8:	e013      	b.n	8002f02 <UART_SetConfig+0x13e>
 8002eda:	231b      	movs	r3, #27
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e02b      	b.n	8002f3c <UART_SetConfig+0x178>
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2202      	movs	r2, #2
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e026      	b.n	8002f3c <UART_SetConfig+0x178>
 8002eee:	231b      	movs	r3, #27
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e021      	b.n	8002f3c <UART_SetConfig+0x178>
 8002ef8:	231b      	movs	r3, #27
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2208      	movs	r2, #8
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e01c      	b.n	8002f3c <UART_SetConfig+0x178>
 8002f02:	231b      	movs	r3, #27
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	2210      	movs	r2, #16
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e017      	b.n	8002f3c <UART_SetConfig+0x178>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <UART_SetConfig+0x338>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d104      	bne.n	8002f20 <UART_SetConfig+0x15c>
 8002f16:	231b      	movs	r3, #27
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e00d      	b.n	8002f3c <UART_SetConfig+0x178>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a76      	ldr	r2, [pc, #472]	; (8003100 <UART_SetConfig+0x33c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d104      	bne.n	8002f34 <UART_SetConfig+0x170>
 8002f2a:	231b      	movs	r3, #27
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e003      	b.n	8002f3c <UART_SetConfig+0x178>
 8002f34:	231b      	movs	r3, #27
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2210      	movs	r2, #16
 8002f3a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d000      	beq.n	8002f4a <UART_SetConfig+0x186>
 8002f48:	e065      	b.n	8003016 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002f4a:	231b      	movs	r3, #27
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d015      	beq.n	8002f80 <UART_SetConfig+0x1bc>
 8002f54:	dc18      	bgt.n	8002f88 <UART_SetConfig+0x1c4>
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d00d      	beq.n	8002f76 <UART_SetConfig+0x1b2>
 8002f5a:	dc15      	bgt.n	8002f88 <UART_SetConfig+0x1c4>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <UART_SetConfig+0x1a2>
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d005      	beq.n	8002f70 <UART_SetConfig+0x1ac>
 8002f64:	e010      	b.n	8002f88 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f66:	f7ff f8b3 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	e012      	b.n	8002f96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f70:	4b64      	ldr	r3, [pc, #400]	; (8003104 <UART_SetConfig+0x340>)
 8002f72:	617b      	str	r3, [r7, #20]
        break;
 8002f74:	e00f      	b.n	8002f96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f76:	f7ff f81f 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	617b      	str	r3, [r7, #20]
        break;
 8002f7e:	e00a      	b.n	8002f96 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	617b      	str	r3, [r7, #20]
        break;
 8002f86:	e006      	b.n	8002f96 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f8c:	231a      	movs	r3, #26
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
        break;
 8002f94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d100      	bne.n	8002f9e <UART_SetConfig+0x1da>
 8002f9c:	e08d      	b.n	80030ba <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa2:	4b59      	ldr	r3, [pc, #356]	; (8003108 <UART_SetConfig+0x344>)
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	5ad3      	ldrh	r3, [r2, r3]
 8002fa8:	0019      	movs	r1, r3
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7fd f8a8 	bl	8000100 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	005a      	lsls	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	18d2      	adds	r2, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	0010      	movs	r0, r2
 8002fc4:	f7fd f89c 	bl	8000100 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d91c      	bls.n	800300c <UART_SetConfig+0x248>
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	025b      	lsls	r3, r3, #9
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d217      	bcs.n	800300c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	200e      	movs	r0, #14
 8002fe2:	183b      	adds	r3, r7, r0
 8002fe4:	210f      	movs	r1, #15
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	183b      	adds	r3, r7, r0
 8002ff8:	183a      	adds	r2, r7, r0
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	183a      	adds	r2, r7, r0
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	e056      	b.n	80030ba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800300c:	231a      	movs	r3, #26
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e051      	b.n	80030ba <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003016:	231b      	movs	r3, #27
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d015      	beq.n	800304c <UART_SetConfig+0x288>
 8003020:	dc18      	bgt.n	8003054 <UART_SetConfig+0x290>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00d      	beq.n	8003042 <UART_SetConfig+0x27e>
 8003026:	dc15      	bgt.n	8003054 <UART_SetConfig+0x290>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <UART_SetConfig+0x26e>
 800302c:	2b02      	cmp	r3, #2
 800302e:	d005      	beq.n	800303c <UART_SetConfig+0x278>
 8003030:	e010      	b.n	8003054 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003032:	f7ff f84d 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003036:	0003      	movs	r3, r0
 8003038:	617b      	str	r3, [r7, #20]
        break;
 800303a:	e012      	b.n	8003062 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <UART_SetConfig+0x340>)
 800303e:	617b      	str	r3, [r7, #20]
        break;
 8003040:	e00f      	b.n	8003062 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003042:	f7fe ffb9 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003046:	0003      	movs	r3, r0
 8003048:	617b      	str	r3, [r7, #20]
        break;
 800304a:	e00a      	b.n	8003062 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	617b      	str	r3, [r7, #20]
        break;
 8003052:	e006      	b.n	8003062 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003058:	231a      	movs	r3, #26
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
        break;
 8003060:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d028      	beq.n	80030ba <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306c:	4b26      	ldr	r3, [pc, #152]	; (8003108 <UART_SetConfig+0x344>)
 800306e:	0052      	lsls	r2, r2, #1
 8003070:	5ad3      	ldrh	r3, [r2, r3]
 8003072:	0019      	movs	r1, r3
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7fd f843 	bl	8000100 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	001a      	movs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	18d2      	adds	r2, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0019      	movs	r1, r3
 800308c:	0010      	movs	r0, r2
 800308e:	f7fd f837 	bl	8000100 <__udivsi3>
 8003092:	0003      	movs	r3, r0
 8003094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d90a      	bls.n	80030b2 <UART_SetConfig+0x2ee>
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d205      	bcs.n	80030b2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e003      	b.n	80030ba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80030b2:	231a      	movs	r3, #26
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	226a      	movs	r2, #106	; 0x6a
 80030be:	2101      	movs	r1, #1
 80030c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2268      	movs	r2, #104	; 0x68
 80030c6:	2101      	movs	r1, #1
 80030c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80030d6:	231a      	movs	r3, #26
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b008      	add	sp, #32
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	cfff69f3 	.word	0xcfff69f3
 80030e8:	ffffcfff 	.word	0xffffcfff
 80030ec:	11fff4ff 	.word	0x11fff4ff
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40004400 	.word	0x40004400
 80030fc:	40004800 	.word	0x40004800
 8003100:	40004c00 	.word	0x40004c00
 8003104:	00f42400 	.word	0x00f42400
 8003108:	08004430 	.word	0x08004430

0800310c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d00b      	beq.n	8003136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <UART_AdvFeatureConfig+0x144>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d00b      	beq.n	8003158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a43      	ldr	r2, [pc, #268]	; (8003254 <UART_AdvFeatureConfig+0x148>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	2204      	movs	r2, #4
 800315e:	4013      	ands	r3, r2
 8003160:	d00b      	beq.n	800317a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <UART_AdvFeatureConfig+0x14c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	d00b      	beq.n	800319c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a34      	ldr	r2, [pc, #208]	; (800325c <UART_AdvFeatureConfig+0x150>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2210      	movs	r2, #16
 80031a2:	4013      	ands	r3, r2
 80031a4:	d00b      	beq.n	80031be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <UART_AdvFeatureConfig+0x154>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	2220      	movs	r2, #32
 80031c4:	4013      	ands	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a25      	ldr	r2, [pc, #148]	; (8003264 <UART_AdvFeatureConfig+0x158>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	4013      	ands	r3, r2
 80031e8:	d01d      	beq.n	8003226 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <UART_AdvFeatureConfig+0x15c>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	035b      	lsls	r3, r3, #13
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <UART_AdvFeatureConfig+0x160>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <UART_AdvFeatureConfig+0x164>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	fffdffff 	.word	0xfffdffff
 8003254:	fffeffff 	.word	0xfffeffff
 8003258:	fffbffff 	.word	0xfffbffff
 800325c:	ffff7fff 	.word	0xffff7fff
 8003260:	ffffefff 	.word	0xffffefff
 8003264:	ffffdfff 	.word	0xffffdfff
 8003268:	ffefffff 	.word	0xffefffff
 800326c:	ff9fffff 	.word	0xff9fffff
 8003270:	fff7ffff 	.word	0xfff7ffff

08003274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2290      	movs	r2, #144	; 0x90
 8003280:	2100      	movs	r1, #0
 8003282:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003284:	f7fd fee2 	bl	800104c <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	2b08      	cmp	r3, #8
 8003298:	d10c      	bne.n	80032b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	0391      	lsls	r1, r2, #14
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <UART_CheckIdleState+0x98>)
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f832 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d001      	beq.n	80032b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e026      	b.n	8003302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2204      	movs	r2, #4
 80032bc:	4013      	ands	r3, r2
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d10c      	bne.n	80032dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	03d1      	lsls	r1, r2, #15
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <UART_CheckIdleState+0x98>)
 80032cc:	9200      	str	r2, [sp, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f000 f81e 	bl	8003310 <UART_WaitOnFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e012      	b.n	8003302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2288      	movs	r2, #136	; 0x88
 80032e0:	2120      	movs	r1, #32
 80032e2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	228c      	movs	r2, #140	; 0x8c
 80032e8:	2120      	movs	r1, #32
 80032ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2284      	movs	r2, #132	; 0x84
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b004      	add	sp, #16
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	01ffffff 	.word	0x01ffffff

08003310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b094      	sub	sp, #80	; 0x50
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003320:	e0a7      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	3301      	adds	r3, #1
 8003326:	d100      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003328:	e0a3      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fd fe8f 	bl	800104c <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <UART_WaitOnFlagUntilTimeout+0x30>
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	2b00      	cmp	r3, #0
 800333e:	d13f      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003340:	f3ef 8310 	mrs	r3, PRIMASK
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003348:	647b      	str	r3, [r7, #68]	; 0x44
 800334a:	2301      	movs	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	494e      	ldr	r1, [pc, #312]	; (800349c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003362:	400a      	ands	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	f383 8810 	msr	PRIMASK, r3
}
 8003370:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	643b      	str	r3, [r7, #64]	; 0x40
 800337c:	2301      	movs	r3, #1
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	438a      	bics	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2288      	movs	r2, #136	; 0x88
 80033a8:	2120      	movs	r1, #32
 80033aa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	228c      	movs	r2, #140	; 0x8c
 80033b0:	2120      	movs	r1, #32
 80033b2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2284      	movs	r2, #132	; 0x84
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e069      	b.n	8003494 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2204      	movs	r2, #4
 80033c8:	4013      	ands	r3, r2
 80033ca:	d052      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	401a      	ands	r2, r3
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	429a      	cmp	r2, r3
 80033de:	d148      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ea:	f3ef 8310 	mrs	r3, PRIMASK
 80033ee:	613b      	str	r3, [r7, #16]
  return(result);
 80033f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f4:	2301      	movs	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4924      	ldr	r1, [pc, #144]	; (800349c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800340c:	400a      	ands	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	61fb      	str	r3, [r7, #28]
  return(result);
 8003422:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
 8003426:	2301      	movs	r3, #1
 8003428:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f383 8810 	msr	PRIMASK, r3
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	438a      	bics	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2288      	movs	r2, #136	; 0x88
 8003452:	2120      	movs	r1, #32
 8003454:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	228c      	movs	r2, #140	; 0x8c
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2290      	movs	r2, #144	; 0x90
 8003462:	2120      	movs	r1, #32
 8003464:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2284      	movs	r2, #132	; 0x84
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e010      	b.n	8003494 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	425a      	negs	r2, r3
 8003482:	4153      	adcs	r3, r2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	001a      	movs	r2, r3
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d100      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0x182>
 8003490:	e747      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b014      	add	sp, #80	; 0x50
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fffffe5f 	.word	0xfffffe5f

080034a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b098      	sub	sp, #96	; 0x60
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1dba      	adds	r2, r7, #6
 80034b8:	215c      	movs	r1, #92	; 0x5c
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1dba      	adds	r2, r7, #6
 80034c2:	215e      	movs	r1, #94	; 0x5e
 80034c4:	8812      	ldrh	r2, [r2, #0]
 80034c6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	015b      	lsls	r3, r3, #5
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10d      	bne.n	80034f6 <UART_Start_Receive_IT+0x56>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <UART_Start_Receive_IT+0x4c>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2260      	movs	r2, #96	; 0x60
 80034e6:	497b      	ldr	r1, [pc, #492]	; (80036d4 <UART_Start_Receive_IT+0x234>)
 80034e8:	5299      	strh	r1, [r3, r2]
 80034ea:	e02e      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2260      	movs	r2, #96	; 0x60
 80034f0:	21ff      	movs	r1, #255	; 0xff
 80034f2:	5299      	strh	r1, [r3, r2]
 80034f4:	e029      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <UART_Start_Receive_IT+0x7a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <UART_Start_Receive_IT+0x70>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2260      	movs	r2, #96	; 0x60
 800350a:	21ff      	movs	r1, #255	; 0xff
 800350c:	5299      	strh	r1, [r3, r2]
 800350e:	e01c      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2260      	movs	r2, #96	; 0x60
 8003514:	217f      	movs	r1, #127	; 0x7f
 8003516:	5299      	strh	r1, [r3, r2]
 8003518:	e017      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	055b      	lsls	r3, r3, #21
 8003522:	429a      	cmp	r2, r3
 8003524:	d10d      	bne.n	8003542 <UART_Start_Receive_IT+0xa2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <UART_Start_Receive_IT+0x98>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2260      	movs	r2, #96	; 0x60
 8003532:	217f      	movs	r1, #127	; 0x7f
 8003534:	5299      	strh	r1, [r3, r2]
 8003536:	e008      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2260      	movs	r2, #96	; 0x60
 800353c:	213f      	movs	r1, #63	; 0x3f
 800353e:	5299      	strh	r1, [r3, r2]
 8003540:	e003      	b.n	800354a <UART_Start_Receive_IT+0xaa>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2260      	movs	r2, #96	; 0x60
 8003546:	2100      	movs	r1, #0
 8003548:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2290      	movs	r2, #144	; 0x90
 800354e:	2100      	movs	r1, #0
 8003550:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	228c      	movs	r2, #140	; 0x8c
 8003556:	2122      	movs	r1, #34	; 0x22
 8003558:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355a:	f3ef 8310 	mrs	r3, PRIMASK
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003564:	2301      	movs	r3, #1
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	f383 8810 	msr	PRIMASK, r3
}
 800358a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	059b      	lsls	r3, r3, #22
 8003594:	429a      	cmp	r2, r3
 8003596:	d150      	bne.n	800363a <UART_Start_Receive_IT+0x19a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2268      	movs	r2, #104	; 0x68
 800359c:	5a9b      	ldrh	r3, [r3, r2]
 800359e:	1dba      	adds	r2, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d349      	bcc.n	800363a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	015b      	lsls	r3, r3, #5
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d107      	bne.n	80035c2 <UART_Start_Receive_IT+0x122>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a46      	ldr	r2, [pc, #280]	; (80036d8 <UART_Start_Receive_IT+0x238>)
 80035be:	675a      	str	r2, [r3, #116]	; 0x74
 80035c0:	e002      	b.n	80035c8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a45      	ldr	r2, [pc, #276]	; (80036dc <UART_Start_Receive_IT+0x23c>)
 80035c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d019      	beq.n	8003604 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80035da:	2301      	movs	r3, #1
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8310 	mrs	r3, PRIMASK
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800360c:	657b      	str	r3, [r7, #84]	; 0x54
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0549      	lsls	r1, r1, #21
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	e047      	b.n	80036ca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	015b      	lsls	r3, r3, #5
 8003642:	429a      	cmp	r2, r3
 8003644:	d107      	bne.n	8003656 <UART_Start_Receive_IT+0x1b6>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a23      	ldr	r2, [pc, #140]	; (80036e0 <UART_Start_Receive_IT+0x240>)
 8003652:	675a      	str	r2, [r3, #116]	; 0x74
 8003654:	e002      	b.n	800365c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <UART_Start_Receive_IT+0x244>)
 800365a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8310 	mrs	r3, PRIMASK
 8003668:	61fb      	str	r3, [r7, #28]
  return(result);
 800366a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366e:	2301      	movs	r3, #1
 8003670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2190      	movs	r1, #144	; 0x90
 8003686:	0049      	lsls	r1, r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	e018      	b.n	80036ca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	613b      	str	r3, [r7, #16]
  return(result);
 800369e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036a0:	653b      	str	r3, [r7, #80]	; 0x50
 80036a2:	2301      	movs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2120      	movs	r1, #32
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b018      	add	sp, #96	; 0x60
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	000001ff 	.word	0x000001ff
 80036d8:	08003e11 	.word	0x08003e11
 80036dc:	08003b25 	.word	0x08003b25
 80036e0:	080039b1 	.word	0x080039b1
 80036e4:	0800383d 	.word	0x0800383d

080036e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f0:	f3ef 8310 	mrs	r3, PRIMASK
 80036f4:	617b      	str	r3, [r7, #20]
  return(result);
 80036f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
 80036fa:	2301      	movs	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4926      	ldr	r1, [pc, #152]	; (80037ac <UART_EndRxTransfer+0xc4>)
 8003712:	400a      	ands	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003722:	f3ef 8310 	mrs	r3, PRIMASK
 8003726:	623b      	str	r3, [r7, #32]
  return(result);
 8003728:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	491b      	ldr	r1, [pc, #108]	; (80037b0 <UART_EndRxTransfer+0xc8>)
 8003744:	400a      	ands	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f383 8810 	msr	PRIMASK, r3
}
 8003752:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d118      	bne.n	800378e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	60bb      	str	r3, [r7, #8]
  return(result);
 8003762:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003766:	2301      	movs	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2110      	movs	r1, #16
 800377e:	438a      	bics	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	228c      	movs	r2, #140	; 0x8c
 8003792:	2120      	movs	r1, #32
 8003794:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b00e      	add	sp, #56	; 0x38
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	fffffedf 	.word	0xfffffedf
 80037b0:	effffffe 	.word	0xeffffffe

080037b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	225e      	movs	r2, #94	; 0x5e
 80037c6:	2100      	movs	r1, #0
 80037c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2256      	movs	r2, #86	; 0x56
 80037ce:	2100      	movs	r1, #0
 80037d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fd f9b1 	bl	8000b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	2301      	movs	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	438a      	bics	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2288      	movs	r2, #136	; 0x88
 8003820:	2120      	movs	r1, #32
 8003822:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fa83 	bl	8002d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b006      	add	sp, #24
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b090      	sub	sp, #64	; 0x40
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003844:	203e      	movs	r0, #62	; 0x3e
 8003846:	183b      	adds	r3, r7, r0
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	2160      	movs	r1, #96	; 0x60
 800384c:	5a52      	ldrh	r2, [r2, r1]
 800384e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	228c      	movs	r2, #140	; 0x8c
 8003854:	589b      	ldr	r3, [r3, r2]
 8003856:	2b22      	cmp	r3, #34	; 0x22
 8003858:	d000      	beq.n	800385c <UART_RxISR_8BIT+0x20>
 800385a:	e09a      	b.n	8003992 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003862:	213c      	movs	r1, #60	; 0x3c
 8003864:	187b      	adds	r3, r7, r1
 8003866:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003868:	187b      	adds	r3, r7, r1
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	183b      	adds	r3, r7, r0
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b2d9      	uxtb	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	400a      	ands	r2, r1
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	225e      	movs	r2, #94	; 0x5e
 800388c:	5a9b      	ldrh	r3, [r3, r2]
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b299      	uxth	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	225e      	movs	r2, #94	; 0x5e
 8003898:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	225e      	movs	r2, #94	; 0x5e
 800389e:	5a9b      	ldrh	r3, [r3, r2]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d000      	beq.n	80038a8 <UART_RxISR_8BIT+0x6c>
 80038a6:	e07c      	b.n	80039a2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ae:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4938      	ldr	r1, [pc, #224]	; (80039ac <UART_RxISR_8BIT+0x170>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
 80038e4:	2301      	movs	r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	228c      	movs	r2, #140	; 0x8c
 8003910:	2120      	movs	r1, #32
 8003912:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d12f      	bne.n	8003988 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	60fb      	str	r3, [r7, #12]
  return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2110      	movs	r1, #16
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2210      	movs	r2, #16
 8003968:	4013      	ands	r3, r2
 800396a:	2b10      	cmp	r3, #16
 800396c:	d103      	bne.n	8003976 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	225c      	movs	r2, #92	; 0x5c
 800397a:	5a9a      	ldrh	r2, [r3, r2]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff f9e1 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003986:	e00c      	b.n	80039a2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f7fd f8a8 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 8003990:	e007      	b.n	80039a2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2108      	movs	r1, #8
 800399e:	430a      	orrs	r2, r1
 80039a0:	619a      	str	r2, [r3, #24]
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b010      	add	sp, #64	; 0x40
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	fffffedf 	.word	0xfffffedf

080039b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b090      	sub	sp, #64	; 0x40
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039b8:	203e      	movs	r0, #62	; 0x3e
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	2160      	movs	r1, #96	; 0x60
 80039c0:	5a52      	ldrh	r2, [r2, r1]
 80039c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	228c      	movs	r2, #140	; 0x8c
 80039c8:	589b      	ldr	r3, [r3, r2]
 80039ca:	2b22      	cmp	r3, #34	; 0x22
 80039cc:	d000      	beq.n	80039d0 <UART_RxISR_16BIT+0x20>
 80039ce:	e09a      	b.n	8003b06 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d6:	213c      	movs	r1, #60	; 0x3c
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	183a      	adds	r2, r7, r0
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	8812      	ldrh	r2, [r2, #0]
 80039ea:	4013      	ands	r3, r2
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	1c9a      	adds	r2, r3, #2
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	225e      	movs	r2, #94	; 0x5e
 8003a00:	5a9b      	ldrh	r3, [r3, r2]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b299      	uxth	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	225e      	movs	r2, #94	; 0x5e
 8003a0c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	225e      	movs	r2, #94	; 0x5e
 8003a12:	5a9b      	ldrh	r3, [r3, r2]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d000      	beq.n	8003a1c <UART_RxISR_16BIT+0x6c>
 8003a1a:	e07c      	b.n	8003b16 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a20:	617b      	str	r3, [r7, #20]
  return(result);
 8003a22:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4938      	ldr	r1, [pc, #224]	; (8003b20 <UART_RxISR_16BIT+0x170>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a52:	623b      	str	r3, [r7, #32]
  return(result);
 8003a54:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	438a      	bics	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f383 8810 	msr	PRIMASK, r3
}
 8003a7e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	228c      	movs	r2, #140	; 0x8c
 8003a84:	2120      	movs	r1, #32
 8003a86:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d12f      	bne.n	8003afc <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aac:	2301      	movs	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2210      	movs	r2, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d103      	bne.n	8003aea <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	225c      	movs	r2, #92	; 0x5c
 8003aee:	5a9a      	ldrh	r2, [r3, r2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7ff f927 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003afa:	e00c      	b.n	8003b16 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7fc ffee 	bl	8000ae0 <HAL_UART_RxCpltCallback>
}
 8003b04:	e007      	b.n	8003b16 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2108      	movs	r1, #8
 8003b12:	430a      	orrs	r2, r1
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b010      	add	sp, #64	; 0x40
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	fffffedf 	.word	0xfffffedf

08003b24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09c      	sub	sp, #112	; 0x70
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003b2c:	236a      	movs	r3, #106	; 0x6a
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	2160      	movs	r1, #96	; 0x60
 8003b34:	5a52      	ldrh	r2, [r2, r1]
 8003b36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	228c      	movs	r2, #140	; 0x8c
 8003b54:	589b      	ldr	r3, [r3, r2]
 8003b56:	2b22      	cmp	r3, #34	; 0x22
 8003b58:	d000      	beq.n	8003b5c <UART_RxISR_8BIT_FIFOEN+0x38>
 8003b5a:	e144      	b.n	8003de6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b5c:	235e      	movs	r3, #94	; 0x5e
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2168      	movs	r1, #104	; 0x68
 8003b64:	5a52      	ldrh	r2, [r2, r1]
 8003b66:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b68:	e0eb      	b.n	8003d42 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b70:	215c      	movs	r1, #92	; 0x5c
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	236a      	movs	r3, #106	; 0x6a
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b2d9      	uxtb	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	400a      	ands	r2, r1
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	225e      	movs	r2, #94	; 0x5e
 8003b9c:	5a9b      	ldrh	r3, [r3, r2]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	225e      	movs	r2, #94	; 0x5e
 8003ba8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d049      	beq.n	8003c4e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d010      	beq.n	8003be4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003bc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2290      	movs	r2, #144	; 0x90
 8003bd8:	589b      	ldr	r3, [r3, r2]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2190      	movs	r1, #144	; 0x90
 8003be2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00f      	beq.n	8003c0c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2290      	movs	r2, #144	; 0x90
 8003c00:	589b      	ldr	r3, [r3, r2]
 8003c02:	2204      	movs	r2, #4
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2190      	movs	r1, #144	; 0x90
 8003c0a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	2204      	movs	r2, #4
 8003c10:	4013      	ands	r3, r2
 8003c12:	d00f      	beq.n	8003c34 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c16:	2201      	movs	r2, #1
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2204      	movs	r2, #4
 8003c22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2290      	movs	r2, #144	; 0x90
 8003c28:	589b      	ldr	r3, [r3, r2]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2190      	movs	r1, #144	; 0x90
 8003c32:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2290      	movs	r2, #144	; 0x90
 8003c38:	589b      	ldr	r3, [r3, r2]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fc ff7b 	bl	8000b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2290      	movs	r2, #144	; 0x90
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	225e      	movs	r2, #94	; 0x5e
 8003c52:	5a9b      	ldrh	r3, [r3, r2]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d173      	bne.n	8003d42 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c62:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c64:	2301      	movs	r3, #1
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4961      	ldr	r1, [pc, #388]	; (8003e00 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c94:	657b      	str	r3, [r7, #84]	; 0x54
 8003c96:	2301      	movs	r3, #1
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4955      	ldr	r1, [pc, #340]	; (8003e04 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	228c      	movs	r2, #140	; 0x8c
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d12f      	bne.n	8003d3a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce4:	623b      	str	r3, [r7, #32]
  return(result);
 8003ce6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2110      	movs	r1, #16
 8003d02:	438a      	bics	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d103      	bne.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	225c      	movs	r2, #92	; 0x5c
 8003d2c:	5a9a      	ldrh	r2, [r3, r2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff f808 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
 8003d38:	e003      	b.n	8003d42 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7fc fecf 	bl	8000ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d42:	235e      	movs	r3, #94	; 0x5e
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4e:	2220      	movs	r2, #32
 8003d50:	4013      	ands	r3, r2
 8003d52:	d000      	beq.n	8003d56 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003d54:	e709      	b.n	8003b6a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003d56:	204e      	movs	r0, #78	; 0x4e
 8003d58:	183b      	adds	r3, r7, r0
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	215e      	movs	r1, #94	; 0x5e
 8003d5e:	5a52      	ldrh	r2, [r2, r1]
 8003d60:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003d62:	0001      	movs	r1, r0
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d044      	beq.n	8003df6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2268      	movs	r2, #104	; 0x68
 8003d70:	5a9b      	ldrh	r3, [r3, r2]
 8003d72:	187a      	adds	r2, r7, r1
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d23d      	bcs.n	8003df6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d80:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d84:	2301      	movs	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	491b      	ldr	r1, [pc, #108]	; (8003e08 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f383 8810 	msr	PRIMASK, r3
}
 8003daa:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003db0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	617b      	str	r3, [r7, #20]
  return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003de4:	e007      	b.n	8003df6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2108      	movs	r1, #8
 8003df2:	430a      	orrs	r2, r1
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b01c      	add	sp, #112	; 0x70
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	fffffeff 	.word	0xfffffeff
 8003e04:	effffffe 	.word	0xeffffffe
 8003e08:	efffffff 	.word	0xefffffff
 8003e0c:	0800383d 	.word	0x0800383d

08003e10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b09e      	sub	sp, #120	; 0x78
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003e18:	2372      	movs	r3, #114	; 0x72
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	2160      	movs	r1, #96	; 0x60
 8003e20:	5a52      	ldrh	r2, [r2, r1]
 8003e22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	228c      	movs	r2, #140	; 0x8c
 8003e40:	589b      	ldr	r3, [r3, r2]
 8003e42:	2b22      	cmp	r3, #34	; 0x22
 8003e44:	d000      	beq.n	8003e48 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003e46:	e144      	b.n	80040d2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e48:	2366      	movs	r3, #102	; 0x66
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	2168      	movs	r1, #104	; 0x68
 8003e50:	5a52      	ldrh	r2, [r2, r1]
 8003e52:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e54:	e0eb      	b.n	800402e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5c:	2164      	movs	r1, #100	; 0x64
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2272      	movs	r2, #114	; 0x72
 8003e6c:	18ba      	adds	r2, r7, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	8812      	ldrh	r2, [r2, #0]
 8003e72:	4013      	ands	r3, r2
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	225e      	movs	r2, #94	; 0x5e
 8003e88:	5a9b      	ldrh	r3, [r3, r2]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b299      	uxth	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	225e      	movs	r2, #94	; 0x5e
 8003e94:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d049      	beq.n	8003f3a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d010      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003eae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2290      	movs	r2, #144	; 0x90
 8003ec4:	589b      	ldr	r3, [r3, r2]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2190      	movs	r1, #144	; 0x90
 8003ece:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eda:	2201      	movs	r2, #1
 8003edc:	4013      	ands	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2290      	movs	r2, #144	; 0x90
 8003eec:	589b      	ldr	r3, [r3, r2]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2190      	movs	r1, #144	; 0x90
 8003ef6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efa:	2204      	movs	r2, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	d00f      	beq.n	8003f20 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2290      	movs	r2, #144	; 0x90
 8003f14:	589b      	ldr	r3, [r3, r2]
 8003f16:	2202      	movs	r2, #2
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2190      	movs	r1, #144	; 0x90
 8003f1e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2290      	movs	r2, #144	; 0x90
 8003f24:	589b      	ldr	r3, [r3, r2]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7fc fe05 	bl	8000b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2290      	movs	r2, #144	; 0x90
 8003f36:	2100      	movs	r1, #0
 8003f38:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	225e      	movs	r2, #94	; 0x5e
 8003f3e:	5a9b      	ldrh	r3, [r3, r2]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d173      	bne.n	800402e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f46:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f50:	2301      	movs	r3, #1
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4961      	ldr	r1, [pc, #388]	; (80040ec <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f78:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f82:	2301      	movs	r3, #1
 8003f84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	f383 8810 	msr	PRIMASK, r3
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4955      	ldr	r1, [pc, #340]	; (80040f0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa4:	f383 8810 	msr	PRIMASK, r3
}
 8003fa8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	228c      	movs	r2, #140	; 0x8c
 8003fae:	2120      	movs	r1, #32
 8003fb0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d12f      	bne.n	8004026 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2210      	movs	r2, #16
 8004006:	4013      	ands	r3, r2
 8004008:	2b10      	cmp	r3, #16
 800400a:	d103      	bne.n	8004014 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	225c      	movs	r2, #92	; 0x5c
 8004018:	5a9a      	ldrh	r2, [r3, r2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f7fe fe92 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
 8004024:	e003      	b.n	800402e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f7fc fd59 	bl	8000ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800402e:	2366      	movs	r3, #102	; 0x66
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d000      	beq.n	8004042 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004040:	e709      	b.n	8003e56 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004042:	2052      	movs	r0, #82	; 0x52
 8004044:	183b      	adds	r3, r7, r0
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	215e      	movs	r1, #94	; 0x5e
 800404a:	5a52      	ldrh	r2, [r2, r1]
 800404c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800404e:	0001      	movs	r1, r0
 8004050:	187b      	adds	r3, r7, r1
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d044      	beq.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2268      	movs	r2, #104	; 0x68
 800405c:	5a9b      	ldrh	r3, [r3, r2]
 800405e:	187a      	adds	r2, r7, r1
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d23d      	bcs.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	60fb      	str	r3, [r7, #12]
  return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	2301      	movs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8004088:	400a      	ands	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800409c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80040a4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2120      	movs	r1, #32
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d0:	e007      	b.n	80040e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2108      	movs	r1, #8
 80040de:	430a      	orrs	r2, r1
 80040e0:	619a      	str	r2, [r3, #24]
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b01e      	add	sp, #120	; 0x78
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	fffffeff 	.word	0xfffffeff
 80040f0:	effffffe 	.word	0xeffffffe
 80040f4:	efffffff 	.word	0xefffffff
 80040f8:	080039b1 	.word	0x080039b1

080040fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2284      	movs	r2, #132	; 0x84
 8004138:	5c9b      	ldrb	r3, [r3, r2]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UARTEx_DisableFifoMode+0x16>
 800413e:	2302      	movs	r3, #2
 8004140:	e027      	b.n	8004192 <HAL_UARTEx_DisableFifoMode+0x66>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2284      	movs	r2, #132	; 0x84
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2288      	movs	r2, #136	; 0x88
 800414e:	2124      	movs	r1, #36	; 0x24
 8004150:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	438a      	bics	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a0b      	ldr	r2, [pc, #44]	; (800419c <HAL_UARTEx_DisableFifoMode+0x70>)
 800416e:	4013      	ands	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2288      	movs	r2, #136	; 0x88
 8004184:	2120      	movs	r1, #32
 8004186:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2284      	movs	r2, #132	; 0x84
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	dfffffff 	.word	0xdfffffff

080041a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2284      	movs	r2, #132	; 0x84
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e02e      	b.n	8004216 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2284      	movs	r2, #132	; 0x84
 80041bc:	2101      	movs	r1, #1
 80041be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2288      	movs	r2, #136	; 0x88
 80041c4:	2124      	movs	r1, #36	; 0x24
 80041c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2101      	movs	r1, #1
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	08d9      	lsrs	r1, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f854 	bl	80042a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2288      	movs	r2, #136	; 0x88
 8004208:	2120      	movs	r1, #32
 800420a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2284      	movs	r2, #132	; 0x84
 8004210:	2100      	movs	r1, #0
 8004212:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b004      	add	sp, #16
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2284      	movs	r2, #132	; 0x84
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004234:	2302      	movs	r3, #2
 8004236:	e02f      	b.n	8004298 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2284      	movs	r2, #132	; 0x84
 800423c:	2101      	movs	r1, #1
 800423e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2288      	movs	r2, #136	; 0x88
 8004244:	2124      	movs	r1, #36	; 0x24
 8004246:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2101      	movs	r1, #1
 800425c:	438a      	bics	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 f813 	bl	80042a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2288      	movs	r2, #136	; 0x88
 800428a:	2120      	movs	r1, #32
 800428c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2284      	movs	r2, #132	; 0x84
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	f1ffffff 	.word	0xf1ffffff

080042a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d108      	bne.n	80042c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	226a      	movs	r2, #106	; 0x6a
 80042b8:	2101      	movs	r1, #1
 80042ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2268      	movs	r2, #104	; 0x68
 80042c0:	2101      	movs	r1, #1
 80042c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042c4:	e043      	b.n	800434e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042c6:	260f      	movs	r6, #15
 80042c8:	19bb      	adds	r3, r7, r6
 80042ca:	2208      	movs	r2, #8
 80042cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042ce:	200e      	movs	r0, #14
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	2208      	movs	r2, #8
 80042d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	0e5b      	lsrs	r3, r3, #25
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	240d      	movs	r4, #13
 80042e2:	193b      	adds	r3, r7, r4
 80042e4:	2107      	movs	r1, #7
 80042e6:	400a      	ands	r2, r1
 80042e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	0f5b      	lsrs	r3, r3, #29
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	250c      	movs	r5, #12
 80042f6:	197b      	adds	r3, r7, r5
 80042f8:	2107      	movs	r1, #7
 80042fa:	400a      	ands	r2, r1
 80042fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	197a      	adds	r2, r7, r5
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	4914      	ldr	r1, [pc, #80]	; (8004358 <UARTEx_SetNbDataToProcess+0xb4>)
 8004308:	5c8a      	ldrb	r2, [r1, r2]
 800430a:	435a      	muls	r2, r3
 800430c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800430e:	197b      	adds	r3, r7, r5
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4a12      	ldr	r2, [pc, #72]	; (800435c <UARTEx_SetNbDataToProcess+0xb8>)
 8004314:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004316:	0019      	movs	r1, r3
 8004318:	f7fb ff7c 	bl	8000214 <__divsi3>
 800431c:	0003      	movs	r3, r0
 800431e:	b299      	uxth	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	226a      	movs	r2, #106	; 0x6a
 8004324:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004326:	19bb      	adds	r3, r7, r6
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	193a      	adds	r2, r7, r4
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <UARTEx_SetNbDataToProcess+0xb4>)
 8004330:	5c8a      	ldrb	r2, [r1, r2]
 8004332:	435a      	muls	r2, r3
 8004334:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004336:	193b      	adds	r3, r7, r4
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <UARTEx_SetNbDataToProcess+0xb8>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800433e:	0019      	movs	r1, r3
 8004340:	f7fb ff68 	bl	8000214 <__divsi3>
 8004344:	0003      	movs	r3, r0
 8004346:	b299      	uxth	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2268      	movs	r2, #104	; 0x68
 800434c:	5299      	strh	r1, [r3, r2]
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b005      	add	sp, #20
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	08004448 	.word	0x08004448
 800435c:	08004450 	.word	0x08004450

08004360 <__libc_init_array>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	2600      	movs	r6, #0
 8004364:	4d0c      	ldr	r5, [pc, #48]	; (8004398 <__libc_init_array+0x38>)
 8004366:	4c0d      	ldr	r4, [pc, #52]	; (800439c <__libc_init_array+0x3c>)
 8004368:	1b64      	subs	r4, r4, r5
 800436a:	10a4      	asrs	r4, r4, #2
 800436c:	42a6      	cmp	r6, r4
 800436e:	d109      	bne.n	8004384 <__libc_init_array+0x24>
 8004370:	2600      	movs	r6, #0
 8004372:	f000 f821 	bl	80043b8 <_init>
 8004376:	4d0a      	ldr	r5, [pc, #40]	; (80043a0 <__libc_init_array+0x40>)
 8004378:	4c0a      	ldr	r4, [pc, #40]	; (80043a4 <__libc_init_array+0x44>)
 800437a:	1b64      	subs	r4, r4, r5
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	42a6      	cmp	r6, r4
 8004380:	d105      	bne.n	800438e <__libc_init_array+0x2e>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	00b3      	lsls	r3, r6, #2
 8004386:	58eb      	ldr	r3, [r5, r3]
 8004388:	4798      	blx	r3
 800438a:	3601      	adds	r6, #1
 800438c:	e7ee      	b.n	800436c <__libc_init_array+0xc>
 800438e:	00b3      	lsls	r3, r6, #2
 8004390:	58eb      	ldr	r3, [r5, r3]
 8004392:	4798      	blx	r3
 8004394:	3601      	adds	r6, #1
 8004396:	e7f2      	b.n	800437e <__libc_init_array+0x1e>
 8004398:	08004458 	.word	0x08004458
 800439c:	08004458 	.word	0x08004458
 80043a0:	08004458 	.word	0x08004458
 80043a4:	0800445c 	.word	0x0800445c

080043a8 <memset>:
 80043a8:	0003      	movs	r3, r0
 80043aa:	1882      	adds	r2, r0, r2
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	7019      	strb	r1, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <_init>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr

080043c4 <_fini>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr
